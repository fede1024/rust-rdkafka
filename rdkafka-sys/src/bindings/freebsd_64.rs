/* automatically generated by rust-bindgen */

pub const __llvm__: ::std::os::raw::c_uint = 1;
pub const __clang__: ::std::os::raw::c_uint = 1;
pub const __clang_major__: ::std::os::raw::c_uint = 7;
pub const __clang_minor__: ::std::os::raw::c_uint = 0;
pub const __clang_patchlevel__: ::std::os::raw::c_uint = 0;
pub const __clang_version__: &'static [u8; 31usize] =
    b"7.0.0 (tags/RELEASE_700/final)\x00";
pub const __GNUC_MINOR__: ::std::os::raw::c_uint = 2;
pub const __GNUC_PATCHLEVEL__: ::std::os::raw::c_uint = 1;
pub const __GNUC__: ::std::os::raw::c_uint = 4;
pub const __GXX_ABI_VERSION: ::std::os::raw::c_uint = 1002;
pub const __ATOMIC_RELAXED: ::std::os::raw::c_uint = 0;
pub const __ATOMIC_CONSUME: ::std::os::raw::c_uint = 1;
pub const __ATOMIC_ACQUIRE: ::std::os::raw::c_uint = 2;
pub const __ATOMIC_RELEASE: ::std::os::raw::c_uint = 3;
pub const __ATOMIC_ACQ_REL: ::std::os::raw::c_uint = 4;
pub const __ATOMIC_SEQ_CST: ::std::os::raw::c_uint = 5;
pub const __OPENCL_MEMORY_SCOPE_WORK_ITEM: ::std::os::raw::c_uint = 0;
pub const __OPENCL_MEMORY_SCOPE_WORK_GROUP: ::std::os::raw::c_uint = 1;
pub const __OPENCL_MEMORY_SCOPE_DEVICE: ::std::os::raw::c_uint = 2;
pub const __OPENCL_MEMORY_SCOPE_ALL_SVM_DEVICES: ::std::os::raw::c_uint = 3;
pub const __OPENCL_MEMORY_SCOPE_SUB_GROUP: ::std::os::raw::c_uint = 4;
pub const __PRAGMA_REDEFINE_EXTNAME: ::std::os::raw::c_uint = 1;
pub const __VERSION__: &'static [u8; 54usize] =
    b"4.2.1 Compatible Clang 7.0.0 (tags/RELEASE_700/final)\x00";
pub const __OBJC_BOOL_IS_BOOL: ::std::os::raw::c_uint = 0;
pub const __CONSTANT_CFSTRINGS__: ::std::os::raw::c_uint = 1;
pub const __ORDER_LITTLE_ENDIAN__: ::std::os::raw::c_uint = 1234;
pub const __ORDER_BIG_ENDIAN__: ::std::os::raw::c_uint = 4321;
pub const __ORDER_PDP_ENDIAN__: ::std::os::raw::c_uint = 3412;
pub const __BYTE_ORDER__: ::std::os::raw::c_uint = 1234;
pub const __LITTLE_ENDIAN__: ::std::os::raw::c_uint = 1;
pub const _LP64: ::std::os::raw::c_uint = 1;
pub const __LP64__: ::std::os::raw::c_uint = 1;
pub const __CHAR_BIT__: ::std::os::raw::c_uint = 8;
pub const __SCHAR_MAX__: ::std::os::raw::c_uint = 127;
pub const __SHRT_MAX__: ::std::os::raw::c_uint = 32767;
pub const __INT_MAX__: ::std::os::raw::c_uint = 2147483647;
pub const __LONG_MAX__: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const __LONG_LONG_MAX__: ::std::os::raw::c_ulonglong =
    9223372036854775807;
pub const __WCHAR_MAX__: ::std::os::raw::c_uint = 2147483647;
pub const __WINT_MAX__: ::std::os::raw::c_uint = 2147483647;
pub const __INTMAX_MAX__: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const __SIZE_MAX__: ::std::os::raw::c_int = -1;
pub const __UINTMAX_MAX__: ::std::os::raw::c_int = -1;
pub const __PTRDIFF_MAX__: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const __INTPTR_MAX__: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const __UINTPTR_MAX__: ::std::os::raw::c_int = -1;
pub const __SIZEOF_DOUBLE__: ::std::os::raw::c_uint = 8;
pub const __SIZEOF_FLOAT__: ::std::os::raw::c_uint = 4;
pub const __SIZEOF_INT__: ::std::os::raw::c_uint = 4;
pub const __SIZEOF_LONG__: ::std::os::raw::c_uint = 8;
pub const __SIZEOF_LONG_DOUBLE__: ::std::os::raw::c_uint = 16;
pub const __SIZEOF_LONG_LONG__: ::std::os::raw::c_uint = 8;
pub const __SIZEOF_POINTER__: ::std::os::raw::c_uint = 8;
pub const __SIZEOF_SHORT__: ::std::os::raw::c_uint = 2;
pub const __SIZEOF_PTRDIFF_T__: ::std::os::raw::c_uint = 8;
pub const __SIZEOF_SIZE_T__: ::std::os::raw::c_uint = 8;
pub const __SIZEOF_WCHAR_T__: ::std::os::raw::c_uint = 4;
pub const __SIZEOF_WINT_T__: ::std::os::raw::c_uint = 4;
pub const __SIZEOF_INT128__: ::std::os::raw::c_uint = 16;
pub const __INTMAX_FMTd__: &'static [u8; 3usize] = b"ld\x00";
pub const __INTMAX_FMTi__: &'static [u8; 3usize] = b"li\x00";
pub const __UINTMAX_FMTo__: &'static [u8; 3usize] = b"lo\x00";
pub const __UINTMAX_FMTu__: &'static [u8; 3usize] = b"lu\x00";
pub const __UINTMAX_FMTx__: &'static [u8; 3usize] = b"lx\x00";
pub const __UINTMAX_FMTX__: &'static [u8; 3usize] = b"lX\x00";
pub const __INTMAX_WIDTH__: ::std::os::raw::c_uint = 64;
pub const __PTRDIFF_FMTd__: &'static [u8; 3usize] = b"ld\x00";
pub const __PTRDIFF_FMTi__: &'static [u8; 3usize] = b"li\x00";
pub const __PTRDIFF_WIDTH__: ::std::os::raw::c_uint = 64;
pub const __INTPTR_FMTd__: &'static [u8; 3usize] = b"ld\x00";
pub const __INTPTR_FMTi__: &'static [u8; 3usize] = b"li\x00";
pub const __INTPTR_WIDTH__: ::std::os::raw::c_uint = 64;
pub const __SIZE_FMTo__: &'static [u8; 3usize] = b"lo\x00";
pub const __SIZE_FMTu__: &'static [u8; 3usize] = b"lu\x00";
pub const __SIZE_FMTx__: &'static [u8; 3usize] = b"lx\x00";
pub const __SIZE_FMTX__: &'static [u8; 3usize] = b"lX\x00";
pub const __SIZE_WIDTH__: ::std::os::raw::c_uint = 64;
pub const __WCHAR_WIDTH__: ::std::os::raw::c_uint = 32;
pub const __WINT_WIDTH__: ::std::os::raw::c_uint = 32;
pub const __SIG_ATOMIC_WIDTH__: ::std::os::raw::c_uint = 32;
pub const __SIG_ATOMIC_MAX__: ::std::os::raw::c_uint = 2147483647;
pub const __UINTMAX_WIDTH__: ::std::os::raw::c_uint = 64;
pub const __UINTPTR_FMTo__: &'static [u8; 3usize] = b"lo\x00";
pub const __UINTPTR_FMTu__: &'static [u8; 3usize] = b"lu\x00";
pub const __UINTPTR_FMTx__: &'static [u8; 3usize] = b"lx\x00";
pub const __UINTPTR_FMTX__: &'static [u8; 3usize] = b"lX\x00";
pub const __UINTPTR_WIDTH__: ::std::os::raw::c_uint = 64;
pub const __FLT16_HAS_DENORM__: ::std::os::raw::c_uint = 1;
pub const __FLT16_DIG__: ::std::os::raw::c_uint = 3;
pub const __FLT16_DECIMAL_DIG__: ::std::os::raw::c_uint = 5;
pub const __FLT16_HAS_INFINITY__: ::std::os::raw::c_uint = 1;
pub const __FLT16_HAS_QUIET_NAN__: ::std::os::raw::c_uint = 1;
pub const __FLT16_MANT_DIG__: ::std::os::raw::c_uint = 11;
pub const __FLT16_MAX_10_EXP__: ::std::os::raw::c_uint = 4;
pub const __FLT16_MAX_EXP__: ::std::os::raw::c_uint = 15;
pub const __FLT16_MIN_10_EXP__: ::std::os::raw::c_int = -13;
pub const __FLT16_MIN_EXP__: ::std::os::raw::c_int = -14;
pub const __FLT_HAS_DENORM__: ::std::os::raw::c_uint = 1;
pub const __FLT_DIG__: ::std::os::raw::c_uint = 6;
pub const __FLT_DECIMAL_DIG__: ::std::os::raw::c_uint = 9;
pub const __FLT_HAS_INFINITY__: ::std::os::raw::c_uint = 1;
pub const __FLT_HAS_QUIET_NAN__: ::std::os::raw::c_uint = 1;
pub const __FLT_MANT_DIG__: ::std::os::raw::c_uint = 24;
pub const __FLT_MAX_10_EXP__: ::std::os::raw::c_uint = 38;
pub const __FLT_MAX_EXP__: ::std::os::raw::c_uint = 128;
pub const __FLT_MIN_10_EXP__: ::std::os::raw::c_int = -37;
pub const __FLT_MIN_EXP__: ::std::os::raw::c_int = -125;
pub const __DBL_HAS_DENORM__: ::std::os::raw::c_uint = 1;
pub const __DBL_DIG__: ::std::os::raw::c_uint = 15;
pub const __DBL_DECIMAL_DIG__: ::std::os::raw::c_uint = 17;
pub const __DBL_HAS_INFINITY__: ::std::os::raw::c_uint = 1;
pub const __DBL_HAS_QUIET_NAN__: ::std::os::raw::c_uint = 1;
pub const __DBL_MANT_DIG__: ::std::os::raw::c_uint = 53;
pub const __DBL_MAX_10_EXP__: ::std::os::raw::c_uint = 308;
pub const __DBL_MAX_EXP__: ::std::os::raw::c_uint = 1024;
pub const __DBL_MIN_10_EXP__: ::std::os::raw::c_int = -307;
pub const __DBL_MIN_EXP__: ::std::os::raw::c_int = -1021;
pub const __LDBL_HAS_DENORM__: ::std::os::raw::c_uint = 1;
pub const __LDBL_DIG__: ::std::os::raw::c_uint = 18;
pub const __LDBL_DECIMAL_DIG__: ::std::os::raw::c_uint = 21;
pub const __LDBL_HAS_INFINITY__: ::std::os::raw::c_uint = 1;
pub const __LDBL_HAS_QUIET_NAN__: ::std::os::raw::c_uint = 1;
pub const __LDBL_MANT_DIG__: ::std::os::raw::c_uint = 64;
pub const __LDBL_MAX_10_EXP__: ::std::os::raw::c_uint = 4932;
pub const __LDBL_MAX_EXP__: ::std::os::raw::c_uint = 16384;
pub const __LDBL_MIN_10_EXP__: ::std::os::raw::c_int = -4931;
pub const __LDBL_MIN_EXP__: ::std::os::raw::c_int = -16381;
pub const __POINTER_WIDTH__: ::std::os::raw::c_uint = 64;
pub const __BIGGEST_ALIGNMENT__: ::std::os::raw::c_uint = 16;
pub const __INT8_FMTd__: &'static [u8; 4usize] = b"hhd\x00";
pub const __INT8_FMTi__: &'static [u8; 4usize] = b"hhi\x00";
pub const __INT16_FMTd__: &'static [u8; 3usize] = b"hd\x00";
pub const __INT16_FMTi__: &'static [u8; 3usize] = b"hi\x00";
pub const __INT32_FMTd__: &'static [u8; 2usize] = b"d\x00";
pub const __INT32_FMTi__: &'static [u8; 2usize] = b"i\x00";
pub const __INT64_FMTd__: &'static [u8; 3usize] = b"ld\x00";
pub const __INT64_FMTi__: &'static [u8; 3usize] = b"li\x00";
pub const __UINT8_FMTo__: &'static [u8; 4usize] = b"hho\x00";
pub const __UINT8_FMTu__: &'static [u8; 4usize] = b"hhu\x00";
pub const __UINT8_FMTx__: &'static [u8; 4usize] = b"hhx\x00";
pub const __UINT8_FMTX__: &'static [u8; 4usize] = b"hhX\x00";
pub const __UINT8_MAX__: ::std::os::raw::c_uint = 255;
pub const __INT8_MAX__: ::std::os::raw::c_uint = 127;
pub const __UINT16_FMTo__: &'static [u8; 3usize] = b"ho\x00";
pub const __UINT16_FMTu__: &'static [u8; 3usize] = b"hu\x00";
pub const __UINT16_FMTx__: &'static [u8; 3usize] = b"hx\x00";
pub const __UINT16_FMTX__: &'static [u8; 3usize] = b"hX\x00";
pub const __UINT16_MAX__: ::std::os::raw::c_uint = 65535;
pub const __INT16_MAX__: ::std::os::raw::c_uint = 32767;
pub const __UINT32_FMTo__: &'static [u8; 2usize] = b"o\x00";
pub const __UINT32_FMTu__: &'static [u8; 2usize] = b"u\x00";
pub const __UINT32_FMTx__: &'static [u8; 2usize] = b"x\x00";
pub const __UINT32_FMTX__: &'static [u8; 2usize] = b"X\x00";
pub const __UINT32_MAX__: ::std::os::raw::c_uint = 4294967295;
pub const __INT32_MAX__: ::std::os::raw::c_uint = 2147483647;
pub const __UINT64_FMTo__: &'static [u8; 3usize] = b"lo\x00";
pub const __UINT64_FMTu__: &'static [u8; 3usize] = b"lu\x00";
pub const __UINT64_FMTx__: &'static [u8; 3usize] = b"lx\x00";
pub const __UINT64_FMTX__: &'static [u8; 3usize] = b"lX\x00";
pub const __UINT64_MAX__: ::std::os::raw::c_int = -1;
pub const __INT64_MAX__: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const __INT_LEAST8_MAX__: ::std::os::raw::c_uint = 127;
pub const __INT_LEAST8_FMTd__: &'static [u8; 4usize] = b"hhd\x00";
pub const __INT_LEAST8_FMTi__: &'static [u8; 4usize] = b"hhi\x00";
pub const __UINT_LEAST8_MAX__: ::std::os::raw::c_uint = 255;
pub const __UINT_LEAST8_FMTo__: &'static [u8; 4usize] = b"hho\x00";
pub const __UINT_LEAST8_FMTu__: &'static [u8; 4usize] = b"hhu\x00";
pub const __UINT_LEAST8_FMTx__: &'static [u8; 4usize] = b"hhx\x00";
pub const __UINT_LEAST8_FMTX__: &'static [u8; 4usize] = b"hhX\x00";
pub const __INT_LEAST16_MAX__: ::std::os::raw::c_uint = 32767;
pub const __INT_LEAST16_FMTd__: &'static [u8; 3usize] = b"hd\x00";
pub const __INT_LEAST16_FMTi__: &'static [u8; 3usize] = b"hi\x00";
pub const __UINT_LEAST16_MAX__: ::std::os::raw::c_uint = 65535;
pub const __UINT_LEAST16_FMTo__: &'static [u8; 3usize] = b"ho\x00";
pub const __UINT_LEAST16_FMTu__: &'static [u8; 3usize] = b"hu\x00";
pub const __UINT_LEAST16_FMTx__: &'static [u8; 3usize] = b"hx\x00";
pub const __UINT_LEAST16_FMTX__: &'static [u8; 3usize] = b"hX\x00";
pub const __INT_LEAST32_MAX__: ::std::os::raw::c_uint = 2147483647;
pub const __INT_LEAST32_FMTd__: &'static [u8; 2usize] = b"d\x00";
pub const __INT_LEAST32_FMTi__: &'static [u8; 2usize] = b"i\x00";
pub const __UINT_LEAST32_MAX__: ::std::os::raw::c_uint = 4294967295;
pub const __UINT_LEAST32_FMTo__: &'static [u8; 2usize] = b"o\x00";
pub const __UINT_LEAST32_FMTu__: &'static [u8; 2usize] = b"u\x00";
pub const __UINT_LEAST32_FMTx__: &'static [u8; 2usize] = b"x\x00";
pub const __UINT_LEAST32_FMTX__: &'static [u8; 2usize] = b"X\x00";
pub const __INT_LEAST64_MAX__: ::std::os::raw::c_ulonglong =
    9223372036854775807;
pub const __INT_LEAST64_FMTd__: &'static [u8; 3usize] = b"ld\x00";
pub const __INT_LEAST64_FMTi__: &'static [u8; 3usize] = b"li\x00";
pub const __UINT_LEAST64_MAX__: ::std::os::raw::c_int = -1;
pub const __UINT_LEAST64_FMTo__: &'static [u8; 3usize] = b"lo\x00";
pub const __UINT_LEAST64_FMTu__: &'static [u8; 3usize] = b"lu\x00";
pub const __UINT_LEAST64_FMTx__: &'static [u8; 3usize] = b"lx\x00";
pub const __UINT_LEAST64_FMTX__: &'static [u8; 3usize] = b"lX\x00";
pub const __INT_FAST8_MAX__: ::std::os::raw::c_uint = 127;
pub const __INT_FAST8_FMTd__: &'static [u8; 4usize] = b"hhd\x00";
pub const __INT_FAST8_FMTi__: &'static [u8; 4usize] = b"hhi\x00";
pub const __UINT_FAST8_MAX__: ::std::os::raw::c_uint = 255;
pub const __UINT_FAST8_FMTo__: &'static [u8; 4usize] = b"hho\x00";
pub const __UINT_FAST8_FMTu__: &'static [u8; 4usize] = b"hhu\x00";
pub const __UINT_FAST8_FMTx__: &'static [u8; 4usize] = b"hhx\x00";
pub const __UINT_FAST8_FMTX__: &'static [u8; 4usize] = b"hhX\x00";
pub const __INT_FAST16_MAX__: ::std::os::raw::c_uint = 32767;
pub const __INT_FAST16_FMTd__: &'static [u8; 3usize] = b"hd\x00";
pub const __INT_FAST16_FMTi__: &'static [u8; 3usize] = b"hi\x00";
pub const __UINT_FAST16_MAX__: ::std::os::raw::c_uint = 65535;
pub const __UINT_FAST16_FMTo__: &'static [u8; 3usize] = b"ho\x00";
pub const __UINT_FAST16_FMTu__: &'static [u8; 3usize] = b"hu\x00";
pub const __UINT_FAST16_FMTx__: &'static [u8; 3usize] = b"hx\x00";
pub const __UINT_FAST16_FMTX__: &'static [u8; 3usize] = b"hX\x00";
pub const __INT_FAST32_MAX__: ::std::os::raw::c_uint = 2147483647;
pub const __INT_FAST32_FMTd__: &'static [u8; 2usize] = b"d\x00";
pub const __INT_FAST32_FMTi__: &'static [u8; 2usize] = b"i\x00";
pub const __UINT_FAST32_MAX__: ::std::os::raw::c_uint = 4294967295;
pub const __UINT_FAST32_FMTo__: &'static [u8; 2usize] = b"o\x00";
pub const __UINT_FAST32_FMTu__: &'static [u8; 2usize] = b"u\x00";
pub const __UINT_FAST32_FMTx__: &'static [u8; 2usize] = b"x\x00";
pub const __UINT_FAST32_FMTX__: &'static [u8; 2usize] = b"X\x00";
pub const __INT_FAST64_MAX__: ::std::os::raw::c_ulonglong =
    9223372036854775807;
pub const __INT_FAST64_FMTd__: &'static [u8; 3usize] = b"ld\x00";
pub const __INT_FAST64_FMTi__: &'static [u8; 3usize] = b"li\x00";
pub const __UINT_FAST64_MAX__: ::std::os::raw::c_int = -1;
pub const __UINT_FAST64_FMTo__: &'static [u8; 3usize] = b"lo\x00";
pub const __UINT_FAST64_FMTu__: &'static [u8; 3usize] = b"lu\x00";
pub const __UINT_FAST64_FMTx__: &'static [u8; 3usize] = b"lx\x00";
pub const __UINT_FAST64_FMTX__: &'static [u8; 3usize] = b"lX\x00";
pub const __FINITE_MATH_ONLY__: ::std::os::raw::c_uint = 0;
pub const __GNUC_STDC_INLINE__: ::std::os::raw::c_uint = 1;
pub const __GCC_ATOMIC_TEST_AND_SET_TRUEVAL: ::std::os::raw::c_uint = 1;
pub const __CLANG_ATOMIC_BOOL_LOCK_FREE: ::std::os::raw::c_uint = 2;
pub const __CLANG_ATOMIC_CHAR_LOCK_FREE: ::std::os::raw::c_uint = 2;
pub const __CLANG_ATOMIC_CHAR16_T_LOCK_FREE: ::std::os::raw::c_uint = 2;
pub const __CLANG_ATOMIC_CHAR32_T_LOCK_FREE: ::std::os::raw::c_uint = 2;
pub const __CLANG_ATOMIC_WCHAR_T_LOCK_FREE: ::std::os::raw::c_uint = 2;
pub const __CLANG_ATOMIC_SHORT_LOCK_FREE: ::std::os::raw::c_uint = 2;
pub const __CLANG_ATOMIC_INT_LOCK_FREE: ::std::os::raw::c_uint = 2;
pub const __CLANG_ATOMIC_LONG_LOCK_FREE: ::std::os::raw::c_uint = 2;
pub const __CLANG_ATOMIC_LLONG_LOCK_FREE: ::std::os::raw::c_uint = 2;
pub const __CLANG_ATOMIC_POINTER_LOCK_FREE: ::std::os::raw::c_uint = 2;
pub const __GCC_ATOMIC_BOOL_LOCK_FREE: ::std::os::raw::c_uint = 2;
pub const __GCC_ATOMIC_CHAR_LOCK_FREE: ::std::os::raw::c_uint = 2;
pub const __GCC_ATOMIC_CHAR16_T_LOCK_FREE: ::std::os::raw::c_uint = 2;
pub const __GCC_ATOMIC_CHAR32_T_LOCK_FREE: ::std::os::raw::c_uint = 2;
pub const __GCC_ATOMIC_WCHAR_T_LOCK_FREE: ::std::os::raw::c_uint = 2;
pub const __GCC_ATOMIC_SHORT_LOCK_FREE: ::std::os::raw::c_uint = 2;
pub const __GCC_ATOMIC_INT_LOCK_FREE: ::std::os::raw::c_uint = 2;
pub const __GCC_ATOMIC_LONG_LOCK_FREE: ::std::os::raw::c_uint = 2;
pub const __GCC_ATOMIC_LLONG_LOCK_FREE: ::std::os::raw::c_uint = 2;
pub const __GCC_ATOMIC_POINTER_LOCK_FREE: ::std::os::raw::c_uint = 2;
pub const __NO_INLINE__: ::std::os::raw::c_uint = 1;
pub const __FLT_EVAL_METHOD__: ::std::os::raw::c_uint = 0;
pub const __FLT_RADIX__: ::std::os::raw::c_uint = 2;
pub const __DECIMAL_DIG__: ::std::os::raw::c_uint = 21;
pub const __amd64__: ::std::os::raw::c_uint = 1;
pub const __amd64: ::std::os::raw::c_uint = 1;
pub const __x86_64: ::std::os::raw::c_uint = 1;
pub const __x86_64__: ::std::os::raw::c_uint = 1;
pub const __k8: ::std::os::raw::c_uint = 1;
pub const __k8__: ::std::os::raw::c_uint = 1;
pub const __tune_k8__: ::std::os::raw::c_uint = 1;
pub const __NO_MATH_INLINES: ::std::os::raw::c_uint = 1;
pub const __FXSR__: ::std::os::raw::c_uint = 1;
pub const __SSE2__: ::std::os::raw::c_uint = 1;
pub const __SSE2_MATH__: ::std::os::raw::c_uint = 1;
pub const __SSE__: ::std::os::raw::c_uint = 1;
pub const __SSE_MATH__: ::std::os::raw::c_uint = 1;
pub const __MMX__: ::std::os::raw::c_uint = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1: ::std::os::raw::c_uint = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2: ::std::os::raw::c_uint = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4: ::std::os::raw::c_uint = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_8: ::std::os::raw::c_uint = 1;
pub const __FreeBSD__: ::std::os::raw::c_uint = 10;
pub const __FreeBSD_cc_version: ::std::os::raw::c_uint = 1000001;
pub const __KPRINTF_ATTRIBUTE__: ::std::os::raw::c_uint = 1;
pub const unix: ::std::os::raw::c_uint = 1;
pub const __unix: ::std::os::raw::c_uint = 1;
pub const __unix__: ::std::os::raw::c_uint = 1;
pub const __ELF__: ::std::os::raw::c_uint = 1;
pub const __STDC_MB_MIGHT_NEQ_WC__: ::std::os::raw::c_uint = 1;
pub const __STDC__: ::std::os::raw::c_uint = 1;
pub const __STDC_HOSTED__: ::std::os::raw::c_uint = 1;
pub const __STDC_VERSION__: ::std::os::raw::c_uint = 201112;
pub const __STDC_UTF_16__: ::std::os::raw::c_uint = 1;
pub const __STDC_UTF_32__: ::std::os::raw::c_uint = 1;
pub const __GNUCLIKE_ASM: ::std::os::raw::c_uint = 3;
pub const __GNUCLIKE___TYPEOF: ::std::os::raw::c_uint = 1;
pub const __GNUCLIKE___OFFSETOF: ::std::os::raw::c_uint = 1;
pub const __GNUCLIKE___SECTION: ::std::os::raw::c_uint = 1;
pub const __GNUCLIKE_CTOR_SECTION_HANDLING: ::std::os::raw::c_uint = 1;
pub const __GNUCLIKE_BUILTIN_CONSTANT_P: ::std::os::raw::c_uint = 1;
pub const __GNUCLIKE_BUILTIN_VARARGS: ::std::os::raw::c_uint = 1;
pub const __GNUCLIKE_BUILTIN_STDARG: ::std::os::raw::c_uint = 1;
pub const __GNUCLIKE_BUILTIN_VAALIST: ::std::os::raw::c_uint = 1;
pub const __GNUC_VA_LIST_COMPATIBILITY: ::std::os::raw::c_uint = 1;
pub const __GNUCLIKE_BUILTIN_NEXT_ARG: ::std::os::raw::c_uint = 1;
pub const __GNUCLIKE_BUILTIN_MEMCPY: ::std::os::raw::c_uint = 1;
pub const __CC_SUPPORTS_INLINE: ::std::os::raw::c_uint = 1;
pub const __CC_SUPPORTS___INLINE: ::std::os::raw::c_uint = 1;
pub const __CC_SUPPORTS___INLINE__: ::std::os::raw::c_uint = 1;
pub const __CC_SUPPORTS___FUNC__: ::std::os::raw::c_uint = 1;
pub const __CC_SUPPORTS_WARNING: ::std::os::raw::c_uint = 1;
pub const __CC_SUPPORTS_VARADIC_XXX: ::std::os::raw::c_uint = 1;
pub const __CC_SUPPORTS_DYNAMIC_ARRAY_INIT: ::std::os::raw::c_uint = 1;
pub const __POSIX_VISIBLE: ::std::os::raw::c_uint = 200809;
pub const __XSI_VISIBLE: ::std::os::raw::c_uint = 700;
pub const __BSD_VISIBLE: ::std::os::raw::c_uint = 1;
pub const __ISO_C_VISIBLE: ::std::os::raw::c_uint = 2011;
pub const __SLBF: ::std::os::raw::c_uint = 1;
pub const __SNBF: ::std::os::raw::c_uint = 2;
pub const __SRD: ::std::os::raw::c_uint = 4;
pub const __SWR: ::std::os::raw::c_uint = 8;
pub const __SRW: ::std::os::raw::c_uint = 16;
pub const __SEOF: ::std::os::raw::c_uint = 32;
pub const __SERR: ::std::os::raw::c_uint = 64;
pub const __SMBF: ::std::os::raw::c_uint = 128;
pub const __SAPP: ::std::os::raw::c_uint = 256;
pub const __SSTR: ::std::os::raw::c_uint = 512;
pub const __SOPT: ::std::os::raw::c_uint = 1024;
pub const __SNPT: ::std::os::raw::c_uint = 2048;
pub const __SOFF: ::std::os::raw::c_uint = 4096;
pub const __SMOD: ::std::os::raw::c_uint = 8192;
pub const __SALC: ::std::os::raw::c_uint = 16384;
pub const __SIGN: ::std::os::raw::c_uint = 32768;
pub const __S2OAP: ::std::os::raw::c_uint = 1;
pub const _IOFBF: ::std::os::raw::c_uint = 0;
pub const _IOLBF: ::std::os::raw::c_uint = 1;
pub const _IONBF: ::std::os::raw::c_uint = 2;
pub const BUFSIZ: ::std::os::raw::c_uint = 1024;
pub const EOF: ::std::os::raw::c_int = -1;
pub const FOPEN_MAX: ::std::os::raw::c_uint = 20;
pub const FILENAME_MAX: ::std::os::raw::c_uint = 1024;
pub const P_tmpdir: &'static [u8; 6usize] = b"/tmp/\x00";
pub const L_tmpnam: ::std::os::raw::c_uint = 1024;
pub const TMP_MAX: ::std::os::raw::c_uint = 308915776;
pub const SEEK_SET: ::std::os::raw::c_uint = 0;
pub const SEEK_CUR: ::std::os::raw::c_uint = 1;
pub const SEEK_END: ::std::os::raw::c_uint = 2;
pub const L_cuserid: ::std::os::raw::c_uint = 17;
pub const L_ctermid: ::std::os::raw::c_uint = 1024;
pub const __PRI64: &'static [u8; 2usize] = b"l\x00";
pub const __PRIptr: &'static [u8; 2usize] = b"l\x00";
pub const PRId8: &'static [u8; 2usize] = b"d\x00";
pub const PRId16: &'static [u8; 2usize] = b"d\x00";
pub const PRId32: &'static [u8; 2usize] = b"d\x00";
pub const PRId64: &'static [u8; 3usize] = b"ld\x00";
pub const PRIdLEAST8: &'static [u8; 2usize] = b"d\x00";
pub const PRIdLEAST16: &'static [u8; 2usize] = b"d\x00";
pub const PRIdLEAST32: &'static [u8; 2usize] = b"d\x00";
pub const PRIdLEAST64: &'static [u8; 3usize] = b"ld\x00";
pub const PRIdFAST8: &'static [u8; 2usize] = b"d\x00";
pub const PRIdFAST16: &'static [u8; 2usize] = b"d\x00";
pub const PRIdFAST32: &'static [u8; 2usize] = b"d\x00";
pub const PRIdFAST64: &'static [u8; 3usize] = b"ld\x00";
pub const PRIdMAX: &'static [u8; 3usize] = b"jd\x00";
pub const PRIdPTR: &'static [u8; 3usize] = b"ld\x00";
pub const PRIi8: &'static [u8; 2usize] = b"i\x00";
pub const PRIi16: &'static [u8; 2usize] = b"i\x00";
pub const PRIi32: &'static [u8; 2usize] = b"i\x00";
pub const PRIi64: &'static [u8; 3usize] = b"li\x00";
pub const PRIiLEAST8: &'static [u8; 2usize] = b"i\x00";
pub const PRIiLEAST16: &'static [u8; 2usize] = b"i\x00";
pub const PRIiLEAST32: &'static [u8; 2usize] = b"i\x00";
pub const PRIiLEAST64: &'static [u8; 3usize] = b"li\x00";
pub const PRIiFAST8: &'static [u8; 2usize] = b"i\x00";
pub const PRIiFAST16: &'static [u8; 2usize] = b"i\x00";
pub const PRIiFAST32: &'static [u8; 2usize] = b"i\x00";
pub const PRIiFAST64: &'static [u8; 3usize] = b"li\x00";
pub const PRIiMAX: &'static [u8; 3usize] = b"ji\x00";
pub const PRIiPTR: &'static [u8; 3usize] = b"li\x00";
pub const PRIo8: &'static [u8; 2usize] = b"o\x00";
pub const PRIo16: &'static [u8; 2usize] = b"o\x00";
pub const PRIo32: &'static [u8; 2usize] = b"o\x00";
pub const PRIo64: &'static [u8; 3usize] = b"lo\x00";
pub const PRIoLEAST8: &'static [u8; 2usize] = b"o\x00";
pub const PRIoLEAST16: &'static [u8; 2usize] = b"o\x00";
pub const PRIoLEAST32: &'static [u8; 2usize] = b"o\x00";
pub const PRIoLEAST64: &'static [u8; 3usize] = b"lo\x00";
pub const PRIoFAST8: &'static [u8; 2usize] = b"o\x00";
pub const PRIoFAST16: &'static [u8; 2usize] = b"o\x00";
pub const PRIoFAST32: &'static [u8; 2usize] = b"o\x00";
pub const PRIoFAST64: &'static [u8; 3usize] = b"lo\x00";
pub const PRIoMAX: &'static [u8; 3usize] = b"jo\x00";
pub const PRIoPTR: &'static [u8; 3usize] = b"lo\x00";
pub const PRIu8: &'static [u8; 2usize] = b"u\x00";
pub const PRIu16: &'static [u8; 2usize] = b"u\x00";
pub const PRIu32: &'static [u8; 2usize] = b"u\x00";
pub const PRIu64: &'static [u8; 3usize] = b"lu\x00";
pub const PRIuLEAST8: &'static [u8; 2usize] = b"u\x00";
pub const PRIuLEAST16: &'static [u8; 2usize] = b"u\x00";
pub const PRIuLEAST32: &'static [u8; 2usize] = b"u\x00";
pub const PRIuLEAST64: &'static [u8; 3usize] = b"lu\x00";
pub const PRIuFAST8: &'static [u8; 2usize] = b"u\x00";
pub const PRIuFAST16: &'static [u8; 2usize] = b"u\x00";
pub const PRIuFAST32: &'static [u8; 2usize] = b"u\x00";
pub const PRIuFAST64: &'static [u8; 3usize] = b"lu\x00";
pub const PRIuMAX: &'static [u8; 3usize] = b"ju\x00";
pub const PRIuPTR: &'static [u8; 3usize] = b"lu\x00";
pub const PRIx8: &'static [u8; 2usize] = b"x\x00";
pub const PRIx16: &'static [u8; 2usize] = b"x\x00";
pub const PRIx32: &'static [u8; 2usize] = b"x\x00";
pub const PRIx64: &'static [u8; 3usize] = b"lx\x00";
pub const PRIxLEAST8: &'static [u8; 2usize] = b"x\x00";
pub const PRIxLEAST16: &'static [u8; 2usize] = b"x\x00";
pub const PRIxLEAST32: &'static [u8; 2usize] = b"x\x00";
pub const PRIxLEAST64: &'static [u8; 3usize] = b"lx\x00";
pub const PRIxFAST8: &'static [u8; 2usize] = b"x\x00";
pub const PRIxFAST16: &'static [u8; 2usize] = b"x\x00";
pub const PRIxFAST32: &'static [u8; 2usize] = b"x\x00";
pub const PRIxFAST64: &'static [u8; 3usize] = b"lx\x00";
pub const PRIxMAX: &'static [u8; 3usize] = b"jx\x00";
pub const PRIxPTR: &'static [u8; 3usize] = b"lx\x00";
pub const PRIX8: &'static [u8; 2usize] = b"X\x00";
pub const PRIX16: &'static [u8; 2usize] = b"X\x00";
pub const PRIX32: &'static [u8; 2usize] = b"X\x00";
pub const PRIX64: &'static [u8; 3usize] = b"lX\x00";
pub const PRIXLEAST8: &'static [u8; 2usize] = b"X\x00";
pub const PRIXLEAST16: &'static [u8; 2usize] = b"X\x00";
pub const PRIXLEAST32: &'static [u8; 2usize] = b"X\x00";
pub const PRIXLEAST64: &'static [u8; 3usize] = b"lX\x00";
pub const PRIXFAST8: &'static [u8; 2usize] = b"X\x00";
pub const PRIXFAST16: &'static [u8; 2usize] = b"X\x00";
pub const PRIXFAST32: &'static [u8; 2usize] = b"X\x00";
pub const PRIXFAST64: &'static [u8; 3usize] = b"lX\x00";
pub const PRIXMAX: &'static [u8; 3usize] = b"jX\x00";
pub const PRIXPTR: &'static [u8; 3usize] = b"lX\x00";
pub const SCNd8: &'static [u8; 4usize] = b"hhd\x00";
pub const SCNd16: &'static [u8; 3usize] = b"hd\x00";
pub const SCNd32: &'static [u8; 2usize] = b"d\x00";
pub const SCNd64: &'static [u8; 3usize] = b"ld\x00";
pub const SCNdLEAST8: &'static [u8; 4usize] = b"hhd\x00";
pub const SCNdLEAST16: &'static [u8; 3usize] = b"hd\x00";
pub const SCNdLEAST32: &'static [u8; 2usize] = b"d\x00";
pub const SCNdLEAST64: &'static [u8; 3usize] = b"ld\x00";
pub const SCNdFAST8: &'static [u8; 2usize] = b"d\x00";
pub const SCNdFAST16: &'static [u8; 2usize] = b"d\x00";
pub const SCNdFAST32: &'static [u8; 2usize] = b"d\x00";
pub const SCNdFAST64: &'static [u8; 3usize] = b"ld\x00";
pub const SCNdMAX: &'static [u8; 3usize] = b"jd\x00";
pub const SCNdPTR: &'static [u8; 3usize] = b"ld\x00";
pub const SCNi8: &'static [u8; 4usize] = b"hhi\x00";
pub const SCNi16: &'static [u8; 3usize] = b"hi\x00";
pub const SCNi32: &'static [u8; 2usize] = b"i\x00";
pub const SCNi64: &'static [u8; 3usize] = b"li\x00";
pub const SCNiLEAST8: &'static [u8; 4usize] = b"hhi\x00";
pub const SCNiLEAST16: &'static [u8; 3usize] = b"hi\x00";
pub const SCNiLEAST32: &'static [u8; 2usize] = b"i\x00";
pub const SCNiLEAST64: &'static [u8; 3usize] = b"li\x00";
pub const SCNiFAST8: &'static [u8; 2usize] = b"i\x00";
pub const SCNiFAST16: &'static [u8; 2usize] = b"i\x00";
pub const SCNiFAST32: &'static [u8; 2usize] = b"i\x00";
pub const SCNiFAST64: &'static [u8; 3usize] = b"li\x00";
pub const SCNiMAX: &'static [u8; 3usize] = b"ji\x00";
pub const SCNiPTR: &'static [u8; 3usize] = b"li\x00";
pub const SCNo8: &'static [u8; 4usize] = b"hho\x00";
pub const SCNo16: &'static [u8; 3usize] = b"ho\x00";
pub const SCNo32: &'static [u8; 2usize] = b"o\x00";
pub const SCNo64: &'static [u8; 3usize] = b"lo\x00";
pub const SCNoLEAST8: &'static [u8; 4usize] = b"hho\x00";
pub const SCNoLEAST16: &'static [u8; 3usize] = b"ho\x00";
pub const SCNoLEAST32: &'static [u8; 2usize] = b"o\x00";
pub const SCNoLEAST64: &'static [u8; 3usize] = b"lo\x00";
pub const SCNoFAST8: &'static [u8; 2usize] = b"o\x00";
pub const SCNoFAST16: &'static [u8; 2usize] = b"o\x00";
pub const SCNoFAST32: &'static [u8; 2usize] = b"o\x00";
pub const SCNoFAST64: &'static [u8; 3usize] = b"lo\x00";
pub const SCNoMAX: &'static [u8; 3usize] = b"jo\x00";
pub const SCNoPTR: &'static [u8; 3usize] = b"lo\x00";
pub const SCNu8: &'static [u8; 4usize] = b"hhu\x00";
pub const SCNu16: &'static [u8; 3usize] = b"hu\x00";
pub const SCNu32: &'static [u8; 2usize] = b"u\x00";
pub const SCNu64: &'static [u8; 3usize] = b"lu\x00";
pub const SCNuLEAST8: &'static [u8; 4usize] = b"hhu\x00";
pub const SCNuLEAST16: &'static [u8; 3usize] = b"hu\x00";
pub const SCNuLEAST32: &'static [u8; 2usize] = b"u\x00";
pub const SCNuLEAST64: &'static [u8; 3usize] = b"lu\x00";
pub const SCNuFAST8: &'static [u8; 2usize] = b"u\x00";
pub const SCNuFAST16: &'static [u8; 2usize] = b"u\x00";
pub const SCNuFAST32: &'static [u8; 2usize] = b"u\x00";
pub const SCNuFAST64: &'static [u8; 3usize] = b"lu\x00";
pub const SCNuMAX: &'static [u8; 3usize] = b"ju\x00";
pub const SCNuPTR: &'static [u8; 3usize] = b"lu\x00";
pub const SCNx8: &'static [u8; 4usize] = b"hhx\x00";
pub const SCNx16: &'static [u8; 3usize] = b"hx\x00";
pub const SCNx32: &'static [u8; 2usize] = b"x\x00";
pub const SCNx64: &'static [u8; 3usize] = b"lx\x00";
pub const SCNxLEAST8: &'static [u8; 4usize] = b"hhx\x00";
pub const SCNxLEAST16: &'static [u8; 3usize] = b"hx\x00";
pub const SCNxLEAST32: &'static [u8; 2usize] = b"x\x00";
pub const SCNxLEAST64: &'static [u8; 3usize] = b"lx\x00";
pub const SCNxFAST8: &'static [u8; 2usize] = b"x\x00";
pub const SCNxFAST16: &'static [u8; 2usize] = b"x\x00";
pub const SCNxFAST32: &'static [u8; 2usize] = b"x\x00";
pub const SCNxFAST64: &'static [u8; 3usize] = b"lx\x00";
pub const SCNxMAX: &'static [u8; 3usize] = b"jx\x00";
pub const SCNxPTR: &'static [u8; 3usize] = b"lx\x00";
pub const INT8_MIN: ::std::os::raw::c_int = -128;
pub const INT16_MIN: ::std::os::raw::c_int = -32768;
pub const INT32_MIN: ::std::os::raw::c_int = -2147483648;
pub const INT8_MAX: ::std::os::raw::c_uint = 127;
pub const INT16_MAX: ::std::os::raw::c_uint = 32767;
pub const INT32_MAX: ::std::os::raw::c_uint = 2147483647;
pub const UINT8_MAX: ::std::os::raw::c_uint = 255;
pub const UINT16_MAX: ::std::os::raw::c_uint = 65535;
pub const UINT32_MAX: ::std::os::raw::c_uint = 4294967295;
pub const INT64_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const INT64_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const UINT64_MAX: ::std::os::raw::c_int = -1;
pub const INT_LEAST8_MIN: ::std::os::raw::c_int = -128;
pub const INT_LEAST16_MIN: ::std::os::raw::c_int = -32768;
pub const INT_LEAST32_MIN: ::std::os::raw::c_int = -2147483648;
pub const INT_LEAST64_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const INT_LEAST8_MAX: ::std::os::raw::c_uint = 127;
pub const INT_LEAST16_MAX: ::std::os::raw::c_uint = 32767;
pub const INT_LEAST32_MAX: ::std::os::raw::c_uint = 2147483647;
pub const INT_LEAST64_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const UINT_LEAST8_MAX: ::std::os::raw::c_uint = 255;
pub const UINT_LEAST16_MAX: ::std::os::raw::c_uint = 65535;
pub const UINT_LEAST32_MAX: ::std::os::raw::c_uint = 4294967295;
pub const UINT_LEAST64_MAX: ::std::os::raw::c_int = -1;
pub const INT_FAST8_MIN: ::std::os::raw::c_int = -2147483648;
pub const INT_FAST16_MIN: ::std::os::raw::c_int = -2147483648;
pub const INT_FAST32_MIN: ::std::os::raw::c_int = -2147483648;
pub const INT_FAST64_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const INT_FAST8_MAX: ::std::os::raw::c_uint = 2147483647;
pub const INT_FAST16_MAX: ::std::os::raw::c_uint = 2147483647;
pub const INT_FAST32_MAX: ::std::os::raw::c_uint = 2147483647;
pub const INT_FAST64_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const UINT_FAST8_MAX: ::std::os::raw::c_uint = 4294967295;
pub const UINT_FAST16_MAX: ::std::os::raw::c_uint = 4294967295;
pub const UINT_FAST32_MAX: ::std::os::raw::c_uint = 4294967295;
pub const UINT_FAST64_MAX: ::std::os::raw::c_int = -1;
pub const INTPTR_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const INTPTR_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const UINTPTR_MAX: ::std::os::raw::c_int = -1;
pub const INTMAX_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const INTMAX_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const UINTMAX_MAX: ::std::os::raw::c_int = -1;
pub const PTRDIFF_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const PTRDIFF_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const SIZE_MAX: ::std::os::raw::c_int = -1;
pub const WINT_MIN: ::std::os::raw::c_int = -2147483648;
pub const WINT_MAX: ::std::os::raw::c_uint = 2147483647;
pub const __WORDSIZE: ::std::os::raw::c_uint = 64;
pub const _QUAD_HIGHWORD: ::std::os::raw::c_uint = 1;
pub const _QUAD_LOWWORD: ::std::os::raw::c_uint = 0;
pub const _LITTLE_ENDIAN: ::std::os::raw::c_uint = 1234;
pub const _BIG_ENDIAN: ::std::os::raw::c_uint = 4321;
pub const _PDP_ENDIAN: ::std::os::raw::c_uint = 3412;
pub const _BYTE_ORDER: ::std::os::raw::c_uint = 1234;
pub const LITTLE_ENDIAN: ::std::os::raw::c_uint = 1234;
pub const BIG_ENDIAN: ::std::os::raw::c_uint = 4321;
pub const PDP_ENDIAN: ::std::os::raw::c_uint = 3412;
pub const BYTE_ORDER: ::std::os::raw::c_uint = 1234;
pub const _SIG_WORDS: ::std::os::raw::c_uint = 4;
pub const _SIG_MAXSIG: ::std::os::raw::c_uint = 128;
pub const FD_SETSIZE: ::std::os::raw::c_uint = 1024;
pub const SOCK_STREAM: ::std::os::raw::c_uint = 1;
pub const SOCK_DGRAM: ::std::os::raw::c_uint = 2;
pub const SOCK_RAW: ::std::os::raw::c_uint = 3;
pub const SOCK_RDM: ::std::os::raw::c_uint = 4;
pub const SOCK_SEQPACKET: ::std::os::raw::c_uint = 5;
pub const SOCK_CLOEXEC: ::std::os::raw::c_uint = 268435456;
pub const SOCK_NONBLOCK: ::std::os::raw::c_uint = 536870912;
pub const SO_DEBUG: ::std::os::raw::c_uint = 1;
pub const SO_ACCEPTCONN: ::std::os::raw::c_uint = 2;
pub const SO_REUSEADDR: ::std::os::raw::c_uint = 4;
pub const SO_KEEPALIVE: ::std::os::raw::c_uint = 8;
pub const SO_DONTROUTE: ::std::os::raw::c_uint = 16;
pub const SO_BROADCAST: ::std::os::raw::c_uint = 32;
pub const SO_USELOOPBACK: ::std::os::raw::c_uint = 64;
pub const SO_LINGER: ::std::os::raw::c_uint = 128;
pub const SO_OOBINLINE: ::std::os::raw::c_uint = 256;
pub const SO_REUSEPORT: ::std::os::raw::c_uint = 512;
pub const SO_TIMESTAMP: ::std::os::raw::c_uint = 1024;
pub const SO_NOSIGPIPE: ::std::os::raw::c_uint = 2048;
pub const SO_ACCEPTFILTER: ::std::os::raw::c_uint = 4096;
pub const SO_BINTIME: ::std::os::raw::c_uint = 8192;
pub const SO_NO_OFFLOAD: ::std::os::raw::c_uint = 16384;
pub const SO_NO_DDP: ::std::os::raw::c_uint = 32768;
pub const SO_SNDBUF: ::std::os::raw::c_uint = 4097;
pub const SO_RCVBUF: ::std::os::raw::c_uint = 4098;
pub const SO_SNDLOWAT: ::std::os::raw::c_uint = 4099;
pub const SO_RCVLOWAT: ::std::os::raw::c_uint = 4100;
pub const SO_SNDTIMEO: ::std::os::raw::c_uint = 4101;
pub const SO_RCVTIMEO: ::std::os::raw::c_uint = 4102;
pub const SO_ERROR: ::std::os::raw::c_uint = 4103;
pub const SO_TYPE: ::std::os::raw::c_uint = 4104;
pub const SO_LABEL: ::std::os::raw::c_uint = 4105;
pub const SO_PEERLABEL: ::std::os::raw::c_uint = 4112;
pub const SO_LISTENQLIMIT: ::std::os::raw::c_uint = 4113;
pub const SO_LISTENQLEN: ::std::os::raw::c_uint = 4114;
pub const SO_LISTENINCQLEN: ::std::os::raw::c_uint = 4115;
pub const SO_SETFIB: ::std::os::raw::c_uint = 4116;
pub const SO_USER_COOKIE: ::std::os::raw::c_uint = 4117;
pub const SO_PROTOCOL: ::std::os::raw::c_uint = 4118;
pub const SO_PROTOTYPE: ::std::os::raw::c_uint = 4118;
pub const SO_VENDOR: ::std::os::raw::c_uint = 2147483648;
pub const SOL_SOCKET: ::std::os::raw::c_uint = 65535;
pub const AF_UNSPEC: ::std::os::raw::c_uint = 0;
pub const AF_UNIX: ::std::os::raw::c_uint = 1;
pub const AF_INET: ::std::os::raw::c_uint = 2;
pub const AF_IMPLINK: ::std::os::raw::c_uint = 3;
pub const AF_PUP: ::std::os::raw::c_uint = 4;
pub const AF_CHAOS: ::std::os::raw::c_uint = 5;
pub const AF_NETBIOS: ::std::os::raw::c_uint = 6;
pub const AF_ISO: ::std::os::raw::c_uint = 7;
pub const AF_OSI: ::std::os::raw::c_uint = 7;
pub const AF_ECMA: ::std::os::raw::c_uint = 8;
pub const AF_DATAKIT: ::std::os::raw::c_uint = 9;
pub const AF_CCITT: ::std::os::raw::c_uint = 10;
pub const AF_SNA: ::std::os::raw::c_uint = 11;
pub const AF_DECnet: ::std::os::raw::c_uint = 12;
pub const AF_DLI: ::std::os::raw::c_uint = 13;
pub const AF_LAT: ::std::os::raw::c_uint = 14;
pub const AF_HYLINK: ::std::os::raw::c_uint = 15;
pub const AF_APPLETALK: ::std::os::raw::c_uint = 16;
pub const AF_ROUTE: ::std::os::raw::c_uint = 17;
pub const AF_LINK: ::std::os::raw::c_uint = 18;
pub const pseudo_AF_XTP: ::std::os::raw::c_uint = 19;
pub const AF_COIP: ::std::os::raw::c_uint = 20;
pub const AF_CNT: ::std::os::raw::c_uint = 21;
pub const pseudo_AF_RTIP: ::std::os::raw::c_uint = 22;
pub const AF_IPX: ::std::os::raw::c_uint = 23;
pub const AF_SIP: ::std::os::raw::c_uint = 24;
pub const pseudo_AF_PIP: ::std::os::raw::c_uint = 25;
pub const AF_ISDN: ::std::os::raw::c_uint = 26;
pub const AF_E164: ::std::os::raw::c_uint = 26;
pub const pseudo_AF_KEY: ::std::os::raw::c_uint = 27;
pub const AF_INET6: ::std::os::raw::c_uint = 28;
pub const AF_NATM: ::std::os::raw::c_uint = 29;
pub const AF_ATM: ::std::os::raw::c_uint = 30;
pub const pseudo_AF_HDRCMPLT: ::std::os::raw::c_uint = 31;
pub const AF_NETGRAPH: ::std::os::raw::c_uint = 32;
pub const AF_SLOW: ::std::os::raw::c_uint = 33;
pub const AF_SCLUSTER: ::std::os::raw::c_uint = 34;
pub const AF_ARP: ::std::os::raw::c_uint = 35;
pub const AF_BLUETOOTH: ::std::os::raw::c_uint = 36;
pub const AF_IEEE80211: ::std::os::raw::c_uint = 37;
pub const AF_INET_SDP: ::std::os::raw::c_uint = 40;
pub const AF_INET6_SDP: ::std::os::raw::c_uint = 42;
pub const AF_MAX: ::std::os::raw::c_uint = 42;
pub const AF_VENDOR00: ::std::os::raw::c_uint = 39;
pub const AF_VENDOR01: ::std::os::raw::c_uint = 41;
pub const AF_VENDOR02: ::std::os::raw::c_uint = 43;
pub const AF_VENDOR03: ::std::os::raw::c_uint = 45;
pub const AF_VENDOR04: ::std::os::raw::c_uint = 47;
pub const AF_VENDOR05: ::std::os::raw::c_uint = 49;
pub const AF_VENDOR06: ::std::os::raw::c_uint = 51;
pub const AF_VENDOR07: ::std::os::raw::c_uint = 53;
pub const AF_VENDOR08: ::std::os::raw::c_uint = 55;
pub const AF_VENDOR09: ::std::os::raw::c_uint = 57;
pub const AF_VENDOR10: ::std::os::raw::c_uint = 59;
pub const AF_VENDOR11: ::std::os::raw::c_uint = 61;
pub const AF_VENDOR12: ::std::os::raw::c_uint = 63;
pub const AF_VENDOR13: ::std::os::raw::c_uint = 65;
pub const AF_VENDOR14: ::std::os::raw::c_uint = 67;
pub const AF_VENDOR15: ::std::os::raw::c_uint = 69;
pub const AF_VENDOR16: ::std::os::raw::c_uint = 71;
pub const AF_VENDOR17: ::std::os::raw::c_uint = 73;
pub const AF_VENDOR18: ::std::os::raw::c_uint = 75;
pub const AF_VENDOR19: ::std::os::raw::c_uint = 77;
pub const AF_VENDOR20: ::std::os::raw::c_uint = 79;
pub const AF_VENDOR21: ::std::os::raw::c_uint = 81;
pub const AF_VENDOR22: ::std::os::raw::c_uint = 83;
pub const AF_VENDOR23: ::std::os::raw::c_uint = 85;
pub const AF_VENDOR24: ::std::os::raw::c_uint = 87;
pub const AF_VENDOR25: ::std::os::raw::c_uint = 89;
pub const AF_VENDOR26: ::std::os::raw::c_uint = 91;
pub const AF_VENDOR27: ::std::os::raw::c_uint = 93;
pub const AF_VENDOR28: ::std::os::raw::c_uint = 95;
pub const AF_VENDOR29: ::std::os::raw::c_uint = 97;
pub const AF_VENDOR30: ::std::os::raw::c_uint = 99;
pub const AF_VENDOR31: ::std::os::raw::c_uint = 101;
pub const AF_VENDOR32: ::std::os::raw::c_uint = 103;
pub const AF_VENDOR33: ::std::os::raw::c_uint = 105;
pub const AF_VENDOR34: ::std::os::raw::c_uint = 107;
pub const AF_VENDOR35: ::std::os::raw::c_uint = 109;
pub const AF_VENDOR36: ::std::os::raw::c_uint = 111;
pub const AF_VENDOR37: ::std::os::raw::c_uint = 113;
pub const AF_VENDOR38: ::std::os::raw::c_uint = 115;
pub const AF_VENDOR39: ::std::os::raw::c_uint = 117;
pub const AF_VENDOR40: ::std::os::raw::c_uint = 119;
pub const AF_VENDOR41: ::std::os::raw::c_uint = 121;
pub const AF_VENDOR42: ::std::os::raw::c_uint = 123;
pub const AF_VENDOR43: ::std::os::raw::c_uint = 125;
pub const AF_VENDOR44: ::std::os::raw::c_uint = 127;
pub const AF_VENDOR45: ::std::os::raw::c_uint = 129;
pub const AF_VENDOR46: ::std::os::raw::c_uint = 131;
pub const AF_VENDOR47: ::std::os::raw::c_uint = 133;
pub const SOCK_MAXADDRLEN: ::std::os::raw::c_uint = 255;
pub const _SS_MAXSIZE: ::std::os::raw::c_uint = 128;
pub const PF_UNSPEC: ::std::os::raw::c_uint = 0;
pub const PF_INET: ::std::os::raw::c_uint = 2;
pub const PF_IMPLINK: ::std::os::raw::c_uint = 3;
pub const PF_PUP: ::std::os::raw::c_uint = 4;
pub const PF_CHAOS: ::std::os::raw::c_uint = 5;
pub const PF_NETBIOS: ::std::os::raw::c_uint = 6;
pub const PF_ISO: ::std::os::raw::c_uint = 7;
pub const PF_OSI: ::std::os::raw::c_uint = 7;
pub const PF_ECMA: ::std::os::raw::c_uint = 8;
pub const PF_DATAKIT: ::std::os::raw::c_uint = 9;
pub const PF_CCITT: ::std::os::raw::c_uint = 10;
pub const PF_SNA: ::std::os::raw::c_uint = 11;
pub const PF_DECnet: ::std::os::raw::c_uint = 12;
pub const PF_DLI: ::std::os::raw::c_uint = 13;
pub const PF_LAT: ::std::os::raw::c_uint = 14;
pub const PF_HYLINK: ::std::os::raw::c_uint = 15;
pub const PF_APPLETALK: ::std::os::raw::c_uint = 16;
pub const PF_ROUTE: ::std::os::raw::c_uint = 17;
pub const PF_LINK: ::std::os::raw::c_uint = 18;
pub const PF_XTP: ::std::os::raw::c_uint = 19;
pub const PF_COIP: ::std::os::raw::c_uint = 20;
pub const PF_CNT: ::std::os::raw::c_uint = 21;
pub const PF_SIP: ::std::os::raw::c_uint = 24;
pub const PF_IPX: ::std::os::raw::c_uint = 23;
pub const PF_RTIP: ::std::os::raw::c_uint = 22;
pub const PF_PIP: ::std::os::raw::c_uint = 25;
pub const PF_ISDN: ::std::os::raw::c_uint = 26;
pub const PF_KEY: ::std::os::raw::c_uint = 27;
pub const PF_INET6: ::std::os::raw::c_uint = 28;
pub const PF_NATM: ::std::os::raw::c_uint = 29;
pub const PF_ATM: ::std::os::raw::c_uint = 30;
pub const PF_NETGRAPH: ::std::os::raw::c_uint = 32;
pub const PF_SLOW: ::std::os::raw::c_uint = 33;
pub const PF_SCLUSTER: ::std::os::raw::c_uint = 34;
pub const PF_ARP: ::std::os::raw::c_uint = 35;
pub const PF_BLUETOOTH: ::std::os::raw::c_uint = 36;
pub const PF_IEEE80211: ::std::os::raw::c_uint = 37;
pub const PF_INET_SDP: ::std::os::raw::c_uint = 40;
pub const PF_INET6_SDP: ::std::os::raw::c_uint = 42;
pub const PF_MAX: ::std::os::raw::c_uint = 42;
pub const NET_MAXID: ::std::os::raw::c_uint = 42;
pub const NET_RT_DUMP: ::std::os::raw::c_uint = 1;
pub const NET_RT_FLAGS: ::std::os::raw::c_uint = 2;
pub const NET_RT_IFLIST: ::std::os::raw::c_uint = 3;
pub const NET_RT_IFMALIST: ::std::os::raw::c_uint = 4;
pub const NET_RT_IFLISTL: ::std::os::raw::c_uint = 5;
pub const NET_RT_MAXID: ::std::os::raw::c_uint = 6;
pub const SOMAXCONN: ::std::os::raw::c_uint = 128;
pub const MSG_OOB: ::std::os::raw::c_uint = 1;
pub const MSG_PEEK: ::std::os::raw::c_uint = 2;
pub const MSG_DONTROUTE: ::std::os::raw::c_uint = 4;
pub const MSG_EOR: ::std::os::raw::c_uint = 8;
pub const MSG_TRUNC: ::std::os::raw::c_uint = 16;
pub const MSG_CTRUNC: ::std::os::raw::c_uint = 32;
pub const MSG_WAITALL: ::std::os::raw::c_uint = 64;
pub const MSG_NOSIGNAL: ::std::os::raw::c_uint = 131072;
pub const MSG_DONTWAIT: ::std::os::raw::c_uint = 128;
pub const MSG_EOF: ::std::os::raw::c_uint = 256;
pub const MSG_NOTIFICATION: ::std::os::raw::c_uint = 8192;
pub const MSG_NBIO: ::std::os::raw::c_uint = 16384;
pub const MSG_COMPAT: ::std::os::raw::c_uint = 32768;
pub const MSG_CMSG_CLOEXEC: ::std::os::raw::c_uint = 262144;
pub const CMGROUP_MAX: ::std::os::raw::c_uint = 16;
pub const SCM_RIGHTS: ::std::os::raw::c_uint = 1;
pub const SCM_TIMESTAMP: ::std::os::raw::c_uint = 2;
pub const SCM_CREDS: ::std::os::raw::c_uint = 3;
pub const SCM_BINTIME: ::std::os::raw::c_uint = 4;
pub const SHUT_RD: ::std::os::raw::c_uint = 0;
pub const SHUT_WR: ::std::os::raw::c_uint = 1;
pub const SHUT_RDWR: ::std::os::raw::c_uint = 2;
pub const PRU_FLUSH_RD: ::std::os::raw::c_uint = 0;
pub const PRU_FLUSH_WR: ::std::os::raw::c_uint = 1;
pub const PRU_FLUSH_RDWR: ::std::os::raw::c_uint = 2;
pub const SF_NODISKIO: ::std::os::raw::c_uint = 1;
pub const SF_MNOWAIT: ::std::os::raw::c_uint = 2;
pub const SF_SYNC: ::std::os::raw::c_uint = 4;
pub const LIBRDKAFKA_TYPECHECKS: ::std::os::raw::c_uint = 1;
pub const RD_KAFKA_VERSION: ::std::os::raw::c_uint = 722687;
pub const RD_KAFKA_DEBUG_CONTEXTS: &'static [u8; 115usize] =
    b"all,generic,broker,topic,metadata,feature,queue,msg,protocol,cgrp,security,fetch,interceptor,plugin,consumer,admin\x00";
pub const RD_KAFKA_DESTROY_F_NO_CONSUMER_CLOSE: ::std::os::raw::c_uint = 8;
pub const RD_KAFKA_OFFSET_BEGINNING: ::std::os::raw::c_int = -2;
pub const RD_KAFKA_OFFSET_END: ::std::os::raw::c_int = -1;
pub const RD_KAFKA_OFFSET_STORED: ::std::os::raw::c_int = -1000;
pub const RD_KAFKA_OFFSET_INVALID: ::std::os::raw::c_int = -1001;
pub const RD_KAFKA_OFFSET_TAIL_BASE: ::std::os::raw::c_int = -2000;
pub const RD_KAFKA_MSG_F_FREE: ::std::os::raw::c_uint = 1;
pub const RD_KAFKA_MSG_F_COPY: ::std::os::raw::c_uint = 2;
pub const RD_KAFKA_MSG_F_BLOCK: ::std::os::raw::c_uint = 4;
pub const RD_KAFKA_MSG_F_PARTITION: ::std::os::raw::c_uint = 8;
pub const RD_KAFKA_EVENT_NONE: ::std::os::raw::c_uint = 0;
pub const RD_KAFKA_EVENT_DR: ::std::os::raw::c_uint = 1;
pub const RD_KAFKA_EVENT_FETCH: ::std::os::raw::c_uint = 2;
pub const RD_KAFKA_EVENT_LOG: ::std::os::raw::c_uint = 4;
pub const RD_KAFKA_EVENT_ERROR: ::std::os::raw::c_uint = 8;
pub const RD_KAFKA_EVENT_REBALANCE: ::std::os::raw::c_uint = 16;
pub const RD_KAFKA_EVENT_OFFSET_COMMIT: ::std::os::raw::c_uint = 32;
pub const RD_KAFKA_EVENT_STATS: ::std::os::raw::c_uint = 64;
pub const RD_KAFKA_EVENT_CREATETOPICS_RESULT: ::std::os::raw::c_uint = 100;
pub const RD_KAFKA_EVENT_DELETETOPICS_RESULT: ::std::os::raw::c_uint = 101;
pub const RD_KAFKA_EVENT_CREATEPARTITIONS_RESULT: ::std::os::raw::c_uint =
    102;
pub const RD_KAFKA_EVENT_ALTERCONFIGS_RESULT: ::std::os::raw::c_uint = 103;
pub const RD_KAFKA_EVENT_DESCRIBECONFIGS_RESULT: ::std::os::raw::c_uint = 104;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __clock_t = __int32_t;
pub type __critical_t = __int64_t;
pub type __double_t = f64;
pub type __float_t = f32;
pub type __intfptr_t = __int64_t;
pub type __intptr_t = __int64_t;
pub type __intmax_t = __int64_t;
pub type __int_fast8_t = __int32_t;
pub type __int_fast16_t = __int32_t;
pub type __int_fast32_t = __int32_t;
pub type __int_fast64_t = __int64_t;
pub type __int_least8_t = __int8_t;
pub type __int_least16_t = __int16_t;
pub type __int_least32_t = __int32_t;
pub type __int_least64_t = __int64_t;
pub type __ptrdiff_t = __int64_t;
pub type __register_t = __int64_t;
pub type __segsz_t = __int64_t;
pub type __size_t = __uint64_t;
pub type __ssize_t = __int64_t;
pub type __time_t = __int64_t;
pub type __uintfptr_t = __uint64_t;
pub type __uintptr_t = __uint64_t;
pub type __uintmax_t = __uint64_t;
pub type __uint_fast8_t = __uint32_t;
pub type __uint_fast16_t = __uint32_t;
pub type __uint_fast32_t = __uint32_t;
pub type __uint_fast64_t = __uint64_t;
pub type __uint_least8_t = __uint8_t;
pub type __uint_least16_t = __uint16_t;
pub type __uint_least32_t = __uint32_t;
pub type __uint_least64_t = __uint64_t;
pub type __u_register_t = __uint64_t;
pub type __vm_offset_t = __uint64_t;
pub type __vm_paddr_t = __uint64_t;
pub type __vm_size_t = __uint64_t;
pub type __vm_ooffset_t = __int64_t;
pub type __vm_pindex_t = __uint64_t;
pub type ___wchar_t = ::std::os::raw::c_int;
pub type __va_list = __builtin_va_list;
pub type __gnuc_va_list = __va_list;
pub type __blksize_t = __uint32_t;
pub type __blkcnt_t = __int64_t;
pub type __clockid_t = __int32_t;
pub type __fflags_t = __uint32_t;
pub type __fsblkcnt_t = __uint64_t;
pub type __fsfilcnt_t = __uint64_t;
pub type __gid_t = __uint32_t;
pub type __id_t = __int64_t;
pub type __ino_t = __uint32_t;
pub type __key_t = ::std::os::raw::c_long;
pub type __lwpid_t = __int32_t;
pub type __mode_t = __uint16_t;
pub type __accmode_t = ::std::os::raw::c_int;
pub type __nl_item = ::std::os::raw::c_int;
pub type __nlink_t = __uint16_t;
pub type __off_t = __int64_t;
pub type __pid_t = __int32_t;
pub type __rlim_t = __int64_t;
pub type __sa_family_t = __uint8_t;
pub type __socklen_t = __uint32_t;
pub type __suseconds_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __timer {
    _unused: [u8; 0],
}
pub type __timer_t = *mut __timer;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __mq {
    _unused: [u8; 0],
}
pub type __mqd_t = *mut __mq;
pub type __uid_t = __uint32_t;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __cpuwhich_t = ::std::os::raw::c_int;
pub type __cpulevel_t = ::std::os::raw::c_int;
pub type __cpusetid_t = ::std::os::raw::c_int;
pub type __ct_rune_t = ::std::os::raw::c_int;
pub type __rune_t = __ct_rune_t;
pub type __wint_t = __ct_rune_t;
pub type __char16_t = __uint_least16_t;
pub type __char32_t = __uint_least32_t;
pub type __dev_t = __uint32_t;
pub type __fixpt_t = __uint32_t;
#[repr(C)]
#[derive(Copy)]
pub union __mbstate_t {
    pub __mbstate8: [::std::os::raw::c_char; 128usize],
    pub _mbstateL: __int64_t,
    _bindgen_union_align: [u64; 16usize],
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    assert_eq!(::std::mem::size_of::<__mbstate_t>() , 128usize , concat ! (
               "Size of: " , stringify ! ( __mbstate_t ) ));
    assert_eq! (::std::mem::align_of::<__mbstate_t>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( __mbstate_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __mbstate_t ) ) . __mbstate8 as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( __mbstate_t ) , "::" ,
                stringify ! ( __mbstate8 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __mbstate_t ) ) . _mbstateL as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( __mbstate_t ) , "::" ,
                stringify ! ( _mbstateL ) ));
}
impl Clone for __mbstate_t {
    fn clone(&self) -> Self { *self }
}
pub type fpos_t = __off_t;
pub type off_t = __off_t;
pub type va_list = __va_list;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __sbuf {
    pub _base: *mut ::std::os::raw::c_uchar,
    pub _size: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___sbuf() {
    assert_eq!(::std::mem::size_of::<__sbuf>() , 16usize , concat ! (
               "Size of: " , stringify ! ( __sbuf ) ));
    assert_eq! (::std::mem::align_of::<__sbuf>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( __sbuf ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __sbuf ) ) . _base as * const _ as usize
                } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( __sbuf ) , "::" ,
                stringify ! ( _base ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __sbuf ) ) . _size as * const _ as usize
                } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( __sbuf ) , "::" ,
                stringify ! ( _size ) ));
}
impl Clone for __sbuf {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __sFILE {
    pub _p: *mut ::std::os::raw::c_uchar,
    pub _r: ::std::os::raw::c_int,
    pub _w: ::std::os::raw::c_int,
    pub _flags: ::std::os::raw::c_short,
    pub _file: ::std::os::raw::c_short,
    pub _bf: __sbuf,
    pub _lbfsize: ::std::os::raw::c_int,
    pub _cookie: *mut ::std::os::raw::c_void,
    pub _close: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                               *mut ::std::os::raw::c_void)
                                          -> ::std::os::raw::c_int>,
    pub _read: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                              *mut ::std::os::raw::c_void,
                                                          arg2:
                                                              *mut ::std::os::raw::c_char,
                                                          arg3:
                                                              ::std::os::raw::c_int)
                                         -> ::std::os::raw::c_int>,
    pub _seek: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                              *mut ::std::os::raw::c_void,
                                                          arg2: fpos_t,
                                                          arg3:
                                                              ::std::os::raw::c_int)
                                         -> fpos_t>,
    pub _write: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                               *mut ::std::os::raw::c_void,
                                                           arg2:
                                                               *const ::std::os::raw::c_char,
                                                           arg3:
                                                               ::std::os::raw::c_int)
                                          -> ::std::os::raw::c_int>,
    pub _ub: __sbuf,
    pub _up: *mut ::std::os::raw::c_uchar,
    pub _ur: ::std::os::raw::c_int,
    pub _ubuf: [::std::os::raw::c_uchar; 3usize],
    pub _nbuf: [::std::os::raw::c_uchar; 1usize],
    pub _lb: __sbuf,
    pub _blksize: ::std::os::raw::c_int,
    pub _offset: fpos_t,
    pub _fl_mutex: *mut pthread_mutex,
    pub _fl_owner: *mut pthread,
    pub _fl_count: ::std::os::raw::c_int,
    pub _orientation: ::std::os::raw::c_int,
    pub _mbstate: __mbstate_t,
    pub _flags2: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___sFILE() {
    assert_eq!(::std::mem::size_of::<__sFILE>() , 312usize , concat ! (
               "Size of: " , stringify ! ( __sFILE ) ));
    assert_eq! (::std::mem::align_of::<__sFILE>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( __sFILE ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __sFILE ) ) . _p as * const _ as usize }
                , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( __sFILE ) , "::" ,
                stringify ! ( _p ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __sFILE ) ) . _r as * const _ as usize }
                , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( __sFILE ) , "::" ,
                stringify ! ( _r ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __sFILE ) ) . _w as * const _ as usize }
                , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( __sFILE ) , "::" ,
                stringify ! ( _w ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __sFILE ) ) . _flags as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( __sFILE ) , "::" ,
                stringify ! ( _flags ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __sFILE ) ) . _file as * const _ as usize
                } , 18usize , concat ! (
                "Alignment of field: " , stringify ! ( __sFILE ) , "::" ,
                stringify ! ( _file ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __sFILE ) ) . _bf as * const _ as usize }
                , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( __sFILE ) , "::" ,
                stringify ! ( _bf ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __sFILE ) ) . _lbfsize as * const _ as
                usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( __sFILE ) , "::" ,
                stringify ! ( _lbfsize ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __sFILE ) ) . _cookie as * const _ as
                usize } , 48usize , concat ! (
                "Alignment of field: " , stringify ! ( __sFILE ) , "::" ,
                stringify ! ( _cookie ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __sFILE ) ) . _close as * const _ as
                usize } , 56usize , concat ! (
                "Alignment of field: " , stringify ! ( __sFILE ) , "::" ,
                stringify ! ( _close ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __sFILE ) ) . _read as * const _ as usize
                } , 64usize , concat ! (
                "Alignment of field: " , stringify ! ( __sFILE ) , "::" ,
                stringify ! ( _read ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __sFILE ) ) . _seek as * const _ as usize
                } , 72usize , concat ! (
                "Alignment of field: " , stringify ! ( __sFILE ) , "::" ,
                stringify ! ( _seek ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __sFILE ) ) . _write as * const _ as
                usize } , 80usize , concat ! (
                "Alignment of field: " , stringify ! ( __sFILE ) , "::" ,
                stringify ! ( _write ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __sFILE ) ) . _ub as * const _ as usize }
                , 88usize , concat ! (
                "Alignment of field: " , stringify ! ( __sFILE ) , "::" ,
                stringify ! ( _ub ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __sFILE ) ) . _up as * const _ as usize }
                , 104usize , concat ! (
                "Alignment of field: " , stringify ! ( __sFILE ) , "::" ,
                stringify ! ( _up ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __sFILE ) ) . _ur as * const _ as usize }
                , 112usize , concat ! (
                "Alignment of field: " , stringify ! ( __sFILE ) , "::" ,
                stringify ! ( _ur ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __sFILE ) ) . _ubuf as * const _ as usize
                } , 116usize , concat ! (
                "Alignment of field: " , stringify ! ( __sFILE ) , "::" ,
                stringify ! ( _ubuf ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __sFILE ) ) . _nbuf as * const _ as usize
                } , 119usize , concat ! (
                "Alignment of field: " , stringify ! ( __sFILE ) , "::" ,
                stringify ! ( _nbuf ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __sFILE ) ) . _lb as * const _ as usize }
                , 120usize , concat ! (
                "Alignment of field: " , stringify ! ( __sFILE ) , "::" ,
                stringify ! ( _lb ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __sFILE ) ) . _blksize as * const _ as
                usize } , 136usize , concat ! (
                "Alignment of field: " , stringify ! ( __sFILE ) , "::" ,
                stringify ! ( _blksize ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __sFILE ) ) . _offset as * const _ as
                usize } , 144usize , concat ! (
                "Alignment of field: " , stringify ! ( __sFILE ) , "::" ,
                stringify ! ( _offset ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __sFILE ) ) . _fl_mutex as * const _ as
                usize } , 152usize , concat ! (
                "Alignment of field: " , stringify ! ( __sFILE ) , "::" ,
                stringify ! ( _fl_mutex ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __sFILE ) ) . _fl_owner as * const _ as
                usize } , 160usize , concat ! (
                "Alignment of field: " , stringify ! ( __sFILE ) , "::" ,
                stringify ! ( _fl_owner ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __sFILE ) ) . _fl_count as * const _ as
                usize } , 168usize , concat ! (
                "Alignment of field: " , stringify ! ( __sFILE ) , "::" ,
                stringify ! ( _fl_count ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __sFILE ) ) . _orientation as * const _
                as usize } , 172usize , concat ! (
                "Alignment of field: " , stringify ! ( __sFILE ) , "::" ,
                stringify ! ( _orientation ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __sFILE ) ) . _mbstate as * const _ as
                usize } , 176usize , concat ! (
                "Alignment of field: " , stringify ! ( __sFILE ) , "::" ,
                stringify ! ( _mbstate ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __sFILE ) ) . _flags2 as * const _ as
                usize } , 304usize , concat ! (
                "Alignment of field: " , stringify ! ( __sFILE ) , "::" ,
                stringify ! ( _flags2 ) ));
}
impl Clone for __sFILE {
    fn clone(&self) -> Self { *self }
}
pub type FILE = __sFILE;
extern "C" {
    #[link_name = "__stdinp"]
    pub static mut __stdinp: *mut FILE;
}
extern "C" {
    #[link_name = "__stdoutp"]
    pub static mut __stdoutp: *mut FILE;
}
extern "C" {
    #[link_name = "__stderrp"]
    pub static mut __stderrp: *mut FILE;
}
extern "C" {
    pub fn clearerr(arg1: *mut FILE);
}
extern "C" {
    pub fn fclose(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn feof(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetpos(arg1: *mut FILE, arg2: *mut fpos_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(arg1: *mut ::std::os::raw::c_char,
                 arg2: ::std::os::raw::c_int, arg3: *mut FILE)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fopen(arg1: *const ::std::os::raw::c_char,
                 arg2: *const ::std::os::raw::c_char) -> *mut FILE;
}
extern "C" {
    pub fn fprintf(arg1: *mut FILE, arg2: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc(arg1: ::std::os::raw::c_int, arg2: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputs(arg1: *const ::std::os::raw::c_char, arg2: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(arg1: *mut ::std::os::raw::c_void, arg2: usize, arg3: usize,
                 arg4: *mut FILE) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn freopen(arg1: *const ::std::os::raw::c_char,
                   arg2: *const ::std::os::raw::c_char, arg3: *mut FILE)
     -> *mut FILE;
}
extern "C" {
    pub fn fscanf(arg1: *mut FILE, arg2: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fseek(arg1: *mut FILE, arg2: ::std::os::raw::c_long,
                 arg3: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos(arg1: *mut FILE, arg2: *const fpos_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(arg1: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn fwrite(arg1: *const ::std::os::raw::c_void, arg2: usize,
                  arg3: usize, arg4: *mut FILE) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn getc(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gets(arg1: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn perror(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn printf(arg1: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc(arg1: ::std::os::raw::c_int, arg2: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn remove(arg1: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(arg1: *const ::std::os::raw::c_char,
                  arg2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rewind(arg1: *mut FILE);
}
extern "C" {
    pub fn scanf(arg1: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuf(arg1: *mut FILE, arg2: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn setvbuf(arg1: *mut FILE, arg2: *mut ::std::os::raw::c_char,
                   arg3: ::std::os::raw::c_int, arg4: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf(arg1: *mut ::std::os::raw::c_char,
                   arg2: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf(arg1: *const ::std::os::raw::c_char,
                  arg2: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(arg1: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ungetc(arg1: ::std::os::raw::c_int, arg2: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf(arg1: *mut FILE, arg2: *const ::std::os::raw::c_char,
                    arg3: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf(arg1: *const ::std::os::raw::c_char,
                   arg2: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf(arg1: *mut ::std::os::raw::c_char,
                    arg2: *const ::std::os::raw::c_char,
                    arg3: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snprintf(arg1: *mut ::std::os::raw::c_char, arg2: usize,
                    arg3: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf(arg1: *mut FILE, arg2: *const ::std::os::raw::c_char,
                   arg3: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf(arg1: *const ::std::os::raw::c_char,
                  arg2: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf(arg1: *mut ::std::os::raw::c_char, arg2: usize,
                     arg3: *const ::std::os::raw::c_char,
                     arg4: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf(arg1: *const ::std::os::raw::c_char,
                   arg2: *const ::std::os::raw::c_char,
                   arg3: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctermid(arg1: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fdopen(arg1: ::std::os::raw::c_int,
                  arg2: *const ::std::os::raw::c_char) -> *mut FILE;
}
extern "C" {
    pub fn fileno(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pclose(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn popen(arg1: *const ::std::os::raw::c_char,
                 arg2: *const ::std::os::raw::c_char) -> *mut FILE;
}
extern "C" {
    pub fn ftrylockfile(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flockfile(arg1: *mut FILE);
}
extern "C" {
    pub fn funlockfile(arg1: *mut FILE);
}
extern "C" {
    pub fn getc_unlocked(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc_unlocked(arg1: ::std::os::raw::c_int, arg2: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar_unlocked(arg1: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr_unlocked(arg1: *mut FILE);
}
extern "C" {
    pub fn feof_unlocked(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror_unlocked(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fileno_unlocked(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fseeko(arg1: *mut FILE, arg2: __off_t, arg3: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello(arg1: *mut FILE) -> __off_t;
}
extern "C" {
    pub fn getw(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(arg1: ::std::os::raw::c_int, arg2: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tempnam(arg1: *const ::std::os::raw::c_char,
                   arg2: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fmemopen(arg1: *mut ::std::os::raw::c_void, arg2: usize,
                    arg3: *const ::std::os::raw::c_char) -> *mut FILE;
}
extern "C" {
    pub fn getdelim(arg1: *mut *mut ::std::os::raw::c_char, arg2: *mut usize,
                    arg3: ::std::os::raw::c_int, arg4: *mut FILE) -> isize;
}
extern "C" {
    pub fn open_memstream(arg1: *mut *mut ::std::os::raw::c_char,
                          arg2: *mut usize) -> *mut FILE;
}
extern "C" {
    pub fn renameat(arg1: ::std::os::raw::c_int,
                    arg2: *const ::std::os::raw::c_char,
                    arg3: ::std::os::raw::c_int,
                    arg4: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf(arg1: ::std::os::raw::c_int,
                    arg2: *const ::std::os::raw::c_char,
                    arg3: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asprintf(arg1: *mut *mut ::std::os::raw::c_char,
                    arg2: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctermid_r(arg1: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fcloseall();
}
extern "C" {
    pub fn fdclose(arg1: *mut FILE, arg2: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetln(arg1: *mut FILE, arg2: *mut usize)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fmtcheck(arg1: *const ::std::os::raw::c_char,
                    arg2: *const ::std::os::raw::c_char)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn fpurge(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuffer(arg1: *mut FILE, arg2: *mut ::std::os::raw::c_char,
                     arg3: ::std::os::raw::c_int);
}
extern "C" {
    pub fn setlinebuf(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vasprintf(arg1: *mut *mut ::std::os::raw::c_char,
                     arg2: *const ::std::os::raw::c_char,
                     arg3: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "sys_nerr"]
    pub static sys_nerr: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "sys_errlist"]
    pub static mut sys_errlist: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn funopen(arg1: *const ::std::os::raw::c_void,
                   arg2:
                       ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                      *mut ::std::os::raw::c_void,
                                                                  arg2:
                                                                      *mut ::std::os::raw::c_char,
                                                                  arg3:
                                                                      ::std::os::raw::c_int)
                                                 -> ::std::os::raw::c_int>,
                   arg3:
                       ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                      *mut ::std::os::raw::c_void,
                                                                  arg2:
                                                                      *const ::std::os::raw::c_char,
                                                                  arg3:
                                                                      ::std::os::raw::c_int)
                                                 -> ::std::os::raw::c_int>,
                   arg4:
                       ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                      *mut ::std::os::raw::c_void,
                                                                  arg2:
                                                                      fpos_t,
                                                                  arg3:
                                                                      ::std::os::raw::c_int)
                                                 -> fpos_t>,
                   arg5:
                       ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                      *mut ::std::os::raw::c_void)
                                                 -> ::std::os::raw::c_int>)
     -> *mut FILE;
}
extern "C" {
    pub fn ftruncate(arg1: ::std::os::raw::c_int, arg2: __off_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lseek(arg1: ::std::os::raw::c_int, arg2: __off_t,
                 arg3: ::std::os::raw::c_int) -> __off_t;
}
extern "C" {
    pub fn mmap(arg1: *mut ::std::os::raw::c_void, arg2: usize,
                arg3: ::std::os::raw::c_int, arg4: ::std::os::raw::c_int,
                arg5: ::std::os::raw::c_int, arg6: __off_t)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn truncate(arg1: *const ::std::os::raw::c_char, arg2: __off_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __srget(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __swbuf(arg1: ::std::os::raw::c_int, arg2: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "__isthreaded"]
    pub static mut __isthreaded: ::std::os::raw::c_int;
}
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = __int_fast8_t;
pub type int_fast16_t = __int_fast16_t;
pub type int_fast32_t = __int_fast32_t;
pub type int_fast64_t = __int_fast64_t;
pub type uint_fast8_t = __uint_fast8_t;
pub type uint_fast16_t = __uint_fast16_t;
pub type uint_fast32_t = __uint_fast32_t;
pub type uint_fast64_t = __uint_fast64_t;
pub type wchar_t = ___wchar_t;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct imaxdiv_t {
    pub quot: intmax_t,
    pub rem: intmax_t,
}
#[test]
fn bindgen_test_layout_imaxdiv_t() {
    assert_eq!(::std::mem::size_of::<imaxdiv_t>() , 16usize , concat ! (
               "Size of: " , stringify ! ( imaxdiv_t ) ));
    assert_eq! (::std::mem::align_of::<imaxdiv_t>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( imaxdiv_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const imaxdiv_t ) ) . quot as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( imaxdiv_t ) , "::" ,
                stringify ! ( quot ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const imaxdiv_t ) ) . rem as * const _ as usize
                } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( imaxdiv_t ) , "::" ,
                stringify ! ( rem ) ));
}
impl Clone for imaxdiv_t {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn imaxabs(arg1: intmax_t) -> intmax_t;
}
extern "C" {
    pub fn imaxdiv(arg1: intmax_t, arg2: intmax_t) -> imaxdiv_t;
}
extern "C" {
    pub fn strtoimax(arg1: *const ::std::os::raw::c_char,
                     arg2: *mut *mut ::std::os::raw::c_char,
                     arg3: ::std::os::raw::c_int) -> intmax_t;
}
extern "C" {
    pub fn strtoumax(arg1: *const ::std::os::raw::c_char,
                     arg2: *mut *mut ::std::os::raw::c_char,
                     arg3: ::std::os::raw::c_int) -> uintmax_t;
}
extern "C" {
    pub fn wcstoimax(arg1: *const wchar_t, arg2: *mut *mut wchar_t,
                     arg3: ::std::os::raw::c_int) -> intmax_t;
}
extern "C" {
    pub fn wcstoumax(arg1: *const wchar_t, arg2: *mut *mut wchar_t,
                     arg3: ::std::os::raw::c_int) -> uintmax_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_attr {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_cond {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_cond_attr {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_mutex {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_mutex_attr {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct pthread_once {
    pub state: ::std::os::raw::c_int,
    pub mutex: pthread_mutex_t,
}
#[test]
fn bindgen_test_layout_pthread_once() {
    assert_eq!(::std::mem::size_of::<pthread_once>() , 16usize , concat ! (
               "Size of: " , stringify ! ( pthread_once ) ));
    assert_eq! (::std::mem::align_of::<pthread_once>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( pthread_once ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_once ) ) . state as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_once ) , "::" ,
                stringify ! ( state ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_once ) ) . mutex as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_once ) , "::" ,
                stringify ! ( mutex ) ));
}
impl Clone for pthread_once {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_rwlock {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_rwlockattr {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_barrier {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_barrier_attr {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_spinlock {
    _unused: [u8; 0],
}
pub type pthread_t = *mut pthread;
pub type pthread_attr_t = *mut pthread_attr;
pub type pthread_mutex_t = *mut pthread_mutex;
pub type pthread_mutexattr_t = *mut pthread_mutex_attr;
pub type pthread_cond_t = *mut pthread_cond;
pub type pthread_condattr_t = *mut pthread_cond_attr;
pub type pthread_key_t = ::std::os::raw::c_int;
pub type pthread_once_t = pthread_once;
pub type pthread_rwlock_t = *mut pthread_rwlock;
pub type pthread_rwlockattr_t = *mut pthread_rwlockattr;
pub type pthread_barrier_t = *mut pthread_barrier;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_barrierattr {
    _unused: [u8; 0],
}
pub type pthread_barrierattr_t = *mut pthread_barrierattr;
pub type pthread_spinlock_t = *mut pthread_spinlock;
pub type pthread_addr_t = *mut ::std::os::raw::c_void;
pub type pthread_startroutine_t =
    ::std::option::Option<unsafe extern "C" fn(arg1:
                                                   *mut ::std::os::raw::c_void)
                              -> *mut ::std::os::raw::c_void>;
pub type u_char = ::std::os::raw::c_uchar;
pub type u_short = ::std::os::raw::c_ushort;
pub type u_int = ::std::os::raw::c_uint;
pub type u_long = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = __uint8_t;
pub type u_int16_t = __uint16_t;
pub type u_int32_t = __uint32_t;
pub type u_int64_t = __uint64_t;
pub type u_quad_t = __uint64_t;
pub type quad_t = __int64_t;
pub type qaddr_t = *mut quad_t;
pub type caddr_t = *mut ::std::os::raw::c_char;
pub type c_caddr_t = *const ::std::os::raw::c_char;
pub type blksize_t = __blksize_t;
pub type cpuwhich_t = __cpuwhich_t;
pub type cpulevel_t = __cpulevel_t;
pub type cpusetid_t = __cpusetid_t;
pub type blkcnt_t = __blkcnt_t;
pub type clock_t = __clock_t;
pub type clockid_t = __clockid_t;
pub type critical_t = __critical_t;
pub type daddr_t = __int64_t;
pub type dev_t = __dev_t;
pub type fflags_t = __fflags_t;
pub type fixpt_t = __fixpt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
pub type gid_t = __gid_t;
pub type in_addr_t = __uint32_t;
pub type in_port_t = __uint16_t;
pub type id_t = __id_t;
pub type ino_t = __ino_t;
pub type key_t = __key_t;
pub type lwpid_t = __lwpid_t;
pub type mode_t = __mode_t;
pub type accmode_t = __accmode_t;
pub type nlink_t = __nlink_t;
pub type pid_t = __pid_t;
pub type register_t = __register_t;
pub type rlim_t = __rlim_t;
pub type sbintime_t = __int64_t;
pub type segsz_t = __segsz_t;
pub type suseconds_t = __suseconds_t;
pub type time_t = __time_t;
pub type timer_t = __timer_t;
pub type mqd_t = __mqd_t;
pub type u_register_t = __u_register_t;
pub type uid_t = __uid_t;
pub type useconds_t = __useconds_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cap_rights {
    _unused: [u8; 0],
}
pub type cap_rights_t = cap_rights;
pub type vm_offset_t = __vm_offset_t;
pub type vm_ooffset_t = __vm_ooffset_t;
pub type vm_paddr_t = __vm_paddr_t;
pub type vm_pindex_t = __vm_pindex_t;
pub type vm_size_t = __vm_size_t;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __sigset {
    pub __bits: [__uint32_t; 4usize],
}
#[test]
fn bindgen_test_layout___sigset() {
    assert_eq!(::std::mem::size_of::<__sigset>() , 16usize , concat ! (
               "Size of: " , stringify ! ( __sigset ) ));
    assert_eq! (::std::mem::align_of::<__sigset>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( __sigset ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __sigset ) ) . __bits as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( __sigset ) , "::" ,
                stringify ! ( __bits ) ));
}
impl Clone for __sigset {
    fn clone(&self) -> Self { *self }
}
pub type __sigset_t = __sigset;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct timeval {
    pub tv_sec: time_t,
    pub tv_usec: suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    assert_eq!(::std::mem::size_of::<timeval>() , 16usize , concat ! (
               "Size of: " , stringify ! ( timeval ) ));
    assert_eq! (::std::mem::align_of::<timeval>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( timeval ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const timeval ) ) . tv_sec as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( timeval ) , "::" ,
                stringify ! ( tv_sec ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const timeval ) ) . tv_usec as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( timeval ) , "::" ,
                stringify ! ( tv_usec ) ));
}
impl Clone for timeval {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct timespec {
    pub tv_sec: time_t,
    pub tv_nsec: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_timespec() {
    assert_eq!(::std::mem::size_of::<timespec>() , 16usize , concat ! (
               "Size of: " , stringify ! ( timespec ) ));
    assert_eq! (::std::mem::align_of::<timespec>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( timespec ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const timespec ) ) . tv_sec as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( timespec ) , "::" ,
                stringify ! ( tv_sec ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const timespec ) ) . tv_nsec as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( timespec ) , "::" ,
                stringify ! ( tv_nsec ) ));
}
impl Clone for timespec {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct itimerspec {
    pub it_interval: timespec,
    pub it_value: timespec,
}
#[test]
fn bindgen_test_layout_itimerspec() {
    assert_eq!(::std::mem::size_of::<itimerspec>() , 32usize , concat ! (
               "Size of: " , stringify ! ( itimerspec ) ));
    assert_eq! (::std::mem::align_of::<itimerspec>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( itimerspec ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const itimerspec ) ) . it_interval as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( itimerspec ) , "::" ,
                stringify ! ( it_interval ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const itimerspec ) ) . it_value as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( itimerspec ) , "::" ,
                stringify ! ( it_value ) ));
}
impl Clone for itimerspec {
    fn clone(&self) -> Self { *self }
}
pub type __fd_mask = ::std::os::raw::c_ulong;
pub type fd_mask = __fd_mask;
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
#[test]
fn bindgen_test_layout_fd_set() {
    assert_eq!(::std::mem::size_of::<fd_set>() , 128usize , concat ! (
               "Size of: " , stringify ! ( fd_set ) ));
    assert_eq! (::std::mem::align_of::<fd_set>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( fd_set ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const fd_set ) ) . __fds_bits as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( fd_set ) , "::" ,
                stringify ! ( __fds_bits ) ));
}
impl Clone for fd_set {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn pselect(arg1: ::std::os::raw::c_int, arg2: *mut fd_set,
                   arg3: *mut fd_set, arg4: *mut fd_set,
                   arg5: *const timespec, arg6: *const sigset_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn select(arg1: ::std::os::raw::c_int, arg2: *mut fd_set,
                  arg3: *mut fd_set, arg4: *mut fd_set, arg5: *mut timeval)
     -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct iovec {
    pub iov_base: *mut ::std::os::raw::c_void,
    pub iov_len: usize,
}
#[test]
fn bindgen_test_layout_iovec() {
    assert_eq!(::std::mem::size_of::<iovec>() , 16usize , concat ! (
               "Size of: " , stringify ! ( iovec ) ));
    assert_eq! (::std::mem::align_of::<iovec>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( iovec ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const iovec ) ) . iov_base as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( iovec ) , "::" ,
                stringify ! ( iov_base ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const iovec ) ) . iov_len as * const _ as usize
                } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( iovec ) , "::" ,
                stringify ! ( iov_len ) ));
}
impl Clone for iovec {
    fn clone(&self) -> Self { *self }
}
pub type sa_family_t = __sa_family_t;
pub type socklen_t = __socklen_t;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct linger {
    pub l_onoff: ::std::os::raw::c_int,
    pub l_linger: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_linger() {
    assert_eq!(::std::mem::size_of::<linger>() , 8usize , concat ! (
               "Size of: " , stringify ! ( linger ) ));
    assert_eq! (::std::mem::align_of::<linger>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( linger ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const linger ) ) . l_onoff as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( linger ) , "::" ,
                stringify ! ( l_onoff ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const linger ) ) . l_linger as * const _ as
                usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( linger ) , "::" ,
                stringify ! ( l_linger ) ));
}
impl Clone for linger {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct accept_filter_arg {
    pub af_name: [::std::os::raw::c_char; 16usize],
    pub af_arg: [::std::os::raw::c_char; 240usize],
}
#[test]
fn bindgen_test_layout_accept_filter_arg() {
    assert_eq!(::std::mem::size_of::<accept_filter_arg>() , 256usize , concat
               ! ( "Size of: " , stringify ! ( accept_filter_arg ) ));
    assert_eq! (::std::mem::align_of::<accept_filter_arg>() , 1usize , concat
                ! ( "Alignment of " , stringify ! ( accept_filter_arg ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const accept_filter_arg ) ) . af_name as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( accept_filter_arg ) ,
                "::" , stringify ! ( af_name ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const accept_filter_arg ) ) . af_arg as * const
                _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( accept_filter_arg ) ,
                "::" , stringify ! ( af_arg ) ));
}
impl Clone for accept_filter_arg {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct sockaddr {
    pub sa_len: ::std::os::raw::c_uchar,
    pub sa_family: sa_family_t,
    pub sa_data: [::std::os::raw::c_char; 14usize],
}
#[test]
fn bindgen_test_layout_sockaddr() {
    assert_eq!(::std::mem::size_of::<sockaddr>() , 16usize , concat ! (
               "Size of: " , stringify ! ( sockaddr ) ));
    assert_eq! (::std::mem::align_of::<sockaddr>() , 1usize , concat ! (
                "Alignment of " , stringify ! ( sockaddr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sockaddr ) ) . sa_len as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( sockaddr ) , "::" ,
                stringify ! ( sa_len ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sockaddr ) ) . sa_family as * const _ as
                usize } , 1usize , concat ! (
                "Alignment of field: " , stringify ! ( sockaddr ) , "::" ,
                stringify ! ( sa_family ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sockaddr ) ) . sa_data as * const _ as
                usize } , 2usize , concat ! (
                "Alignment of field: " , stringify ! ( sockaddr ) , "::" ,
                stringify ! ( sa_data ) ));
}
impl Clone for sockaddr {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct sockproto {
    pub sp_family: ::std::os::raw::c_ushort,
    pub sp_protocol: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout_sockproto() {
    assert_eq!(::std::mem::size_of::<sockproto>() , 4usize , concat ! (
               "Size of: " , stringify ! ( sockproto ) ));
    assert_eq! (::std::mem::align_of::<sockproto>() , 2usize , concat ! (
                "Alignment of " , stringify ! ( sockproto ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sockproto ) ) . sp_family as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( sockproto ) , "::" ,
                stringify ! ( sp_family ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sockproto ) ) . sp_protocol as * const _
                as usize } , 2usize , concat ! (
                "Alignment of field: " , stringify ! ( sockproto ) , "::" ,
                stringify ! ( sp_protocol ) ));
}
impl Clone for sockproto {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct sockaddr_storage {
    pub ss_len: ::std::os::raw::c_uchar,
    pub ss_family: sa_family_t,
    pub __ss_pad1: [::std::os::raw::c_char; 6usize],
    pub __ss_align: __int64_t,
    pub __ss_pad2: [::std::os::raw::c_char; 112usize],
}
#[test]
fn bindgen_test_layout_sockaddr_storage() {
    assert_eq!(::std::mem::size_of::<sockaddr_storage>() , 128usize , concat !
               ( "Size of: " , stringify ! ( sockaddr_storage ) ));
    assert_eq! (::std::mem::align_of::<sockaddr_storage>() , 8usize , concat !
                ( "Alignment of " , stringify ! ( sockaddr_storage ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sockaddr_storage ) ) . ss_len as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( sockaddr_storage ) ,
                "::" , stringify ! ( ss_len ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sockaddr_storage ) ) . ss_family as *
                const _ as usize } , 1usize , concat ! (
                "Alignment of field: " , stringify ! ( sockaddr_storage ) ,
                "::" , stringify ! ( ss_family ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sockaddr_storage ) ) . __ss_pad1 as *
                const _ as usize } , 2usize , concat ! (
                "Alignment of field: " , stringify ! ( sockaddr_storage ) ,
                "::" , stringify ! ( __ss_pad1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sockaddr_storage ) ) . __ss_align as *
                const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( sockaddr_storage ) ,
                "::" , stringify ! ( __ss_align ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sockaddr_storage ) ) . __ss_pad2 as *
                const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( sockaddr_storage ) ,
                "::" , stringify ! ( __ss_pad2 ) ));
}
impl Clone for sockaddr_storage {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct msghdr {
    pub msg_name: *mut ::std::os::raw::c_void,
    pub msg_namelen: socklen_t,
    pub msg_iov: *mut iovec,
    pub msg_iovlen: ::std::os::raw::c_int,
    pub msg_control: *mut ::std::os::raw::c_void,
    pub msg_controllen: socklen_t,
    pub msg_flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_msghdr() {
    assert_eq!(::std::mem::size_of::<msghdr>() , 48usize , concat ! (
               "Size of: " , stringify ! ( msghdr ) ));
    assert_eq! (::std::mem::align_of::<msghdr>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( msghdr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const msghdr ) ) . msg_name as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( msghdr ) , "::" ,
                stringify ! ( msg_name ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const msghdr ) ) . msg_namelen as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( msghdr ) , "::" ,
                stringify ! ( msg_namelen ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const msghdr ) ) . msg_iov as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( msghdr ) , "::" ,
                stringify ! ( msg_iov ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const msghdr ) ) . msg_iovlen as * const _ as
                usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( msghdr ) , "::" ,
                stringify ! ( msg_iovlen ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const msghdr ) ) . msg_control as * const _ as
                usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( msghdr ) , "::" ,
                stringify ! ( msg_control ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const msghdr ) ) . msg_controllen as * const _
                as usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( msghdr ) , "::" ,
                stringify ! ( msg_controllen ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const msghdr ) ) . msg_flags as * const _ as
                usize } , 44usize , concat ! (
                "Alignment of field: " , stringify ! ( msghdr ) , "::" ,
                stringify ! ( msg_flags ) ));
}
impl Clone for msghdr {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct cmsghdr {
    pub cmsg_len: socklen_t,
    pub cmsg_level: ::std::os::raw::c_int,
    pub cmsg_type: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_cmsghdr() {
    assert_eq!(::std::mem::size_of::<cmsghdr>() , 12usize , concat ! (
               "Size of: " , stringify ! ( cmsghdr ) ));
    assert_eq! (::std::mem::align_of::<cmsghdr>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( cmsghdr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const cmsghdr ) ) . cmsg_len as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( cmsghdr ) , "::" ,
                stringify ! ( cmsg_len ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const cmsghdr ) ) . cmsg_level as * const _ as
                usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( cmsghdr ) , "::" ,
                stringify ! ( cmsg_level ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const cmsghdr ) ) . cmsg_type as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( cmsghdr ) , "::" ,
                stringify ! ( cmsg_type ) ));
}
impl Clone for cmsghdr {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct cmsgcred {
    pub cmcred_pid: pid_t,
    pub cmcred_uid: uid_t,
    pub cmcred_euid: uid_t,
    pub cmcred_gid: gid_t,
    pub cmcred_ngroups: ::std::os::raw::c_short,
    pub cmcred_groups: [gid_t; 16usize],
}
#[test]
fn bindgen_test_layout_cmsgcred() {
    assert_eq!(::std::mem::size_of::<cmsgcred>() , 84usize , concat ! (
               "Size of: " , stringify ! ( cmsgcred ) ));
    assert_eq! (::std::mem::align_of::<cmsgcred>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( cmsgcred ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const cmsgcred ) ) . cmcred_pid as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( cmsgcred ) , "::" ,
                stringify ! ( cmcred_pid ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const cmsgcred ) ) . cmcred_uid as * const _ as
                usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( cmsgcred ) , "::" ,
                stringify ! ( cmcred_uid ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const cmsgcred ) ) . cmcred_euid as * const _
                as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( cmsgcred ) , "::" ,
                stringify ! ( cmcred_euid ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const cmsgcred ) ) . cmcred_gid as * const _ as
                usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( cmsgcred ) , "::" ,
                stringify ! ( cmcred_gid ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const cmsgcred ) ) . cmcred_ngroups as * const
                _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( cmsgcred ) , "::" ,
                stringify ! ( cmcred_ngroups ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const cmsgcred ) ) . cmcred_groups as * const _
                as usize } , 20usize , concat ! (
                "Alignment of field: " , stringify ! ( cmsgcred ) , "::" ,
                stringify ! ( cmcred_groups ) ));
}
impl Clone for cmsgcred {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct sockcred {
    pub sc_uid: uid_t,
    pub sc_euid: uid_t,
    pub sc_gid: gid_t,
    pub sc_egid: gid_t,
    pub sc_ngroups: ::std::os::raw::c_int,
    pub sc_groups: [gid_t; 1usize],
}
#[test]
fn bindgen_test_layout_sockcred() {
    assert_eq!(::std::mem::size_of::<sockcred>() , 24usize , concat ! (
               "Size of: " , stringify ! ( sockcred ) ));
    assert_eq! (::std::mem::align_of::<sockcred>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( sockcred ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sockcred ) ) . sc_uid as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( sockcred ) , "::" ,
                stringify ! ( sc_uid ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sockcred ) ) . sc_euid as * const _ as
                usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( sockcred ) , "::" ,
                stringify ! ( sc_euid ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sockcred ) ) . sc_gid as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( sockcred ) , "::" ,
                stringify ! ( sc_gid ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sockcred ) ) . sc_egid as * const _ as
                usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( sockcred ) , "::" ,
                stringify ! ( sc_egid ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sockcred ) ) . sc_ngroups as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( sockcred ) , "::" ,
                stringify ! ( sc_ngroups ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sockcred ) ) . sc_groups as * const _ as
                usize } , 20usize , concat ! (
                "Alignment of field: " , stringify ! ( sockcred ) , "::" ,
                stringify ! ( sc_groups ) ));
}
impl Clone for sockcred {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct osockaddr {
    pub sa_family: ::std::os::raw::c_ushort,
    pub sa_data: [::std::os::raw::c_char; 14usize],
}
#[test]
fn bindgen_test_layout_osockaddr() {
    assert_eq!(::std::mem::size_of::<osockaddr>() , 16usize , concat ! (
               "Size of: " , stringify ! ( osockaddr ) ));
    assert_eq! (::std::mem::align_of::<osockaddr>() , 2usize , concat ! (
                "Alignment of " , stringify ! ( osockaddr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const osockaddr ) ) . sa_family as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( osockaddr ) , "::" ,
                stringify ! ( sa_family ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const osockaddr ) ) . sa_data as * const _ as
                usize } , 2usize , concat ! (
                "Alignment of field: " , stringify ! ( osockaddr ) , "::" ,
                stringify ! ( sa_data ) ));
}
impl Clone for osockaddr {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct omsghdr {
    pub msg_name: *mut ::std::os::raw::c_char,
    pub msg_namelen: ::std::os::raw::c_int,
    pub msg_iov: *mut iovec,
    pub msg_iovlen: ::std::os::raw::c_int,
    pub msg_accrights: *mut ::std::os::raw::c_char,
    pub msg_accrightslen: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_omsghdr() {
    assert_eq!(::std::mem::size_of::<omsghdr>() , 48usize , concat ! (
               "Size of: " , stringify ! ( omsghdr ) ));
    assert_eq! (::std::mem::align_of::<omsghdr>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( omsghdr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const omsghdr ) ) . msg_name as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( omsghdr ) , "::" ,
                stringify ! ( msg_name ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const omsghdr ) ) . msg_namelen as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( omsghdr ) , "::" ,
                stringify ! ( msg_namelen ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const omsghdr ) ) . msg_iov as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( omsghdr ) , "::" ,
                stringify ! ( msg_iov ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const omsghdr ) ) . msg_iovlen as * const _ as
                usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( omsghdr ) , "::" ,
                stringify ! ( msg_iovlen ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const omsghdr ) ) . msg_accrights as * const _
                as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( omsghdr ) , "::" ,
                stringify ! ( msg_accrights ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const omsghdr ) ) . msg_accrightslen as * const
                _ as usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( omsghdr ) , "::" ,
                stringify ! ( msg_accrightslen ) ));
}
impl Clone for omsghdr {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct sf_hdtr {
    pub headers: *mut iovec,
    pub hdr_cnt: ::std::os::raw::c_int,
    pub trailers: *mut iovec,
    pub trl_cnt: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sf_hdtr() {
    assert_eq!(::std::mem::size_of::<sf_hdtr>() , 32usize , concat ! (
               "Size of: " , stringify ! ( sf_hdtr ) ));
    assert_eq! (::std::mem::align_of::<sf_hdtr>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( sf_hdtr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sf_hdtr ) ) . headers as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( sf_hdtr ) , "::" ,
                stringify ! ( headers ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sf_hdtr ) ) . hdr_cnt as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( sf_hdtr ) , "::" ,
                stringify ! ( hdr_cnt ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sf_hdtr ) ) . trailers as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( sf_hdtr ) , "::" ,
                stringify ! ( trailers ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sf_hdtr ) ) . trl_cnt as * const _ as
                usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( sf_hdtr ) , "::" ,
                stringify ! ( trl_cnt ) ));
}
impl Clone for sf_hdtr {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn accept(arg1: ::std::os::raw::c_int, arg2: *mut sockaddr,
                  arg3: *mut socklen_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bind(arg1: ::std::os::raw::c_int, arg2: *const sockaddr,
                arg3: socklen_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn connect(arg1: ::std::os::raw::c_int, arg2: *const sockaddr,
                   arg3: socklen_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn accept4(arg1: ::std::os::raw::c_int, arg2: *mut sockaddr,
                   arg3: *mut socklen_t, arg4: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bindat(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int,
                  arg3: *const sockaddr, arg4: socklen_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn connectat(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int,
                     arg3: *const sockaddr, arg4: socklen_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpeername(arg1: ::std::os::raw::c_int, arg2: *mut sockaddr,
                       arg3: *mut socklen_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsockname(arg1: ::std::os::raw::c_int, arg2: *mut sockaddr,
                       arg3: *mut socklen_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsockopt(arg1: ::std::os::raw::c_int,
                      arg2: ::std::os::raw::c_int,
                      arg3: ::std::os::raw::c_int,
                      arg4: *mut ::std::os::raw::c_void, arg5: *mut socklen_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn listen(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn recv(arg1: ::std::os::raw::c_int,
                arg2: *mut ::std::os::raw::c_void, arg3: usize,
                arg4: ::std::os::raw::c_int) -> isize;
}
extern "C" {
    pub fn recvfrom(arg1: ::std::os::raw::c_int,
                    arg2: *mut ::std::os::raw::c_void, arg3: usize,
                    arg4: ::std::os::raw::c_int, arg5: *mut sockaddr,
                    arg6: *mut socklen_t) -> isize;
}
extern "C" {
    pub fn recvmsg(arg1: ::std::os::raw::c_int, arg2: *mut msghdr,
                   arg3: ::std::os::raw::c_int) -> isize;
}
extern "C" {
    pub fn send(arg1: ::std::os::raw::c_int,
                arg2: *const ::std::os::raw::c_void, arg3: usize,
                arg4: ::std::os::raw::c_int) -> isize;
}
extern "C" {
    pub fn sendto(arg1: ::std::os::raw::c_int,
                  arg2: *const ::std::os::raw::c_void, arg3: usize,
                  arg4: ::std::os::raw::c_int, arg5: *const sockaddr,
                  arg6: socklen_t) -> isize;
}
extern "C" {
    pub fn sendmsg(arg1: ::std::os::raw::c_int, arg2: *const msghdr,
                   arg3: ::std::os::raw::c_int) -> isize;
}
extern "C" {
    pub fn sendfile(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int,
                    arg3: off_t, arg4: usize, arg5: *mut sf_hdtr,
                    arg6: *mut off_t, arg7: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setfib(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setsockopt(arg1: ::std::os::raw::c_int,
                      arg2: ::std::os::raw::c_int,
                      arg3: ::std::os::raw::c_int,
                      arg4: *const ::std::os::raw::c_void, arg5: socklen_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn shutdown(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sockatmark(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn socket(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int,
                  arg3: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn socketpair(arg1: ::std::os::raw::c_int,
                      arg2: ::std::os::raw::c_int,
                      arg3: ::std::os::raw::c_int,
                      arg4: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rd_kafka_version() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rd_kafka_version_str() -> *const ::std::os::raw::c_char;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum rd_kafka_type_t { RD_KAFKA_PRODUCER = 0, RD_KAFKA_CONSUMER = 1, }
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum rd_kafka_timestamp_type_t {
    RD_KAFKA_TIMESTAMP_NOT_AVAILABLE = 0,
    RD_KAFKA_TIMESTAMP_CREATE_TIME = 1,
    RD_KAFKA_TIMESTAMP_LOG_APPEND_TIME = 2,
}
extern "C" {
    pub fn rd_kafka_get_debug_contexts() -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rd_kafka_s {
    _unused: [u8; 0],
}
pub type rd_kafka_t = rd_kafka_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rd_kafka_topic_s {
    _unused: [u8; 0],
}
pub type rd_kafka_topic_t = rd_kafka_topic_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rd_kafka_conf_s {
    _unused: [u8; 0],
}
pub type rd_kafka_conf_t = rd_kafka_conf_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rd_kafka_topic_conf_s {
    _unused: [u8; 0],
}
pub type rd_kafka_topic_conf_t = rd_kafka_topic_conf_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rd_kafka_queue_s {
    _unused: [u8; 0],
}
pub type rd_kafka_queue_t = rd_kafka_queue_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rd_kafka_op_s {
    _unused: [u8; 0],
}
pub type rd_kafka_event_t = rd_kafka_op_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rd_kafka_topic_result_s {
    _unused: [u8; 0],
}
pub type rd_kafka_topic_result_t = rd_kafka_topic_result_s;
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum rd_kafka_resp_err_t {
    RD_KAFKA_RESP_ERR__BEGIN = -200,
    RD_KAFKA_RESP_ERR__BAD_MSG = -199,
    RD_KAFKA_RESP_ERR__BAD_COMPRESSION = -198,
    RD_KAFKA_RESP_ERR__DESTROY = -197,
    RD_KAFKA_RESP_ERR__FAIL = -196,
    RD_KAFKA_RESP_ERR__TRANSPORT = -195,
    RD_KAFKA_RESP_ERR__CRIT_SYS_RESOURCE = -194,
    RD_KAFKA_RESP_ERR__RESOLVE = -193,
    RD_KAFKA_RESP_ERR__MSG_TIMED_OUT = -192,
    RD_KAFKA_RESP_ERR__PARTITION_EOF = -191,
    RD_KAFKA_RESP_ERR__UNKNOWN_PARTITION = -190,
    RD_KAFKA_RESP_ERR__FS = -189,
    RD_KAFKA_RESP_ERR__UNKNOWN_TOPIC = -188,
    RD_KAFKA_RESP_ERR__ALL_BROKERS_DOWN = -187,
    RD_KAFKA_RESP_ERR__INVALID_ARG = -186,
    RD_KAFKA_RESP_ERR__TIMED_OUT = -185,
    RD_KAFKA_RESP_ERR__QUEUE_FULL = -184,
    RD_KAFKA_RESP_ERR__ISR_INSUFF = -183,
    RD_KAFKA_RESP_ERR__NODE_UPDATE = -182,
    RD_KAFKA_RESP_ERR__SSL = -181,
    RD_KAFKA_RESP_ERR__WAIT_COORD = -180,
    RD_KAFKA_RESP_ERR__UNKNOWN_GROUP = -179,
    RD_KAFKA_RESP_ERR__IN_PROGRESS = -178,
    RD_KAFKA_RESP_ERR__PREV_IN_PROGRESS = -177,
    RD_KAFKA_RESP_ERR__EXISTING_SUBSCRIPTION = -176,
    RD_KAFKA_RESP_ERR__ASSIGN_PARTITIONS = -175,
    RD_KAFKA_RESP_ERR__REVOKE_PARTITIONS = -174,
    RD_KAFKA_RESP_ERR__CONFLICT = -173,
    RD_KAFKA_RESP_ERR__STATE = -172,
    RD_KAFKA_RESP_ERR__UNKNOWN_PROTOCOL = -171,
    RD_KAFKA_RESP_ERR__NOT_IMPLEMENTED = -170,
    RD_KAFKA_RESP_ERR__AUTHENTICATION = -169,
    RD_KAFKA_RESP_ERR__NO_OFFSET = -168,
    RD_KAFKA_RESP_ERR__OUTDATED = -167,
    RD_KAFKA_RESP_ERR__TIMED_OUT_QUEUE = -166,
    RD_KAFKA_RESP_ERR__UNSUPPORTED_FEATURE = -165,
    RD_KAFKA_RESP_ERR__WAIT_CACHE = -164,
    RD_KAFKA_RESP_ERR__INTR = -163,
    RD_KAFKA_RESP_ERR__KEY_SERIALIZATION = -162,
    RD_KAFKA_RESP_ERR__VALUE_SERIALIZATION = -161,
    RD_KAFKA_RESP_ERR__KEY_DESERIALIZATION = -160,
    RD_KAFKA_RESP_ERR__VALUE_DESERIALIZATION = -159,
    RD_KAFKA_RESP_ERR__PARTIAL = -158,
    RD_KAFKA_RESP_ERR__READ_ONLY = -157,
    RD_KAFKA_RESP_ERR__NOENT = -156,
    RD_KAFKA_RESP_ERR__UNDERFLOW = -155,
    RD_KAFKA_RESP_ERR__INVALID_TYPE = -154,
    RD_KAFKA_RESP_ERR__END = -100,
    RD_KAFKA_RESP_ERR_UNKNOWN = -1,
    RD_KAFKA_RESP_ERR_NO_ERROR = 0,
    RD_KAFKA_RESP_ERR_OFFSET_OUT_OF_RANGE = 1,
    RD_KAFKA_RESP_ERR_INVALID_MSG = 2,
    RD_KAFKA_RESP_ERR_UNKNOWN_TOPIC_OR_PART = 3,
    RD_KAFKA_RESP_ERR_INVALID_MSG_SIZE = 4,
    RD_KAFKA_RESP_ERR_LEADER_NOT_AVAILABLE = 5,
    RD_KAFKA_RESP_ERR_NOT_LEADER_FOR_PARTITION = 6,
    RD_KAFKA_RESP_ERR_REQUEST_TIMED_OUT = 7,
    RD_KAFKA_RESP_ERR_BROKER_NOT_AVAILABLE = 8,
    RD_KAFKA_RESP_ERR_REPLICA_NOT_AVAILABLE = 9,
    RD_KAFKA_RESP_ERR_MSG_SIZE_TOO_LARGE = 10,
    RD_KAFKA_RESP_ERR_STALE_CTRL_EPOCH = 11,
    RD_KAFKA_RESP_ERR_OFFSET_METADATA_TOO_LARGE = 12,
    RD_KAFKA_RESP_ERR_NETWORK_EXCEPTION = 13,
    RD_KAFKA_RESP_ERR_GROUP_LOAD_IN_PROGRESS = 14,
    RD_KAFKA_RESP_ERR_GROUP_COORDINATOR_NOT_AVAILABLE = 15,
    RD_KAFKA_RESP_ERR_NOT_COORDINATOR_FOR_GROUP = 16,
    RD_KAFKA_RESP_ERR_TOPIC_EXCEPTION = 17,
    RD_KAFKA_RESP_ERR_RECORD_LIST_TOO_LARGE = 18,
    RD_KAFKA_RESP_ERR_NOT_ENOUGH_REPLICAS = 19,
    RD_KAFKA_RESP_ERR_NOT_ENOUGH_REPLICAS_AFTER_APPEND = 20,
    RD_KAFKA_RESP_ERR_INVALID_REQUIRED_ACKS = 21,
    RD_KAFKA_RESP_ERR_ILLEGAL_GENERATION = 22,
    RD_KAFKA_RESP_ERR_INCONSISTENT_GROUP_PROTOCOL = 23,
    RD_KAFKA_RESP_ERR_INVALID_GROUP_ID = 24,
    RD_KAFKA_RESP_ERR_UNKNOWN_MEMBER_ID = 25,
    RD_KAFKA_RESP_ERR_INVALID_SESSION_TIMEOUT = 26,
    RD_KAFKA_RESP_ERR_REBALANCE_IN_PROGRESS = 27,
    RD_KAFKA_RESP_ERR_INVALID_COMMIT_OFFSET_SIZE = 28,
    RD_KAFKA_RESP_ERR_TOPIC_AUTHORIZATION_FAILED = 29,
    RD_KAFKA_RESP_ERR_GROUP_AUTHORIZATION_FAILED = 30,
    RD_KAFKA_RESP_ERR_CLUSTER_AUTHORIZATION_FAILED = 31,
    RD_KAFKA_RESP_ERR_INVALID_TIMESTAMP = 32,
    RD_KAFKA_RESP_ERR_UNSUPPORTED_SASL_MECHANISM = 33,
    RD_KAFKA_RESP_ERR_ILLEGAL_SASL_STATE = 34,
    RD_KAFKA_RESP_ERR_UNSUPPORTED_VERSION = 35,
    RD_KAFKA_RESP_ERR_TOPIC_ALREADY_EXISTS = 36,
    RD_KAFKA_RESP_ERR_INVALID_PARTITIONS = 37,
    RD_KAFKA_RESP_ERR_INVALID_REPLICATION_FACTOR = 38,
    RD_KAFKA_RESP_ERR_INVALID_REPLICA_ASSIGNMENT = 39,
    RD_KAFKA_RESP_ERR_INVALID_CONFIG = 40,
    RD_KAFKA_RESP_ERR_NOT_CONTROLLER = 41,
    RD_KAFKA_RESP_ERR_INVALID_REQUEST = 42,
    RD_KAFKA_RESP_ERR_UNSUPPORTED_FOR_MESSAGE_FORMAT = 43,
    RD_KAFKA_RESP_ERR_POLICY_VIOLATION = 44,
    RD_KAFKA_RESP_ERR_OUT_OF_ORDER_SEQUENCE_NUMBER = 45,
    RD_KAFKA_RESP_ERR_DUPLICATE_SEQUENCE_NUMBER = 46,
    RD_KAFKA_RESP_ERR_INVALID_PRODUCER_EPOCH = 47,
    RD_KAFKA_RESP_ERR_INVALID_TXN_STATE = 48,
    RD_KAFKA_RESP_ERR_INVALID_PRODUCER_ID_MAPPING = 49,
    RD_KAFKA_RESP_ERR_INVALID_TRANSACTION_TIMEOUT = 50,
    RD_KAFKA_RESP_ERR_CONCURRENT_TRANSACTIONS = 51,
    RD_KAFKA_RESP_ERR_TRANSACTION_COORDINATOR_FENCED = 52,
    RD_KAFKA_RESP_ERR_TRANSACTIONAL_ID_AUTHORIZATION_FAILED = 53,
    RD_KAFKA_RESP_ERR_SECURITY_DISABLED = 54,
    RD_KAFKA_RESP_ERR_OPERATION_NOT_ATTEMPTED = 55,
    RD_KAFKA_RESP_ERR_END_ALL = 56,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct rd_kafka_err_desc {
    pub code: rd_kafka_resp_err_t,
    pub name: *const ::std::os::raw::c_char,
    pub desc: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_rd_kafka_err_desc() {
    assert_eq!(::std::mem::size_of::<rd_kafka_err_desc>() , 24usize , concat !
               ( "Size of: " , stringify ! ( rd_kafka_err_desc ) ));
    assert_eq! (::std::mem::align_of::<rd_kafka_err_desc>() , 8usize , concat
                ! ( "Alignment of " , stringify ! ( rd_kafka_err_desc ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rd_kafka_err_desc ) ) . code as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( rd_kafka_err_desc ) ,
                "::" , stringify ! ( code ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rd_kafka_err_desc ) ) . name as * const _
                as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( rd_kafka_err_desc ) ,
                "::" , stringify ! ( name ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rd_kafka_err_desc ) ) . desc as * const _
                as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( rd_kafka_err_desc ) ,
                "::" , stringify ! ( desc ) ));
}
impl Clone for rd_kafka_err_desc {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn rd_kafka_get_err_descs(errdescs: *mut *const rd_kafka_err_desc,
                                  cntp: *mut usize);
}
extern "C" {
    pub fn rd_kafka_err2str(err: rd_kafka_resp_err_t)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn rd_kafka_err2name(err: rd_kafka_resp_err_t)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn rd_kafka_last_error() -> rd_kafka_resp_err_t;
}
extern "C" {
    pub fn rd_kafka_errno2err(errnox: ::std::os::raw::c_int)
     -> rd_kafka_resp_err_t;
}
extern "C" {
    pub fn rd_kafka_errno() -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct rd_kafka_topic_partition_s {
    pub topic: *mut ::std::os::raw::c_char,
    pub partition: i32,
    pub offset: i64,
    pub metadata: *mut ::std::os::raw::c_void,
    pub metadata_size: usize,
    pub opaque: *mut ::std::os::raw::c_void,
    pub err: rd_kafka_resp_err_t,
    pub _private: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_rd_kafka_topic_partition_s() {
    assert_eq!(::std::mem::size_of::<rd_kafka_topic_partition_s>() , 64usize ,
               concat ! (
               "Size of: " , stringify ! ( rd_kafka_topic_partition_s ) ));
    assert_eq! (::std::mem::align_of::<rd_kafka_topic_partition_s>() , 8usize
                , concat ! (
                "Alignment of " , stringify ! ( rd_kafka_topic_partition_s )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rd_kafka_topic_partition_s ) ) . topic as
                * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                rd_kafka_topic_partition_s ) , "::" , stringify ! ( topic )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rd_kafka_topic_partition_s ) ) .
                partition as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                rd_kafka_topic_partition_s ) , "::" , stringify ! ( partition
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rd_kafka_topic_partition_s ) ) . offset
                as * const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! (
                rd_kafka_topic_partition_s ) , "::" , stringify ! ( offset )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rd_kafka_topic_partition_s ) ) . metadata
                as * const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! (
                rd_kafka_topic_partition_s ) , "::" , stringify ! ( metadata )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rd_kafka_topic_partition_s ) ) .
                metadata_size as * const _ as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! (
                rd_kafka_topic_partition_s ) , "::" , stringify ! (
                metadata_size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rd_kafka_topic_partition_s ) ) . opaque
                as * const _ as usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! (
                rd_kafka_topic_partition_s ) , "::" , stringify ! ( opaque )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rd_kafka_topic_partition_s ) ) . err as *
                const _ as usize } , 48usize , concat ! (
                "Alignment of field: " , stringify ! (
                rd_kafka_topic_partition_s ) , "::" , stringify ! ( err ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rd_kafka_topic_partition_s ) ) . _private
                as * const _ as usize } , 56usize , concat ! (
                "Alignment of field: " , stringify ! (
                rd_kafka_topic_partition_s ) , "::" , stringify ! ( _private )
                ));
}
impl Clone for rd_kafka_topic_partition_s {
    fn clone(&self) -> Self { *self }
}
pub type rd_kafka_topic_partition_t = rd_kafka_topic_partition_s;
extern "C" {
    pub fn rd_kafka_topic_partition_destroy(rktpar:
                                                *mut rd_kafka_topic_partition_t);
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct rd_kafka_topic_partition_list_s {
    pub cnt: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub elems: *mut rd_kafka_topic_partition_t,
}
#[test]
fn bindgen_test_layout_rd_kafka_topic_partition_list_s() {
    assert_eq!(::std::mem::size_of::<rd_kafka_topic_partition_list_s>() ,
               16usize , concat ! (
               "Size of: " , stringify ! ( rd_kafka_topic_partition_list_s )
               ));
    assert_eq! (::std::mem::align_of::<rd_kafka_topic_partition_list_s>() ,
                8usize , concat ! (
                "Alignment of " , stringify ! (
                rd_kafka_topic_partition_list_s ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rd_kafka_topic_partition_list_s ) ) . cnt
                as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                rd_kafka_topic_partition_list_s ) , "::" , stringify ! ( cnt )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rd_kafka_topic_partition_list_s ) ) .
                size as * const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! (
                rd_kafka_topic_partition_list_s ) , "::" , stringify ! ( size
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rd_kafka_topic_partition_list_s ) ) .
                elems as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                rd_kafka_topic_partition_list_s ) , "::" , stringify ! ( elems
                ) ));
}
impl Clone for rd_kafka_topic_partition_list_s {
    fn clone(&self) -> Self { *self }
}
pub type rd_kafka_topic_partition_list_t = rd_kafka_topic_partition_list_s;
extern "C" {
    pub fn rd_kafka_topic_partition_list_new(size: ::std::os::raw::c_int)
     -> *mut rd_kafka_topic_partition_list_t;
}
extern "C" {
    pub fn rd_kafka_topic_partition_list_destroy(rkparlist:
                                                     *mut rd_kafka_topic_partition_list_t);
}
extern "C" {
    pub fn rd_kafka_topic_partition_list_add(rktparlist:
                                                 *mut rd_kafka_topic_partition_list_t,
                                             topic:
                                                 *const ::std::os::raw::c_char,
                                             partition: i32)
     -> *mut rd_kafka_topic_partition_t;
}
extern "C" {
    pub fn rd_kafka_topic_partition_list_add_range(rktparlist:
                                                       *mut rd_kafka_topic_partition_list_t,
                                                   topic:
                                                       *const ::std::os::raw::c_char,
                                                   start: i32, stop: i32);
}
extern "C" {
    pub fn rd_kafka_topic_partition_list_del(rktparlist:
                                                 *mut rd_kafka_topic_partition_list_t,
                                             topic:
                                                 *const ::std::os::raw::c_char,
                                             partition: i32)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rd_kafka_topic_partition_list_del_by_idx(rktparlist:
                                                        *mut rd_kafka_topic_partition_list_t,
                                                    idx:
                                                        ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rd_kafka_topic_partition_list_copy(src:
                                                  *const rd_kafka_topic_partition_list_t)
     -> *mut rd_kafka_topic_partition_list_t;
}
extern "C" {
    pub fn rd_kafka_topic_partition_list_set_offset(rktparlist:
                                                        *mut rd_kafka_topic_partition_list_t,
                                                    topic:
                                                        *const ::std::os::raw::c_char,
                                                    partition: i32,
                                                    offset: i64)
     -> rd_kafka_resp_err_t;
}
extern "C" {
    pub fn rd_kafka_topic_partition_list_find(rktparlist:
                                                  *mut rd_kafka_topic_partition_list_t,
                                              topic:
                                                  *const ::std::os::raw::c_char,
                                              partition: i32)
     -> *mut rd_kafka_topic_partition_t;
}
extern "C" {
    pub fn rd_kafka_topic_partition_list_sort(rktparlist:
                                                  *mut rd_kafka_topic_partition_list_t,
                                              cmp:
                                                  ::std::option::Option<unsafe extern "C" fn(a:
                                                                                                 *const ::std::os::raw::c_void,
                                                                                             b:
                                                                                                 *const ::std::os::raw::c_void,
                                                                                             opaque:
                                                                                                 *mut ::std::os::raw::c_void)
                                                                            ->
                                                                                ::std::os::raw::c_int>,
                                              opaque:
                                                  *mut ::std::os::raw::c_void);
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum rd_kafka_vtype_t {
    RD_KAFKA_VTYPE_END = 0,
    RD_KAFKA_VTYPE_TOPIC = 1,
    RD_KAFKA_VTYPE_RKT = 2,
    RD_KAFKA_VTYPE_PARTITION = 3,
    RD_KAFKA_VTYPE_VALUE = 4,
    RD_KAFKA_VTYPE_KEY = 5,
    RD_KAFKA_VTYPE_OPAQUE = 6,
    RD_KAFKA_VTYPE_MSGFLAGS = 7,
    RD_KAFKA_VTYPE_TIMESTAMP = 8,
    RD_KAFKA_VTYPE_HEADER = 9,
    RD_KAFKA_VTYPE_HEADERS = 10,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rd_kafka_headers_s {
    _unused: [u8; 0],
}
pub type rd_kafka_headers_t = rd_kafka_headers_s;
extern "C" {
    pub fn rd_kafka_headers_new(initial_count: usize)
     -> *mut rd_kafka_headers_t;
}
extern "C" {
    pub fn rd_kafka_headers_destroy(hdrs: *mut rd_kafka_headers_t);
}
extern "C" {
    pub fn rd_kafka_headers_copy(src: *const rd_kafka_headers_t)
     -> *mut rd_kafka_headers_t;
}
extern "C" {
    pub fn rd_kafka_header_add(hdrs: *mut rd_kafka_headers_t,
                               name: *const ::std::os::raw::c_char,
                               name_size: isize,
                               value: *const ::std::os::raw::c_void,
                               value_size: isize) -> rd_kafka_resp_err_t;
}
extern "C" {
    pub fn rd_kafka_header_remove(hdrs: *mut rd_kafka_headers_t,
                                  name: *const ::std::os::raw::c_char)
     -> rd_kafka_resp_err_t;
}
extern "C" {
    pub fn rd_kafka_header_get_last(hdrs: *const rd_kafka_headers_t,
                                    name: *const ::std::os::raw::c_char,
                                    valuep:
                                        *mut *const ::std::os::raw::c_void,
                                    sizep: *mut usize) -> rd_kafka_resp_err_t;
}
extern "C" {
    pub fn rd_kafka_header_get(hdrs: *const rd_kafka_headers_t, idx: usize,
                               name: *const ::std::os::raw::c_char,
                               valuep: *mut *const ::std::os::raw::c_void,
                               sizep: *mut usize) -> rd_kafka_resp_err_t;
}
extern "C" {
    pub fn rd_kafka_header_get_all(hdrs: *const rd_kafka_headers_t,
                                   idx: usize,
                                   namep: *mut *const ::std::os::raw::c_char,
                                   valuep: *mut *const ::std::os::raw::c_void,
                                   sizep: *mut usize) -> rd_kafka_resp_err_t;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct rd_kafka_message_s {
    pub err: rd_kafka_resp_err_t,
    pub rkt: *mut rd_kafka_topic_t,
    pub partition: i32,
    pub payload: *mut ::std::os::raw::c_void,
    pub len: usize,
    pub key: *mut ::std::os::raw::c_void,
    pub key_len: usize,
    pub offset: i64,
    pub _private: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_rd_kafka_message_s() {
    assert_eq!(::std::mem::size_of::<rd_kafka_message_s>() , 72usize , concat
               ! ( "Size of: " , stringify ! ( rd_kafka_message_s ) ));
    assert_eq! (::std::mem::align_of::<rd_kafka_message_s>() , 8usize , concat
                ! ( "Alignment of " , stringify ! ( rd_kafka_message_s ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rd_kafka_message_s ) ) . err as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( rd_kafka_message_s ) ,
                "::" , stringify ! ( err ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rd_kafka_message_s ) ) . rkt as * const _
                as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( rd_kafka_message_s ) ,
                "::" , stringify ! ( rkt ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rd_kafka_message_s ) ) . partition as *
                const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( rd_kafka_message_s ) ,
                "::" , stringify ! ( partition ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rd_kafka_message_s ) ) . payload as *
                const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( rd_kafka_message_s ) ,
                "::" , stringify ! ( payload ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rd_kafka_message_s ) ) . len as * const _
                as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( rd_kafka_message_s ) ,
                "::" , stringify ! ( len ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rd_kafka_message_s ) ) . key as * const _
                as usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( rd_kafka_message_s ) ,
                "::" , stringify ! ( key ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rd_kafka_message_s ) ) . key_len as *
                const _ as usize } , 48usize , concat ! (
                "Alignment of field: " , stringify ! ( rd_kafka_message_s ) ,
                "::" , stringify ! ( key_len ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rd_kafka_message_s ) ) . offset as *
                const _ as usize } , 56usize , concat ! (
                "Alignment of field: " , stringify ! ( rd_kafka_message_s ) ,
                "::" , stringify ! ( offset ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rd_kafka_message_s ) ) . _private as *
                const _ as usize } , 64usize , concat ! (
                "Alignment of field: " , stringify ! ( rd_kafka_message_s ) ,
                "::" , stringify ! ( _private ) ));
}
impl Clone for rd_kafka_message_s {
    fn clone(&self) -> Self { *self }
}
pub type rd_kafka_message_t = rd_kafka_message_s;
extern "C" {
    pub fn rd_kafka_message_destroy(rkmessage: *mut rd_kafka_message_t);
}
extern "C" {
    pub fn rd_kafka_message_timestamp(rkmessage: *const rd_kafka_message_t,
                                      tstype: *mut rd_kafka_timestamp_type_t)
     -> i64;
}
extern "C" {
    pub fn rd_kafka_message_latency(rkmessage: *const rd_kafka_message_t)
     -> i64;
}
extern "C" {
    pub fn rd_kafka_message_headers(rkmessage: *const rd_kafka_message_t,
                                    hdrsp: *mut *mut rd_kafka_headers_t)
     -> rd_kafka_resp_err_t;
}
extern "C" {
    pub fn rd_kafka_message_detach_headers(rkmessage: *mut rd_kafka_message_t,
                                           hdrsp:
                                               *mut *mut rd_kafka_headers_t)
     -> rd_kafka_resp_err_t;
}
extern "C" {
    pub fn rd_kafka_message_set_headers(rkmessage: *mut rd_kafka_message_t,
                                        hdrs: *mut rd_kafka_headers_t);
}
extern "C" {
    pub fn rd_kafka_header_cnt(hdrs: *const rd_kafka_headers_t) -> usize;
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum rd_kafka_conf_res_t {
    RD_KAFKA_CONF_UNKNOWN = -2,
    RD_KAFKA_CONF_INVALID = -1,
    RD_KAFKA_CONF_OK = 0,
}
extern "C" {
    pub fn rd_kafka_conf_new() -> *mut rd_kafka_conf_t;
}
extern "C" {
    pub fn rd_kafka_conf_destroy(conf: *mut rd_kafka_conf_t);
}
extern "C" {
    pub fn rd_kafka_conf_dup(conf: *const rd_kafka_conf_t)
     -> *mut rd_kafka_conf_t;
}
extern "C" {
    pub fn rd_kafka_conf_dup_filter(conf: *const rd_kafka_conf_t,
                                    filter_cnt: usize,
                                    filter:
                                        *mut *const ::std::os::raw::c_char)
     -> *mut rd_kafka_conf_t;
}
extern "C" {
    pub fn rd_kafka_conf_set(conf: *mut rd_kafka_conf_t,
                             name: *const ::std::os::raw::c_char,
                             value: *const ::std::os::raw::c_char,
                             errstr: *mut ::std::os::raw::c_char,
                             errstr_size: usize) -> rd_kafka_conf_res_t;
}
extern "C" {
    pub fn rd_kafka_conf_set_events(conf: *mut rd_kafka_conf_t,
                                    events: ::std::os::raw::c_int);
}
extern "C" {
    pub fn rd_kafka_conf_set_background_event_cb(conf: *mut rd_kafka_conf_t,
                                                 event_cb:
                                                     ::std::option::Option<unsafe extern "C" fn(rk:
                                                                                                    *mut rd_kafka_t,
                                                                                                rkev:
                                                                                                    *mut rd_kafka_event_t,
                                                                                                opaque:
                                                                                                    *mut ::std::os::raw::c_void)>);
}
extern "C" {
    pub fn rd_kafka_conf_set_dr_cb(conf: *mut rd_kafka_conf_t,
                                   dr_cb:
                                       ::std::option::Option<unsafe extern "C" fn(rk:
                                                                                      *mut rd_kafka_t,
                                                                                  payload:
                                                                                      *mut ::std::os::raw::c_void,
                                                                                  len:
                                                                                      usize,
                                                                                  err:
                                                                                      rd_kafka_resp_err_t,
                                                                                  opaque:
                                                                                      *mut ::std::os::raw::c_void,
                                                                                  msg_opaque:
                                                                                      *mut ::std::os::raw::c_void)>);
}
extern "C" {
    pub fn rd_kafka_conf_set_dr_msg_cb(conf: *mut rd_kafka_conf_t,
                                       dr_msg_cb:
                                           ::std::option::Option<unsafe extern "C" fn(rk:
                                                                                          *mut rd_kafka_t,
                                                                                      rkmessage:
                                                                                          *const rd_kafka_message_t,
                                                                                      opaque:
                                                                                          *mut ::std::os::raw::c_void)>);
}
extern "C" {
    pub fn rd_kafka_conf_set_consume_cb(conf: *mut rd_kafka_conf_t,
                                        consume_cb:
                                            ::std::option::Option<unsafe extern "C" fn(rkmessage:
                                                                                           *mut rd_kafka_message_t,
                                                                                       opaque:
                                                                                           *mut ::std::os::raw::c_void)>);
}
extern "C" {
    pub fn rd_kafka_conf_set_rebalance_cb(conf: *mut rd_kafka_conf_t,
                                          rebalance_cb:
                                              ::std::option::Option<unsafe extern "C" fn(rk:
                                                                                             *mut rd_kafka_t,
                                                                                         err:
                                                                                             rd_kafka_resp_err_t,
                                                                                         partitions:
                                                                                             *mut rd_kafka_topic_partition_list_t,
                                                                                         opaque:
                                                                                             *mut ::std::os::raw::c_void)>);
}
extern "C" {
    pub fn rd_kafka_conf_set_offset_commit_cb(conf: *mut rd_kafka_conf_t,
                                              offset_commit_cb:
                                                  ::std::option::Option<unsafe extern "C" fn(rk:
                                                                                                 *mut rd_kafka_t,
                                                                                             err:
                                                                                                 rd_kafka_resp_err_t,
                                                                                             offsets:
                                                                                                 *mut rd_kafka_topic_partition_list_t,
                                                                                             opaque:
                                                                                                 *mut ::std::os::raw::c_void)>);
}
extern "C" {
    pub fn rd_kafka_conf_set_error_cb(conf: *mut rd_kafka_conf_t,
                                      error_cb:
                                          ::std::option::Option<unsafe extern "C" fn(rk:
                                                                                         *mut rd_kafka_t,
                                                                                     err:
                                                                                         ::std::os::raw::c_int,
                                                                                     reason:
                                                                                         *const ::std::os::raw::c_char,
                                                                                     opaque:
                                                                                         *mut ::std::os::raw::c_void)>);
}
extern "C" {
    pub fn rd_kafka_conf_set_throttle_cb(conf: *mut rd_kafka_conf_t,
                                         throttle_cb:
                                             ::std::option::Option<unsafe extern "C" fn(rk:
                                                                                            *mut rd_kafka_t,
                                                                                        broker_name:
                                                                                            *const ::std::os::raw::c_char,
                                                                                        broker_id:
                                                                                            i32,
                                                                                        throttle_time_ms:
                                                                                            ::std::os::raw::c_int,
                                                                                        opaque:
                                                                                            *mut ::std::os::raw::c_void)>);
}
extern "C" {
    pub fn rd_kafka_conf_set_log_cb(conf: *mut rd_kafka_conf_t,
                                    log_cb:
                                        ::std::option::Option<unsafe extern "C" fn(rk:
                                                                                       *const rd_kafka_t,
                                                                                   level:
                                                                                       ::std::os::raw::c_int,
                                                                                   fac:
                                                                                       *const ::std::os::raw::c_char,
                                                                                   buf:
                                                                                       *const ::std::os::raw::c_char)>);
}
extern "C" {
    pub fn rd_kafka_conf_set_stats_cb(conf: *mut rd_kafka_conf_t,
                                      stats_cb:
                                          ::std::option::Option<unsafe extern "C" fn(rk:
                                                                                         *mut rd_kafka_t,
                                                                                     json:
                                                                                         *mut ::std::os::raw::c_char,
                                                                                     json_len:
                                                                                         usize,
                                                                                     opaque:
                                                                                         *mut ::std::os::raw::c_void)
                                                                    ->
                                                                        ::std::os::raw::c_int>);
}
extern "C" {
    pub fn rd_kafka_conf_set_socket_cb(conf: *mut rd_kafka_conf_t,
                                       socket_cb:
                                           ::std::option::Option<unsafe extern "C" fn(domain:
                                                                                          ::std::os::raw::c_int,
                                                                                      type_:
                                                                                          ::std::os::raw::c_int,
                                                                                      protocol:
                                                                                          ::std::os::raw::c_int,
                                                                                      opaque:
                                                                                          *mut ::std::os::raw::c_void)
                                                                     ->
                                                                         ::std::os::raw::c_int>);
}
extern "C" {
    pub fn rd_kafka_conf_set_connect_cb(conf: *mut rd_kafka_conf_t,
                                        connect_cb:
                                            ::std::option::Option<unsafe extern "C" fn(sockfd:
                                                                                           ::std::os::raw::c_int,
                                                                                       addr:
                                                                                           *const sockaddr,
                                                                                       addrlen:
                                                                                           ::std::os::raw::c_int,
                                                                                       id:
                                                                                           *const ::std::os::raw::c_char,
                                                                                       opaque:
                                                                                           *mut ::std::os::raw::c_void)
                                                                      ->
                                                                          ::std::os::raw::c_int>);
}
extern "C" {
    pub fn rd_kafka_conf_set_closesocket_cb(conf: *mut rd_kafka_conf_t,
                                            closesocket_cb:
                                                ::std::option::Option<unsafe extern "C" fn(sockfd:
                                                                                               ::std::os::raw::c_int,
                                                                                           opaque:
                                                                                               *mut ::std::os::raw::c_void)
                                                                          ->
                                                                              ::std::os::raw::c_int>);
}
extern "C" {
    pub fn rd_kafka_conf_set_open_cb(conf: *mut rd_kafka_conf_t,
                                     open_cb:
                                         ::std::option::Option<unsafe extern "C" fn(pathname:
                                                                                        *const ::std::os::raw::c_char,
                                                                                    flags:
                                                                                        ::std::os::raw::c_int,
                                                                                    mode:
                                                                                        mode_t,
                                                                                    opaque:
                                                                                        *mut ::std::os::raw::c_void)
                                                                   ->
                                                                       ::std::os::raw::c_int>);
}
extern "C" {
    pub fn rd_kafka_conf_set_opaque(conf: *mut rd_kafka_conf_t,
                                    opaque: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn rd_kafka_opaque(rk: *const rd_kafka_t)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn rd_kafka_conf_set_default_topic_conf(conf: *mut rd_kafka_conf_t,
                                                tconf:
                                                    *mut rd_kafka_topic_conf_t);
}
extern "C" {
    pub fn rd_kafka_conf_get(conf: *const rd_kafka_conf_t,
                             name: *const ::std::os::raw::c_char,
                             dest: *mut ::std::os::raw::c_char,
                             dest_size: *mut usize) -> rd_kafka_conf_res_t;
}
extern "C" {
    pub fn rd_kafka_topic_conf_get(conf: *const rd_kafka_topic_conf_t,
                                   name: *const ::std::os::raw::c_char,
                                   dest: *mut ::std::os::raw::c_char,
                                   dest_size: *mut usize)
     -> rd_kafka_conf_res_t;
}
extern "C" {
    pub fn rd_kafka_conf_dump(conf: *mut rd_kafka_conf_t, cntp: *mut usize)
     -> *mut *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn rd_kafka_topic_conf_dump(conf: *mut rd_kafka_topic_conf_t,
                                    cntp: *mut usize)
     -> *mut *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn rd_kafka_conf_dump_free(arr: *mut *const ::std::os::raw::c_char,
                                   cnt: usize);
}
extern "C" {
    pub fn rd_kafka_conf_properties_show(fp: *mut FILE);
}
extern "C" {
    pub fn rd_kafka_topic_conf_new() -> *mut rd_kafka_topic_conf_t;
}
extern "C" {
    pub fn rd_kafka_topic_conf_dup(conf: *const rd_kafka_topic_conf_t)
     -> *mut rd_kafka_topic_conf_t;
}
extern "C" {
    pub fn rd_kafka_default_topic_conf_dup(rk: *mut rd_kafka_t)
     -> *mut rd_kafka_topic_conf_t;
}
extern "C" {
    pub fn rd_kafka_topic_conf_destroy(topic_conf:
                                           *mut rd_kafka_topic_conf_t);
}
extern "C" {
    pub fn rd_kafka_topic_conf_set(conf: *mut rd_kafka_topic_conf_t,
                                   name: *const ::std::os::raw::c_char,
                                   value: *const ::std::os::raw::c_char,
                                   errstr: *mut ::std::os::raw::c_char,
                                   errstr_size: usize) -> rd_kafka_conf_res_t;
}
extern "C" {
    pub fn rd_kafka_topic_conf_set_opaque(conf: *mut rd_kafka_topic_conf_t,
                                          opaque:
                                              *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn rd_kafka_topic_conf_set_partitioner_cb(topic_conf:
                                                      *mut rd_kafka_topic_conf_t,
                                                  partitioner:
                                                      ::std::option::Option<unsafe extern "C" fn(rkt:
                                                                                                     *const rd_kafka_topic_t,
                                                                                                 keydata:
                                                                                                     *const ::std::os::raw::c_void,
                                                                                                 keylen:
                                                                                                     usize,
                                                                                                 partition_cnt:
                                                                                                     i32,
                                                                                                 rkt_opaque:
                                                                                                     *mut ::std::os::raw::c_void,
                                                                                                 msg_opaque:
                                                                                                     *mut ::std::os::raw::c_void)
                                                                                ->
                                                                                    i32>);
}
extern "C" {
    pub fn rd_kafka_topic_conf_set_msg_order_cmp(topic_conf:
                                                     *mut rd_kafka_topic_conf_t,
                                                 msg_order_cmp:
                                                     ::std::option::Option<unsafe extern "C" fn(a:
                                                                                                    *const rd_kafka_message_t,
                                                                                                b:
                                                                                                    *const rd_kafka_message_t)
                                                                               ->
                                                                                   ::std::os::raw::c_int>);
}
extern "C" {
    pub fn rd_kafka_topic_partition_available(rkt: *const rd_kafka_topic_t,
                                              partition: i32)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rd_kafka_msg_partitioner_random(rkt: *const rd_kafka_topic_t,
                                           key: *const ::std::os::raw::c_void,
                                           keylen: usize, partition_cnt: i32,
                                           opaque:
                                               *mut ::std::os::raw::c_void,
                                           msg_opaque:
                                               *mut ::std::os::raw::c_void)
     -> i32;
}
extern "C" {
    pub fn rd_kafka_msg_partitioner_consistent(rkt: *const rd_kafka_topic_t,
                                               key:
                                                   *const ::std::os::raw::c_void,
                                               keylen: usize,
                                               partition_cnt: i32,
                                               opaque:
                                                   *mut ::std::os::raw::c_void,
                                               msg_opaque:
                                                   *mut ::std::os::raw::c_void)
     -> i32;
}
extern "C" {
    pub fn rd_kafka_msg_partitioner_consistent_random(rkt:
                                                          *const rd_kafka_topic_t,
                                                      key:
                                                          *const ::std::os::raw::c_void,
                                                      keylen: usize,
                                                      partition_cnt: i32,
                                                      opaque:
                                                          *mut ::std::os::raw::c_void,
                                                      msg_opaque:
                                                          *mut ::std::os::raw::c_void)
     -> i32;
}
extern "C" {
    pub fn rd_kafka_msg_partitioner_murmur2(rkt: *const rd_kafka_topic_t,
                                            key:
                                                *const ::std::os::raw::c_void,
                                            keylen: usize, partition_cnt: i32,
                                            rkt_opaque:
                                                *mut ::std::os::raw::c_void,
                                            msg_opaque:
                                                *mut ::std::os::raw::c_void)
     -> i32;
}
extern "C" {
    pub fn rd_kafka_msg_partitioner_murmur2_random(rkt:
                                                       *const rd_kafka_topic_t,
                                                   key:
                                                       *const ::std::os::raw::c_void,
                                                   keylen: usize,
                                                   partition_cnt: i32,
                                                   rkt_opaque:
                                                       *mut ::std::os::raw::c_void,
                                                   msg_opaque:
                                                       *mut ::std::os::raw::c_void)
     -> i32;
}
extern "C" {
    pub fn rd_kafka_new(type_: rd_kafka_type_t, conf: *mut rd_kafka_conf_t,
                        errstr: *mut ::std::os::raw::c_char,
                        errstr_size: usize) -> *mut rd_kafka_t;
}
extern "C" {
    pub fn rd_kafka_destroy(rk: *mut rd_kafka_t);
}
extern "C" {
    pub fn rd_kafka_destroy_flags(rk: *mut rd_kafka_t,
                                  flags: ::std::os::raw::c_int);
}
extern "C" {
    pub fn rd_kafka_name(rk: *const rd_kafka_t)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn rd_kafka_type(rk: *const rd_kafka_t) -> rd_kafka_type_t;
}
extern "C" {
    pub fn rd_kafka_memberid(rk: *const rd_kafka_t)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rd_kafka_clusterid(rk: *mut rd_kafka_t,
                              timeout_ms: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rd_kafka_controllerid(rk: *mut rd_kafka_t,
                                 timeout_ms: ::std::os::raw::c_int) -> i32;
}
extern "C" {
    pub fn rd_kafka_topic_new(rk: *mut rd_kafka_t,
                              topic: *const ::std::os::raw::c_char,
                              conf: *mut rd_kafka_topic_conf_t)
     -> *mut rd_kafka_topic_t;
}
extern "C" {
    pub fn rd_kafka_topic_destroy(rkt: *mut rd_kafka_topic_t);
}
extern "C" {
    pub fn rd_kafka_topic_name(rkt: *const rd_kafka_topic_t)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn rd_kafka_topic_opaque(rkt: *const rd_kafka_topic_t)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn rd_kafka_poll(rk: *mut rd_kafka_t,
                         timeout_ms: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rd_kafka_yield(rk: *mut rd_kafka_t);
}
extern "C" {
    pub fn rd_kafka_pause_partitions(rk: *mut rd_kafka_t,
                                     partitions:
                                         *mut rd_kafka_topic_partition_list_t)
     -> rd_kafka_resp_err_t;
}
extern "C" {
    pub fn rd_kafka_resume_partitions(rk: *mut rd_kafka_t,
                                      partitions:
                                          *mut rd_kafka_topic_partition_list_t)
     -> rd_kafka_resp_err_t;
}
extern "C" {
    pub fn rd_kafka_query_watermark_offsets(rk: *mut rd_kafka_t,
                                            topic:
                                                *const ::std::os::raw::c_char,
                                            partition: i32, low: *mut i64,
                                            high: *mut i64,
                                            timeout_ms: ::std::os::raw::c_int)
     -> rd_kafka_resp_err_t;
}
extern "C" {
    pub fn rd_kafka_get_watermark_offsets(rk: *mut rd_kafka_t,
                                          topic:
                                              *const ::std::os::raw::c_char,
                                          partition: i32, low: *mut i64,
                                          high: *mut i64)
     -> rd_kafka_resp_err_t;
}
extern "C" {
    pub fn rd_kafka_offsets_for_times(rk: *mut rd_kafka_t,
                                      offsets:
                                          *mut rd_kafka_topic_partition_list_t,
                                      timeout_ms: ::std::os::raw::c_int)
     -> rd_kafka_resp_err_t;
}
extern "C" {
    pub fn rd_kafka_mem_free(rk: *mut rd_kafka_t,
                             ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn rd_kafka_queue_new(rk: *mut rd_kafka_t) -> *mut rd_kafka_queue_t;
}
extern "C" {
    pub fn rd_kafka_queue_destroy(rkqu: *mut rd_kafka_queue_t);
}
extern "C" {
    pub fn rd_kafka_queue_get_main(rk: *mut rd_kafka_t)
     -> *mut rd_kafka_queue_t;
}
extern "C" {
    pub fn rd_kafka_queue_get_consumer(rk: *mut rd_kafka_t)
     -> *mut rd_kafka_queue_t;
}
extern "C" {
    pub fn rd_kafka_queue_get_partition(rk: *mut rd_kafka_t,
                                        topic: *const ::std::os::raw::c_char,
                                        partition: i32)
     -> *mut rd_kafka_queue_t;
}
extern "C" {
    pub fn rd_kafka_queue_get_background(rk: *mut rd_kafka_t)
     -> *mut rd_kafka_queue_t;
}
extern "C" {
    pub fn rd_kafka_queue_forward(src: *mut rd_kafka_queue_t,
                                  dst: *mut rd_kafka_queue_t);
}
extern "C" {
    pub fn rd_kafka_set_log_queue(rk: *mut rd_kafka_t,
                                  rkqu: *mut rd_kafka_queue_t)
     -> rd_kafka_resp_err_t;
}
extern "C" {
    pub fn rd_kafka_queue_length(rkqu: *mut rd_kafka_queue_t) -> usize;
}
extern "C" {
    pub fn rd_kafka_queue_io_event_enable(rkqu: *mut rd_kafka_queue_t,
                                          fd: ::std::os::raw::c_int,
                                          payload:
                                              *const ::std::os::raw::c_void,
                                          size: usize);
}
extern "C" {
    pub fn rd_kafka_queue_cb_event_enable(rkqu: *mut rd_kafka_queue_t,
                                          event_cb:
                                              ::std::option::Option<unsafe extern "C" fn(rk:
                                                                                             *mut rd_kafka_t,
                                                                                         opaque:
                                                                                             *mut ::std::os::raw::c_void)>,
                                          opaque:
                                              *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn rd_kafka_consume_start(rkt: *mut rd_kafka_topic_t, partition: i32,
                                  offset: i64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rd_kafka_consume_start_queue(rkt: *mut rd_kafka_topic_t,
                                        partition: i32, offset: i64,
                                        rkqu: *mut rd_kafka_queue_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rd_kafka_consume_stop(rkt: *mut rd_kafka_topic_t, partition: i32)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rd_kafka_seek(rkt: *mut rd_kafka_topic_t, partition: i32,
                         offset: i64, timeout_ms: ::std::os::raw::c_int)
     -> rd_kafka_resp_err_t;
}
extern "C" {
    pub fn rd_kafka_consume(rkt: *mut rd_kafka_topic_t, partition: i32,
                            timeout_ms: ::std::os::raw::c_int)
     -> *mut rd_kafka_message_t;
}
extern "C" {
    pub fn rd_kafka_consume_batch(rkt: *mut rd_kafka_topic_t, partition: i32,
                                  timeout_ms: ::std::os::raw::c_int,
                                  rkmessages: *mut *mut rd_kafka_message_t,
                                  rkmessages_size: usize) -> isize;
}
extern "C" {
    pub fn rd_kafka_consume_callback(rkt: *mut rd_kafka_topic_t,
                                     partition: i32,
                                     timeout_ms: ::std::os::raw::c_int,
                                     consume_cb:
                                         ::std::option::Option<unsafe extern "C" fn(rkmessage:
                                                                                        *mut rd_kafka_message_t,
                                                                                    opaque:
                                                                                        *mut ::std::os::raw::c_void)>,
                                     opaque: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rd_kafka_consume_queue(rkqu: *mut rd_kafka_queue_t,
                                  timeout_ms: ::std::os::raw::c_int)
     -> *mut rd_kafka_message_t;
}
extern "C" {
    pub fn rd_kafka_consume_batch_queue(rkqu: *mut rd_kafka_queue_t,
                                        timeout_ms: ::std::os::raw::c_int,
                                        rkmessages:
                                            *mut *mut rd_kafka_message_t,
                                        rkmessages_size: usize) -> isize;
}
extern "C" {
    pub fn rd_kafka_consume_callback_queue(rkqu: *mut rd_kafka_queue_t,
                                           timeout_ms: ::std::os::raw::c_int,
                                           consume_cb:
                                               ::std::option::Option<unsafe extern "C" fn(rkmessage:
                                                                                              *mut rd_kafka_message_t,
                                                                                          opaque:
                                                                                              *mut ::std::os::raw::c_void)>,
                                           opaque:
                                               *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rd_kafka_offset_store(rkt: *mut rd_kafka_topic_t, partition: i32,
                                 offset: i64) -> rd_kafka_resp_err_t;
}
extern "C" {
    pub fn rd_kafka_offsets_store(rk: *mut rd_kafka_t,
                                  offsets:
                                      *mut rd_kafka_topic_partition_list_t)
     -> rd_kafka_resp_err_t;
}
extern "C" {
    pub fn rd_kafka_subscribe(rk: *mut rd_kafka_t,
                              topics: *const rd_kafka_topic_partition_list_t)
     -> rd_kafka_resp_err_t;
}
extern "C" {
    pub fn rd_kafka_unsubscribe(rk: *mut rd_kafka_t) -> rd_kafka_resp_err_t;
}
extern "C" {
    pub fn rd_kafka_subscription(rk: *mut rd_kafka_t,
                                 topics:
                                     *mut *mut rd_kafka_topic_partition_list_t)
     -> rd_kafka_resp_err_t;
}
extern "C" {
    pub fn rd_kafka_consumer_poll(rk: *mut rd_kafka_t,
                                  timeout_ms: ::std::os::raw::c_int)
     -> *mut rd_kafka_message_t;
}
extern "C" {
    pub fn rd_kafka_consumer_close(rk: *mut rd_kafka_t)
     -> rd_kafka_resp_err_t;
}
extern "C" {
    pub fn rd_kafka_assign(rk: *mut rd_kafka_t,
                           partitions: *const rd_kafka_topic_partition_list_t)
     -> rd_kafka_resp_err_t;
}
extern "C" {
    pub fn rd_kafka_assignment(rk: *mut rd_kafka_t,
                               partitions:
                                   *mut *mut rd_kafka_topic_partition_list_t)
     -> rd_kafka_resp_err_t;
}
extern "C" {
    pub fn rd_kafka_commit(rk: *mut rd_kafka_t,
                           offsets: *const rd_kafka_topic_partition_list_t,
                           async: ::std::os::raw::c_int)
     -> rd_kafka_resp_err_t;
}
extern "C" {
    pub fn rd_kafka_commit_message(rk: *mut rd_kafka_t,
                                   rkmessage: *const rd_kafka_message_t,
                                   async: ::std::os::raw::c_int)
     -> rd_kafka_resp_err_t;
}
extern "C" {
    pub fn rd_kafka_commit_queue(rk: *mut rd_kafka_t,
                                 offsets:
                                     *const rd_kafka_topic_partition_list_t,
                                 rkqu: *mut rd_kafka_queue_t,
                                 cb:
                                     ::std::option::Option<unsafe extern "C" fn(rk:
                                                                                    *mut rd_kafka_t,
                                                                                err:
                                                                                    rd_kafka_resp_err_t,
                                                                                offsets:
                                                                                    *mut rd_kafka_topic_partition_list_t,
                                                                                opaque:
                                                                                    *mut ::std::os::raw::c_void)>,
                                 opaque: *mut ::std::os::raw::c_void)
     -> rd_kafka_resp_err_t;
}
extern "C" {
    pub fn rd_kafka_committed(rk: *mut rd_kafka_t,
                              partitions:
                                  *mut rd_kafka_topic_partition_list_t,
                              timeout_ms: ::std::os::raw::c_int)
     -> rd_kafka_resp_err_t;
}
extern "C" {
    pub fn rd_kafka_position(rk: *mut rd_kafka_t,
                             partitions: *mut rd_kafka_topic_partition_list_t)
     -> rd_kafka_resp_err_t;
}
extern "C" {
    pub fn rd_kafka_produce(rkt: *mut rd_kafka_topic_t, partition: i32,
                            msgflags: ::std::os::raw::c_int,
                            payload: *mut ::std::os::raw::c_void, len: usize,
                            key: *const ::std::os::raw::c_void, keylen: usize,
                            msg_opaque: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rd_kafka_producev(rk: *mut rd_kafka_t, ...) -> rd_kafka_resp_err_t;
}
extern "C" {
    pub fn rd_kafka_produce_batch(rkt: *mut rd_kafka_topic_t, partition: i32,
                                  msgflags: ::std::os::raw::c_int,
                                  rkmessages: *mut rd_kafka_message_t,
                                  message_cnt: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rd_kafka_flush(rk: *mut rd_kafka_t,
                          timeout_ms: ::std::os::raw::c_int)
     -> rd_kafka_resp_err_t;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct rd_kafka_metadata_broker {
    pub id: i32,
    pub host: *mut ::std::os::raw::c_char,
    pub port: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_rd_kafka_metadata_broker() {
    assert_eq!(::std::mem::size_of::<rd_kafka_metadata_broker>() , 24usize ,
               concat ! (
               "Size of: " , stringify ! ( rd_kafka_metadata_broker ) ));
    assert_eq! (::std::mem::align_of::<rd_kafka_metadata_broker>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( rd_kafka_metadata_broker ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rd_kafka_metadata_broker ) ) . id as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                rd_kafka_metadata_broker ) , "::" , stringify ! ( id ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rd_kafka_metadata_broker ) ) . host as *
                const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                rd_kafka_metadata_broker ) , "::" , stringify ! ( host ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rd_kafka_metadata_broker ) ) . port as *
                const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! (
                rd_kafka_metadata_broker ) , "::" , stringify ! ( port ) ));
}
impl Clone for rd_kafka_metadata_broker {
    fn clone(&self) -> Self { *self }
}
pub type rd_kafka_metadata_broker_t = rd_kafka_metadata_broker;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct rd_kafka_metadata_partition {
    pub id: i32,
    pub err: rd_kafka_resp_err_t,
    pub leader: i32,
    pub replica_cnt: ::std::os::raw::c_int,
    pub replicas: *mut i32,
    pub isr_cnt: ::std::os::raw::c_int,
    pub isrs: *mut i32,
}
#[test]
fn bindgen_test_layout_rd_kafka_metadata_partition() {
    assert_eq!(::std::mem::size_of::<rd_kafka_metadata_partition>() , 40usize
               , concat ! (
               "Size of: " , stringify ! ( rd_kafka_metadata_partition ) ));
    assert_eq! (::std::mem::align_of::<rd_kafka_metadata_partition>() , 8usize
                , concat ! (
                "Alignment of " , stringify ! ( rd_kafka_metadata_partition )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rd_kafka_metadata_partition ) ) . id as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                rd_kafka_metadata_partition ) , "::" , stringify ! ( id ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rd_kafka_metadata_partition ) ) . err as
                * const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! (
                rd_kafka_metadata_partition ) , "::" , stringify ! ( err ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rd_kafka_metadata_partition ) ) . leader
                as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                rd_kafka_metadata_partition ) , "::" , stringify ! ( leader )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rd_kafka_metadata_partition ) ) .
                replica_cnt as * const _ as usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! (
                rd_kafka_metadata_partition ) , "::" , stringify ! (
                replica_cnt ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rd_kafka_metadata_partition ) ) .
                replicas as * const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! (
                rd_kafka_metadata_partition ) , "::" , stringify ! ( replicas
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rd_kafka_metadata_partition ) ) . isr_cnt
                as * const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! (
                rd_kafka_metadata_partition ) , "::" , stringify ! ( isr_cnt )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rd_kafka_metadata_partition ) ) . isrs as
                * const _ as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! (
                rd_kafka_metadata_partition ) , "::" , stringify ! ( isrs )
                ));
}
impl Clone for rd_kafka_metadata_partition {
    fn clone(&self) -> Self { *self }
}
pub type rd_kafka_metadata_partition_t = rd_kafka_metadata_partition;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct rd_kafka_metadata_topic {
    pub topic: *mut ::std::os::raw::c_char,
    pub partition_cnt: ::std::os::raw::c_int,
    pub partitions: *mut rd_kafka_metadata_partition,
    pub err: rd_kafka_resp_err_t,
}
#[test]
fn bindgen_test_layout_rd_kafka_metadata_topic() {
    assert_eq!(::std::mem::size_of::<rd_kafka_metadata_topic>() , 32usize ,
               concat ! (
               "Size of: " , stringify ! ( rd_kafka_metadata_topic ) ));
    assert_eq! (::std::mem::align_of::<rd_kafka_metadata_topic>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( rd_kafka_metadata_topic ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rd_kafka_metadata_topic ) ) . topic as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( rd_kafka_metadata_topic
                ) , "::" , stringify ! ( topic ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rd_kafka_metadata_topic ) ) .
                partition_cnt as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( rd_kafka_metadata_topic
                ) , "::" , stringify ! ( partition_cnt ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rd_kafka_metadata_topic ) ) . partitions
                as * const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( rd_kafka_metadata_topic
                ) , "::" , stringify ! ( partitions ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rd_kafka_metadata_topic ) ) . err as *
                const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( rd_kafka_metadata_topic
                ) , "::" , stringify ! ( err ) ));
}
impl Clone for rd_kafka_metadata_topic {
    fn clone(&self) -> Self { *self }
}
pub type rd_kafka_metadata_topic_t = rd_kafka_metadata_topic;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct rd_kafka_metadata {
    pub broker_cnt: ::std::os::raw::c_int,
    pub brokers: *mut rd_kafka_metadata_broker,
    pub topic_cnt: ::std::os::raw::c_int,
    pub topics: *mut rd_kafka_metadata_topic,
    pub orig_broker_id: i32,
    pub orig_broker_name: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_rd_kafka_metadata() {
    assert_eq!(::std::mem::size_of::<rd_kafka_metadata>() , 48usize , concat !
               ( "Size of: " , stringify ! ( rd_kafka_metadata ) ));
    assert_eq! (::std::mem::align_of::<rd_kafka_metadata>() , 8usize , concat
                ! ( "Alignment of " , stringify ! ( rd_kafka_metadata ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rd_kafka_metadata ) ) . broker_cnt as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( rd_kafka_metadata ) ,
                "::" , stringify ! ( broker_cnt ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rd_kafka_metadata ) ) . brokers as *
                const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( rd_kafka_metadata ) ,
                "::" , stringify ! ( brokers ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rd_kafka_metadata ) ) . topic_cnt as *
                const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( rd_kafka_metadata ) ,
                "::" , stringify ! ( topic_cnt ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rd_kafka_metadata ) ) . topics as * const
                _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( rd_kafka_metadata ) ,
                "::" , stringify ! ( topics ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rd_kafka_metadata ) ) . orig_broker_id as
                * const _ as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( rd_kafka_metadata ) ,
                "::" , stringify ! ( orig_broker_id ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rd_kafka_metadata ) ) . orig_broker_name
                as * const _ as usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( rd_kafka_metadata ) ,
                "::" , stringify ! ( orig_broker_name ) ));
}
impl Clone for rd_kafka_metadata {
    fn clone(&self) -> Self { *self }
}
pub type rd_kafka_metadata_t = rd_kafka_metadata;
extern "C" {
    pub fn rd_kafka_metadata(rk: *mut rd_kafka_t,
                             all_topics: ::std::os::raw::c_int,
                             only_rkt: *mut rd_kafka_topic_t,
                             metadatap: *mut *const rd_kafka_metadata,
                             timeout_ms: ::std::os::raw::c_int)
     -> rd_kafka_resp_err_t;
}
extern "C" {
    pub fn rd_kafka_metadata_destroy(metadata: *const rd_kafka_metadata);
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct rd_kafka_group_member_info {
    pub member_id: *mut ::std::os::raw::c_char,
    pub client_id: *mut ::std::os::raw::c_char,
    pub client_host: *mut ::std::os::raw::c_char,
    pub member_metadata: *mut ::std::os::raw::c_void,
    pub member_metadata_size: ::std::os::raw::c_int,
    pub member_assignment: *mut ::std::os::raw::c_void,
    pub member_assignment_size: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_rd_kafka_group_member_info() {
    assert_eq!(::std::mem::size_of::<rd_kafka_group_member_info>() , 56usize ,
               concat ! (
               "Size of: " , stringify ! ( rd_kafka_group_member_info ) ));
    assert_eq! (::std::mem::align_of::<rd_kafka_group_member_info>() , 8usize
                , concat ! (
                "Alignment of " , stringify ! ( rd_kafka_group_member_info )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rd_kafka_group_member_info ) ) .
                member_id as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                rd_kafka_group_member_info ) , "::" , stringify ! ( member_id
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rd_kafka_group_member_info ) ) .
                client_id as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                rd_kafka_group_member_info ) , "::" , stringify ! ( client_id
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rd_kafka_group_member_info ) ) .
                client_host as * const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! (
                rd_kafka_group_member_info ) , "::" , stringify ! (
                client_host ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rd_kafka_group_member_info ) ) .
                member_metadata as * const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! (
                rd_kafka_group_member_info ) , "::" , stringify ! (
                member_metadata ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rd_kafka_group_member_info ) ) .
                member_metadata_size as * const _ as usize } , 32usize ,
                concat ! (
                "Alignment of field: " , stringify ! (
                rd_kafka_group_member_info ) , "::" , stringify ! (
                member_metadata_size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rd_kafka_group_member_info ) ) .
                member_assignment as * const _ as usize } , 40usize , concat !
                (
                "Alignment of field: " , stringify ! (
                rd_kafka_group_member_info ) , "::" , stringify ! (
                member_assignment ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rd_kafka_group_member_info ) ) .
                member_assignment_size as * const _ as usize } , 48usize ,
                concat ! (
                "Alignment of field: " , stringify ! (
                rd_kafka_group_member_info ) , "::" , stringify ! (
                member_assignment_size ) ));
}
impl Clone for rd_kafka_group_member_info {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct rd_kafka_group_info {
    pub broker: rd_kafka_metadata_broker,
    pub group: *mut ::std::os::raw::c_char,
    pub err: rd_kafka_resp_err_t,
    pub state: *mut ::std::os::raw::c_char,
    pub protocol_type: *mut ::std::os::raw::c_char,
    pub protocol: *mut ::std::os::raw::c_char,
    pub members: *mut rd_kafka_group_member_info,
    pub member_cnt: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_rd_kafka_group_info() {
    assert_eq!(::std::mem::size_of::<rd_kafka_group_info>() , 80usize , concat
               ! ( "Size of: " , stringify ! ( rd_kafka_group_info ) ));
    assert_eq! (::std::mem::align_of::<rd_kafka_group_info>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( rd_kafka_group_info ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rd_kafka_group_info ) ) . broker as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( rd_kafka_group_info ) ,
                "::" , stringify ! ( broker ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rd_kafka_group_info ) ) . group as *
                const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( rd_kafka_group_info ) ,
                "::" , stringify ! ( group ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rd_kafka_group_info ) ) . err as * const
                _ as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( rd_kafka_group_info ) ,
                "::" , stringify ! ( err ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rd_kafka_group_info ) ) . state as *
                const _ as usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( rd_kafka_group_info ) ,
                "::" , stringify ! ( state ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rd_kafka_group_info ) ) . protocol_type
                as * const _ as usize } , 48usize , concat ! (
                "Alignment of field: " , stringify ! ( rd_kafka_group_info ) ,
                "::" , stringify ! ( protocol_type ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rd_kafka_group_info ) ) . protocol as *
                const _ as usize } , 56usize , concat ! (
                "Alignment of field: " , stringify ! ( rd_kafka_group_info ) ,
                "::" , stringify ! ( protocol ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rd_kafka_group_info ) ) . members as *
                const _ as usize } , 64usize , concat ! (
                "Alignment of field: " , stringify ! ( rd_kafka_group_info ) ,
                "::" , stringify ! ( members ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rd_kafka_group_info ) ) . member_cnt as *
                const _ as usize } , 72usize , concat ! (
                "Alignment of field: " , stringify ! ( rd_kafka_group_info ) ,
                "::" , stringify ! ( member_cnt ) ));
}
impl Clone for rd_kafka_group_info {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct rd_kafka_group_list {
    pub groups: *mut rd_kafka_group_info,
    pub group_cnt: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_rd_kafka_group_list() {
    assert_eq!(::std::mem::size_of::<rd_kafka_group_list>() , 16usize , concat
               ! ( "Size of: " , stringify ! ( rd_kafka_group_list ) ));
    assert_eq! (::std::mem::align_of::<rd_kafka_group_list>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( rd_kafka_group_list ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rd_kafka_group_list ) ) . groups as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( rd_kafka_group_list ) ,
                "::" , stringify ! ( groups ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rd_kafka_group_list ) ) . group_cnt as *
                const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( rd_kafka_group_list ) ,
                "::" , stringify ! ( group_cnt ) ));
}
impl Clone for rd_kafka_group_list {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn rd_kafka_list_groups(rk: *mut rd_kafka_t,
                                group: *const ::std::os::raw::c_char,
                                grplistp: *mut *const rd_kafka_group_list,
                                timeout_ms: ::std::os::raw::c_int)
     -> rd_kafka_resp_err_t;
}
extern "C" {
    pub fn rd_kafka_group_list_destroy(grplist: *const rd_kafka_group_list);
}
extern "C" {
    pub fn rd_kafka_brokers_add(rk: *mut rd_kafka_t,
                                brokerlist: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rd_kafka_set_logger(rk: *mut rd_kafka_t,
                               func:
                                   ::std::option::Option<unsafe extern "C" fn(rk:
                                                                                  *const rd_kafka_t,
                                                                              level:
                                                                                  ::std::os::raw::c_int,
                                                                              fac:
                                                                                  *const ::std::os::raw::c_char,
                                                                              buf:
                                                                                  *const ::std::os::raw::c_char)>);
}
extern "C" {
    pub fn rd_kafka_set_log_level(rk: *mut rd_kafka_t,
                                  level: ::std::os::raw::c_int);
}
extern "C" {
    pub fn rd_kafka_log_print(rk: *const rd_kafka_t,
                              level: ::std::os::raw::c_int,
                              fac: *const ::std::os::raw::c_char,
                              buf: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn rd_kafka_log_syslog(rk: *const rd_kafka_t,
                               level: ::std::os::raw::c_int,
                               fac: *const ::std::os::raw::c_char,
                               buf: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn rd_kafka_outq_len(rk: *mut rd_kafka_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rd_kafka_dump(fp: *mut FILE, rk: *mut rd_kafka_t);
}
extern "C" {
    pub fn rd_kafka_thread_cnt() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rd_kafka_wait_destroyed(timeout_ms: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rd_kafka_unittest() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rd_kafka_poll_set_consumer(rk: *mut rd_kafka_t)
     -> rd_kafka_resp_err_t;
}
pub type rd_kafka_event_type_t = ::std::os::raw::c_int;
extern "C" {
    pub fn rd_kafka_event_type(rkev: *const rd_kafka_event_t)
     -> rd_kafka_event_type_t;
}
extern "C" {
    pub fn rd_kafka_event_name(rkev: *const rd_kafka_event_t)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn rd_kafka_event_destroy(rkev: *mut rd_kafka_event_t);
}
extern "C" {
    pub fn rd_kafka_event_message_next(rkev: *mut rd_kafka_event_t)
     -> *const rd_kafka_message_t;
}
extern "C" {
    pub fn rd_kafka_event_message_array(rkev: *mut rd_kafka_event_t,
                                        rkmessages:
                                            *mut *const rd_kafka_message_t,
                                        size: usize) -> usize;
}
extern "C" {
    pub fn rd_kafka_event_message_count(rkev: *mut rd_kafka_event_t) -> usize;
}
extern "C" {
    pub fn rd_kafka_event_error(rkev: *mut rd_kafka_event_t)
     -> rd_kafka_resp_err_t;
}
extern "C" {
    pub fn rd_kafka_event_error_string(rkev: *mut rd_kafka_event_t)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn rd_kafka_event_opaque(rkev: *mut rd_kafka_event_t)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn rd_kafka_event_log(rkev: *mut rd_kafka_event_t,
                              fac: *mut *const ::std::os::raw::c_char,
                              str: *mut *const ::std::os::raw::c_char,
                              level: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rd_kafka_event_stats(rkev: *mut rd_kafka_event_t)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn rd_kafka_event_topic_partition_list(rkev: *mut rd_kafka_event_t)
     -> *mut rd_kafka_topic_partition_list_t;
}
extern "C" {
    pub fn rd_kafka_event_topic_partition(rkev: *mut rd_kafka_event_t)
     -> *mut rd_kafka_topic_partition_t;
}
pub type rd_kafka_CreateTopics_result_t = rd_kafka_event_t;
pub type rd_kafka_DeleteTopics_result_t = rd_kafka_event_t;
pub type rd_kafka_CreatePartitions_result_t = rd_kafka_event_t;
pub type rd_kafka_AlterConfigs_result_t = rd_kafka_event_t;
pub type rd_kafka_DescribeConfigs_result_t = rd_kafka_event_t;
extern "C" {
    pub fn rd_kafka_event_CreateTopics_result(rkev: *mut rd_kafka_event_t)
     -> *const rd_kafka_CreateTopics_result_t;
}
extern "C" {
    pub fn rd_kafka_event_DeleteTopics_result(rkev: *mut rd_kafka_event_t)
     -> *const rd_kafka_DeleteTopics_result_t;
}
extern "C" {
    pub fn rd_kafka_event_CreatePartitions_result(rkev: *mut rd_kafka_event_t)
     -> *const rd_kafka_CreatePartitions_result_t;
}
extern "C" {
    pub fn rd_kafka_event_AlterConfigs_result(rkev: *mut rd_kafka_event_t)
     -> *const rd_kafka_AlterConfigs_result_t;
}
extern "C" {
    pub fn rd_kafka_event_DescribeConfigs_result(rkev: *mut rd_kafka_event_t)
     -> *const rd_kafka_DescribeConfigs_result_t;
}
extern "C" {
    pub fn rd_kafka_queue_poll(rkqu: *mut rd_kafka_queue_t,
                               timeout_ms: ::std::os::raw::c_int)
     -> *mut rd_kafka_event_t;
}
extern "C" {
    pub fn rd_kafka_queue_poll_callback(rkqu: *mut rd_kafka_queue_t,
                                        timeout_ms: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
pub type rd_kafka_plugin_f_conf_init_t =
    ::std::option::Option<unsafe extern "C" fn(conf: *mut rd_kafka_conf_t,
                                               plug_opaquep:
                                                   *mut *mut ::std::os::raw::c_void,
                                               errstr:
                                                   *mut ::std::os::raw::c_char,
                                               errstr_size: usize)
                              -> rd_kafka_resp_err_t>;
pub type rd_kafka_interceptor_f_on_conf_set_t =
    ::std::option::Option<unsafe extern "C" fn(conf: *mut rd_kafka_conf_t,
                                               name:
                                                   *const ::std::os::raw::c_char,
                                               val:
                                                   *const ::std::os::raw::c_char,
                                               errstr:
                                                   *mut ::std::os::raw::c_char,
                                               errstr_size: usize,
                                               ic_opaque:
                                                   *mut ::std::os::raw::c_void)
                              -> rd_kafka_conf_res_t>;
pub type rd_kafka_interceptor_f_on_conf_dup_t =
    ::std::option::Option<unsafe extern "C" fn(new_conf: *mut rd_kafka_conf_t,
                                               old_conf:
                                                   *const rd_kafka_conf_t,
                                               filter_cnt: usize,
                                               filter:
                                                   *mut *const ::std::os::raw::c_char,
                                               ic_opaque:
                                                   *mut ::std::os::raw::c_void)
                              -> rd_kafka_resp_err_t>;
pub type rd_kafka_interceptor_f_on_conf_destroy_t =
    ::std::option::Option<unsafe extern "C" fn(ic_opaque:
                                                   *mut ::std::os::raw::c_void)
                              -> rd_kafka_resp_err_t>;
pub type rd_kafka_interceptor_f_on_new_t =
    ::std::option::Option<unsafe extern "C" fn(rk: *mut rd_kafka_t,
                                               conf: *const rd_kafka_conf_t,
                                               ic_opaque:
                                                   *mut ::std::os::raw::c_void,
                                               errstr:
                                                   *mut ::std::os::raw::c_char,
                                               errstr_size: usize)
                              -> rd_kafka_resp_err_t>;
pub type rd_kafka_interceptor_f_on_destroy_t =
    ::std::option::Option<unsafe extern "C" fn(rk: *mut rd_kafka_t,
                                               ic_opaque:
                                                   *mut ::std::os::raw::c_void)
                              -> rd_kafka_resp_err_t>;
pub type rd_kafka_interceptor_f_on_send_t =
    ::std::option::Option<unsafe extern "C" fn(rk: *mut rd_kafka_t,
                                               rkmessage:
                                                   *mut rd_kafka_message_t,
                                               ic_opaque:
                                                   *mut ::std::os::raw::c_void)
                              -> rd_kafka_resp_err_t>;
pub type rd_kafka_interceptor_f_on_acknowledgement_t =
    ::std::option::Option<unsafe extern "C" fn(rk: *mut rd_kafka_t,
                                               rkmessage:
                                                   *mut rd_kafka_message_t,
                                               ic_opaque:
                                                   *mut ::std::os::raw::c_void)
                              -> rd_kafka_resp_err_t>;
pub type rd_kafka_interceptor_f_on_consume_t =
    ::std::option::Option<unsafe extern "C" fn(rk: *mut rd_kafka_t,
                                               rkmessage:
                                                   *mut rd_kafka_message_t,
                                               ic_opaque:
                                                   *mut ::std::os::raw::c_void)
                              -> rd_kafka_resp_err_t>;
pub type rd_kafka_interceptor_f_on_commit_t =
    ::std::option::Option<unsafe extern "C" fn(rk: *mut rd_kafka_t,
                                               offsets:
                                                   *const rd_kafka_topic_partition_list_t,
                                               err: rd_kafka_resp_err_t,
                                               ic_opaque:
                                                   *mut ::std::os::raw::c_void)
                              -> rd_kafka_resp_err_t>;
pub type rd_kafka_interceptor_f_on_request_sent_t =
    ::std::option::Option<unsafe extern "C" fn(rk: *mut rd_kafka_t,
                                               sockfd: ::std::os::raw::c_int,
                                               brokername:
                                                   *const ::std::os::raw::c_char,
                                               brokerid: i32, ApiKey: i16,
                                               ApiVersion: i16, CorrId: i32,
                                               size: usize,
                                               ic_opaque:
                                                   *mut ::std::os::raw::c_void)
                              -> rd_kafka_resp_err_t>;
extern "C" {
    pub fn rd_kafka_conf_interceptor_add_on_conf_set(conf:
                                                         *mut rd_kafka_conf_t,
                                                     ic_name:
                                                         *const ::std::os::raw::c_char,
                                                     on_conf_set:
                                                         rd_kafka_interceptor_f_on_conf_set_t,
                                                     ic_opaque:
                                                         *mut ::std::os::raw::c_void)
     -> rd_kafka_resp_err_t;
}
extern "C" {
    pub fn rd_kafka_conf_interceptor_add_on_conf_dup(conf:
                                                         *mut rd_kafka_conf_t,
                                                     ic_name:
                                                         *const ::std::os::raw::c_char,
                                                     on_conf_dup:
                                                         rd_kafka_interceptor_f_on_conf_dup_t,
                                                     ic_opaque:
                                                         *mut ::std::os::raw::c_void)
     -> rd_kafka_resp_err_t;
}
extern "C" {
    pub fn rd_kafka_conf_interceptor_add_on_conf_destroy(conf:
                                                             *mut rd_kafka_conf_t,
                                                         ic_name:
                                                             *const ::std::os::raw::c_char,
                                                         on_conf_destroy:
                                                             rd_kafka_interceptor_f_on_conf_destroy_t,
                                                         ic_opaque:
                                                             *mut ::std::os::raw::c_void)
     -> rd_kafka_resp_err_t;
}
extern "C" {
    pub fn rd_kafka_conf_interceptor_add_on_new(conf: *mut rd_kafka_conf_t,
                                                ic_name:
                                                    *const ::std::os::raw::c_char,
                                                on_new:
                                                    rd_kafka_interceptor_f_on_new_t,
                                                ic_opaque:
                                                    *mut ::std::os::raw::c_void)
     -> rd_kafka_resp_err_t;
}
extern "C" {
    pub fn rd_kafka_interceptor_add_on_destroy(rk: *mut rd_kafka_t,
                                               ic_name:
                                                   *const ::std::os::raw::c_char,
                                               on_destroy:
                                                   rd_kafka_interceptor_f_on_destroy_t,
                                               ic_opaque:
                                                   *mut ::std::os::raw::c_void)
     -> rd_kafka_resp_err_t;
}
extern "C" {
    pub fn rd_kafka_interceptor_add_on_send(rk: *mut rd_kafka_t,
                                            ic_name:
                                                *const ::std::os::raw::c_char,
                                            on_send:
                                                rd_kafka_interceptor_f_on_send_t,
                                            ic_opaque:
                                                *mut ::std::os::raw::c_void)
     -> rd_kafka_resp_err_t;
}
extern "C" {
    pub fn rd_kafka_interceptor_add_on_acknowledgement(rk: *mut rd_kafka_t,
                                                       ic_name:
                                                           *const ::std::os::raw::c_char,
                                                       on_acknowledgement:
                                                           rd_kafka_interceptor_f_on_acknowledgement_t,
                                                       ic_opaque:
                                                           *mut ::std::os::raw::c_void)
     -> rd_kafka_resp_err_t;
}
extern "C" {
    pub fn rd_kafka_interceptor_add_on_consume(rk: *mut rd_kafka_t,
                                               ic_name:
                                                   *const ::std::os::raw::c_char,
                                               on_consume:
                                                   rd_kafka_interceptor_f_on_consume_t,
                                               ic_opaque:
                                                   *mut ::std::os::raw::c_void)
     -> rd_kafka_resp_err_t;
}
extern "C" {
    pub fn rd_kafka_interceptor_add_on_commit(rk: *mut rd_kafka_t,
                                              ic_name:
                                                  *const ::std::os::raw::c_char,
                                              on_commit:
                                                  rd_kafka_interceptor_f_on_commit_t,
                                              ic_opaque:
                                                  *mut ::std::os::raw::c_void)
     -> rd_kafka_resp_err_t;
}
extern "C" {
    pub fn rd_kafka_interceptor_add_on_request_sent(rk: *mut rd_kafka_t,
                                                    ic_name:
                                                        *const ::std::os::raw::c_char,
                                                    on_request_sent:
                                                        rd_kafka_interceptor_f_on_request_sent_t,
                                                    ic_opaque:
                                                        *mut ::std::os::raw::c_void)
     -> rd_kafka_resp_err_t;
}
extern "C" {
    pub fn rd_kafka_topic_result_error(topicres:
                                           *const rd_kafka_topic_result_t)
     -> rd_kafka_resp_err_t;
}
extern "C" {
    pub fn rd_kafka_topic_result_error_string(topicres:
                                                  *const rd_kafka_topic_result_t)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn rd_kafka_topic_result_name(topicres:
                                          *const rd_kafka_topic_result_t)
     -> *const ::std::os::raw::c_char;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum rd_kafka_admin_op_t {
    RD_KAFKA_ADMIN_OP_ANY = 0,
    RD_KAFKA_ADMIN_OP_CREATETOPICS = 1,
    RD_KAFKA_ADMIN_OP_DELETETOPICS = 2,
    RD_KAFKA_ADMIN_OP_CREATEPARTITIONS = 3,
    RD_KAFKA_ADMIN_OP_ALTERCONFIGS = 4,
    RD_KAFKA_ADMIN_OP_DESCRIBECONFIGS = 5,
    RD_KAFKA_ADMIN_OP__CNT = 6,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rd_kafka_AdminOptions_s {
    _unused: [u8; 0],
}
pub type rd_kafka_AdminOptions_t = rd_kafka_AdminOptions_s;
extern "C" {
    pub fn rd_kafka_AdminOptions_new(rk: *mut rd_kafka_t,
                                     for_api: rd_kafka_admin_op_t)
     -> *mut rd_kafka_AdminOptions_t;
}
extern "C" {
    pub fn rd_kafka_AdminOptions_destroy(options:
                                             *mut rd_kafka_AdminOptions_t);
}
extern "C" {
    pub fn rd_kafka_AdminOptions_set_request_timeout(options:
                                                         *mut rd_kafka_AdminOptions_t,
                                                     timeout_ms:
                                                         ::std::os::raw::c_int,
                                                     errstr:
                                                         *mut ::std::os::raw::c_char,
                                                     errstr_size: usize)
     -> rd_kafka_resp_err_t;
}
extern "C" {
    pub fn rd_kafka_AdminOptions_set_operation_timeout(options:
                                                           *mut rd_kafka_AdminOptions_t,
                                                       timeout_ms:
                                                           ::std::os::raw::c_int,
                                                       errstr:
                                                           *mut ::std::os::raw::c_char,
                                                       errstr_size: usize)
     -> rd_kafka_resp_err_t;
}
extern "C" {
    pub fn rd_kafka_AdminOptions_set_validate_only(options:
                                                       *mut rd_kafka_AdminOptions_t,
                                                   true_or_false:
                                                       ::std::os::raw::c_int,
                                                   errstr:
                                                       *mut ::std::os::raw::c_char,
                                                   errstr_size: usize)
     -> rd_kafka_resp_err_t;
}
extern "C" {
    pub fn rd_kafka_AdminOptions_set_broker(options:
                                                *mut rd_kafka_AdminOptions_t,
                                            broker_id: i32,
                                            errstr:
                                                *mut ::std::os::raw::c_char,
                                            errstr_size: usize)
     -> rd_kafka_resp_err_t;
}
extern "C" {
    pub fn rd_kafka_AdminOptions_set_opaque(options:
                                                *mut rd_kafka_AdminOptions_t,
                                            opaque:
                                                *mut ::std::os::raw::c_void);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rd_kafka_NewTopic_s {
    _unused: [u8; 0],
}
pub type rd_kafka_NewTopic_t = rd_kafka_NewTopic_s;
extern "C" {
    pub fn rd_kafka_NewTopic_new(topic: *const ::std::os::raw::c_char,
                                 num_partitions: ::std::os::raw::c_int,
                                 replication_factor: ::std::os::raw::c_int,
                                 errstr: *mut ::std::os::raw::c_char,
                                 errstr_size: usize)
     -> *mut rd_kafka_NewTopic_t;
}
extern "C" {
    pub fn rd_kafka_NewTopic_destroy(new_topic: *mut rd_kafka_NewTopic_t);
}
extern "C" {
    pub fn rd_kafka_NewTopic_destroy_array(new_topics:
                                               *mut *mut rd_kafka_NewTopic_t,
                                           new_topic_cnt: usize);
}
extern "C" {
    pub fn rd_kafka_NewTopic_set_replica_assignment(new_topic:
                                                        *mut rd_kafka_NewTopic_t,
                                                    partition: i32,
                                                    broker_ids: *mut i32,
                                                    broker_id_cnt: usize,
                                                    errstr:
                                                        *mut ::std::os::raw::c_char,
                                                    errstr_size: usize)
     -> rd_kafka_resp_err_t;
}
extern "C" {
    pub fn rd_kafka_NewTopic_set_config(new_topic: *mut rd_kafka_NewTopic_t,
                                        name: *const ::std::os::raw::c_char,
                                        value: *const ::std::os::raw::c_char)
     -> rd_kafka_resp_err_t;
}
extern "C" {
    pub fn rd_kafka_CreateTopics(rk: *mut rd_kafka_t,
                                 new_topics: *mut *mut rd_kafka_NewTopic_t,
                                 new_topic_cnt: usize,
                                 options: *const rd_kafka_AdminOptions_t,
                                 rkqu: *mut rd_kafka_queue_t);
}
extern "C" {
    pub fn rd_kafka_CreateTopics_result_topics(result:
                                                   *const rd_kafka_CreateTopics_result_t,
                                               cntp: *mut usize)
     -> *mut *const rd_kafka_topic_result_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rd_kafka_DeleteTopic_s {
    _unused: [u8; 0],
}
pub type rd_kafka_DeleteTopic_t = rd_kafka_DeleteTopic_s;
extern "C" {
    pub fn rd_kafka_DeleteTopic_new(topic: *const ::std::os::raw::c_char)
     -> *mut rd_kafka_DeleteTopic_t;
}
extern "C" {
    pub fn rd_kafka_DeleteTopic_destroy(del_topic:
                                            *mut rd_kafka_DeleteTopic_t);
}
extern "C" {
    pub fn rd_kafka_DeleteTopic_destroy_array(del_topics:
                                                  *mut *mut rd_kafka_DeleteTopic_t,
                                              del_topic_cnt: usize);
}
extern "C" {
    pub fn rd_kafka_DeleteTopics(rk: *mut rd_kafka_t,
                                 del_topics: *mut *mut rd_kafka_DeleteTopic_t,
                                 del_topic_cnt: usize,
                                 options: *const rd_kafka_AdminOptions_t,
                                 rkqu: *mut rd_kafka_queue_t);
}
extern "C" {
    pub fn rd_kafka_DeleteTopics_result_topics(result:
                                                   *const rd_kafka_DeleteTopics_result_t,
                                               cntp: *mut usize)
     -> *mut *const rd_kafka_topic_result_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rd_kafka_NewPartitions_s {
    _unused: [u8; 0],
}
pub type rd_kafka_NewPartitions_t = rd_kafka_NewPartitions_s;
extern "C" {
    pub fn rd_kafka_NewPartitions_new(topic: *const ::std::os::raw::c_char,
                                      new_total_cnt: usize,
                                      errstr: *mut ::std::os::raw::c_char,
                                      errstr_size: usize)
     -> *mut rd_kafka_NewPartitions_t;
}
extern "C" {
    pub fn rd_kafka_NewPartitions_destroy(new_parts:
                                              *mut rd_kafka_NewPartitions_t);
}
extern "C" {
    pub fn rd_kafka_NewPartitions_destroy_array(new_parts:
                                                    *mut *mut rd_kafka_NewPartitions_t,
                                                new_parts_cnt: usize);
}
extern "C" {
    pub fn rd_kafka_NewPartitions_set_replica_assignment(new_parts:
                                                             *mut rd_kafka_NewPartitions_t,
                                                         new_partition_idx:
                                                             i32,
                                                         broker_ids: *mut i32,
                                                         broker_id_cnt: usize,
                                                         errstr:
                                                             *mut ::std::os::raw::c_char,
                                                         errstr_size: usize)
     -> rd_kafka_resp_err_t;
}
extern "C" {
    pub fn rd_kafka_CreatePartitions(rk: *mut rd_kafka_t,
                                     new_parts:
                                         *mut *mut rd_kafka_NewPartitions_t,
                                     new_parts_cnt: usize,
                                     options: *const rd_kafka_AdminOptions_t,
                                     rkqu: *mut rd_kafka_queue_t);
}
extern "C" {
    pub fn rd_kafka_CreatePartitions_result_topics(result:
                                                       *const rd_kafka_CreatePartitions_result_t,
                                                   cntp: *mut usize)
     -> *mut *const rd_kafka_topic_result_t;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum rd_kafka_ConfigSource_t {
    RD_KAFKA_CONFIG_SOURCE_UNKNOWN_CONFIG = 0,
    RD_KAFKA_CONFIG_SOURCE_DYNAMIC_TOPIC_CONFIG = 1,
    RD_KAFKA_CONFIG_SOURCE_DYNAMIC_BROKER_CONFIG = 2,
    RD_KAFKA_CONFIG_SOURCE_DYNAMIC_DEFAULT_BROKER_CONFIG = 3,
    RD_KAFKA_CONFIG_SOURCE_STATIC_BROKER_CONFIG = 4,
    RD_KAFKA_CONFIG_SOURCE_DEFAULT_CONFIG = 5,
    RD_KAFKA_CONFIG_SOURCE__CNT = 6,
}
extern "C" {
    pub fn rd_kafka_ConfigSource_name(confsource: rd_kafka_ConfigSource_t)
     -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rd_kafka_ConfigEntry_s {
    _unused: [u8; 0],
}
pub type rd_kafka_ConfigEntry_t = rd_kafka_ConfigEntry_s;
extern "C" {
    pub fn rd_kafka_ConfigEntry_name(entry: *const rd_kafka_ConfigEntry_t)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn rd_kafka_ConfigEntry_value(entry: *const rd_kafka_ConfigEntry_t)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn rd_kafka_ConfigEntry_source(entry: *const rd_kafka_ConfigEntry_t)
     -> rd_kafka_ConfigSource_t;
}
extern "C" {
    pub fn rd_kafka_ConfigEntry_is_read_only(entry:
                                                 *const rd_kafka_ConfigEntry_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rd_kafka_ConfigEntry_is_default(entry:
                                               *const rd_kafka_ConfigEntry_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rd_kafka_ConfigEntry_is_sensitive(entry:
                                                 *const rd_kafka_ConfigEntry_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rd_kafka_ConfigEntry_is_synonym(entry:
                                               *const rd_kafka_ConfigEntry_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rd_kafka_ConfigEntry_synonyms(entry: *const rd_kafka_ConfigEntry_t,
                                         cntp: *mut usize)
     -> *mut *const rd_kafka_ConfigEntry_t;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum rd_kafka_ResourceType_t {
    RD_KAFKA_RESOURCE_UNKNOWN = 0,
    RD_KAFKA_RESOURCE_ANY = 1,
    RD_KAFKA_RESOURCE_TOPIC = 2,
    RD_KAFKA_RESOURCE_GROUP = 3,
    RD_KAFKA_RESOURCE_BROKER = 4,
    RD_KAFKA_RESOURCE__CNT = 5,
}
extern "C" {
    pub fn rd_kafka_ResourceType_name(restype: rd_kafka_ResourceType_t)
     -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rd_kafka_ConfigResource_s {
    _unused: [u8; 0],
}
pub type rd_kafka_ConfigResource_t = rd_kafka_ConfigResource_s;
extern "C" {
    pub fn rd_kafka_ConfigResource_new(restype: rd_kafka_ResourceType_t,
                                       resname: *const ::std::os::raw::c_char)
     -> *mut rd_kafka_ConfigResource_t;
}
extern "C" {
    pub fn rd_kafka_ConfigResource_destroy(config:
                                               *mut rd_kafka_ConfigResource_t);
}
extern "C" {
    pub fn rd_kafka_ConfigResource_destroy_array(config:
                                                     *mut *mut rd_kafka_ConfigResource_t,
                                                 config_cnt: usize);
}
extern "C" {
    pub fn rd_kafka_ConfigResource_set_config(config:
                                                  *mut rd_kafka_ConfigResource_t,
                                              name:
                                                  *const ::std::os::raw::c_char,
                                              value:
                                                  *const ::std::os::raw::c_char)
     -> rd_kafka_resp_err_t;
}
extern "C" {
    pub fn rd_kafka_ConfigResource_configs(config:
                                               *const rd_kafka_ConfigResource_t,
                                           cntp: *mut usize)
     -> *mut *const rd_kafka_ConfigEntry_t;
}
extern "C" {
    pub fn rd_kafka_ConfigResource_type(config:
                                            *const rd_kafka_ConfigResource_t)
     -> rd_kafka_ResourceType_t;
}
extern "C" {
    pub fn rd_kafka_ConfigResource_name(config:
                                            *const rd_kafka_ConfigResource_t)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn rd_kafka_ConfigResource_error(config:
                                             *const rd_kafka_ConfigResource_t)
     -> rd_kafka_resp_err_t;
}
extern "C" {
    pub fn rd_kafka_ConfigResource_error_string(config:
                                                    *const rd_kafka_ConfigResource_t)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn rd_kafka_AlterConfigs(rk: *mut rd_kafka_t,
                                 configs: *mut *mut rd_kafka_ConfigResource_t,
                                 config_cnt: usize,
                                 options: *const rd_kafka_AdminOptions_t,
                                 rkqu: *mut rd_kafka_queue_t);
}
extern "C" {
    pub fn rd_kafka_AlterConfigs_result_resources(result:
                                                      *const rd_kafka_AlterConfigs_result_t,
                                                  cntp: *mut usize)
     -> *mut *const rd_kafka_ConfigResource_t;
}
extern "C" {
    pub fn rd_kafka_DescribeConfigs(rk: *mut rd_kafka_t,
                                    configs:
                                        *mut *mut rd_kafka_ConfigResource_t,
                                    config_cnt: usize,
                                    options: *const rd_kafka_AdminOptions_t,
                                    rkqu: *mut rd_kafka_queue_t);
}
extern "C" {
    pub fn rd_kafka_DescribeConfigs_result_resources(result:
                                                         *const rd_kafka_DescribeConfigs_result_t,
                                                     cntp: *mut usize)
     -> *mut *const rd_kafka_ConfigResource_t;
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(::std::mem::size_of::<__va_list_tag>() , 24usize , concat ! (
               "Size of: " , stringify ! ( __va_list_tag ) ));
    assert_eq! (::std::mem::align_of::<__va_list_tag>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( __va_list_tag ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __va_list_tag ) ) . gp_offset as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( __va_list_tag ) , "::"
                , stringify ! ( gp_offset ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __va_list_tag ) ) . fp_offset as * const
                _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( __va_list_tag ) , "::"
                , stringify ! ( fp_offset ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __va_list_tag ) ) . overflow_arg_area as
                * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( __va_list_tag ) , "::"
                , stringify ! ( overflow_arg_area ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __va_list_tag ) ) . reg_save_area as *
                const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( __va_list_tag ) , "::"
                , stringify ! ( reg_save_area ) ));
}
impl Clone for __va_list_tag {
    fn clone(&self) -> Self { *self }
}
