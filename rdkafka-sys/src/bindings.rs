/* automatically generated by rust-bindgen */

#![allow(dead_code,
         non_camel_case_types,
         non_upper_case_globals,
         non_snake_case)]
pub const __llvm__: ::std::os::raw::c_uchar = 1;
pub const __clang__: ::std::os::raw::c_uchar = 1;
pub const __clang_major__: ::std::os::raw::c_uchar = 3;
pub const __clang_minor__: ::std::os::raw::c_uchar = 6;
pub const __clang_patchlevel__: ::std::os::raw::c_uchar = 0;
pub const __GNUC_MINOR__: ::std::os::raw::c_uchar = 2;
pub const __GNUC_PATCHLEVEL__: ::std::os::raw::c_uchar = 1;
pub const __GNUC__: ::std::os::raw::c_uchar = 4;
pub const __GXX_ABI_VERSION: ::std::os::raw::c_ushort = 1002;
pub const __ATOMIC_RELAXED: ::std::os::raw::c_uchar = 0;
pub const __ATOMIC_CONSUME: ::std::os::raw::c_uchar = 1;
pub const __ATOMIC_ACQUIRE: ::std::os::raw::c_uchar = 2;
pub const __ATOMIC_RELEASE: ::std::os::raw::c_uchar = 3;
pub const __ATOMIC_ACQ_REL: ::std::os::raw::c_uchar = 4;
pub const __ATOMIC_SEQ_CST: ::std::os::raw::c_uchar = 5;
pub const __PRAGMA_REDEFINE_EXTNAME: ::std::os::raw::c_uchar = 1;
pub const __CONSTANT_CFSTRINGS__: ::std::os::raw::c_uchar = 1;
pub const __GXX_RTTI: ::std::os::raw::c_uchar = 1;
pub const __ORDER_LITTLE_ENDIAN__: ::std::os::raw::c_ushort = 1234;
pub const __ORDER_BIG_ENDIAN__: ::std::os::raw::c_ushort = 4321;
pub const __ORDER_PDP_ENDIAN__: ::std::os::raw::c_ushort = 3412;
pub const __BYTE_ORDER__: ::std::os::raw::c_ushort = 1234;
pub const __LITTLE_ENDIAN__: ::std::os::raw::c_uchar = 1;
pub const _LP64: ::std::os::raw::c_uchar = 1;
pub const __LP64__: ::std::os::raw::c_uchar = 1;
pub const __CHAR_BIT__: ::std::os::raw::c_uchar = 8;
pub const __SCHAR_MAX__: ::std::os::raw::c_uchar = 127;
pub const __SHRT_MAX__: ::std::os::raw::c_ushort = 32767;
pub const __INT_MAX__: ::std::os::raw::c_uint = 2147483647;
pub const __LONG_MAX__: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const __LONG_LONG_MAX__: ::std::os::raw::c_ulonglong =
    9223372036854775807;
pub const __WCHAR_MAX__: ::std::os::raw::c_uint = 2147483647;
pub const __INTMAX_MAX__: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const __SIZE_MAX__: ::std::os::raw::c_char = -1;
pub const __UINTMAX_MAX__: ::std::os::raw::c_char = -1;
pub const __PTRDIFF_MAX__: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const __INTPTR_MAX__: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const __UINTPTR_MAX__: ::std::os::raw::c_char = -1;
pub const __SIZEOF_DOUBLE__: ::std::os::raw::c_uchar = 8;
pub const __SIZEOF_FLOAT__: ::std::os::raw::c_uchar = 4;
pub const __SIZEOF_INT__: ::std::os::raw::c_uchar = 4;
pub const __SIZEOF_LONG__: ::std::os::raw::c_uchar = 8;
pub const __SIZEOF_LONG_DOUBLE__: ::std::os::raw::c_uchar = 16;
pub const __SIZEOF_LONG_LONG__: ::std::os::raw::c_uchar = 8;
pub const __SIZEOF_POINTER__: ::std::os::raw::c_uchar = 8;
pub const __SIZEOF_SHORT__: ::std::os::raw::c_uchar = 2;
pub const __SIZEOF_PTRDIFF_T__: ::std::os::raw::c_uchar = 8;
pub const __SIZEOF_SIZE_T__: ::std::os::raw::c_uchar = 8;
pub const __SIZEOF_WCHAR_T__: ::std::os::raw::c_uchar = 4;
pub const __SIZEOF_WINT_T__: ::std::os::raw::c_uchar = 4;
pub const __SIZEOF_INT128__: ::std::os::raw::c_uchar = 16;
pub const __INTMAX_WIDTH__: ::std::os::raw::c_uchar = 64;
pub const __PTRDIFF_WIDTH__: ::std::os::raw::c_uchar = 64;
pub const __INTPTR_WIDTH__: ::std::os::raw::c_uchar = 64;
pub const __SIZE_WIDTH__: ::std::os::raw::c_uchar = 64;
pub const __WCHAR_WIDTH__: ::std::os::raw::c_uchar = 32;
pub const __WINT_WIDTH__: ::std::os::raw::c_uchar = 32;
pub const __SIG_ATOMIC_WIDTH__: ::std::os::raw::c_uchar = 32;
pub const __SIG_ATOMIC_MAX__: ::std::os::raw::c_uint = 2147483647;
pub const __UINTMAX_WIDTH__: ::std::os::raw::c_uchar = 64;
pub const __UINTPTR_WIDTH__: ::std::os::raw::c_uchar = 64;
pub const __FLT_HAS_DENORM__: ::std::os::raw::c_uchar = 1;
pub const __FLT_DIG__: ::std::os::raw::c_uchar = 6;
pub const __FLT_HAS_INFINITY__: ::std::os::raw::c_uchar = 1;
pub const __FLT_HAS_QUIET_NAN__: ::std::os::raw::c_uchar = 1;
pub const __FLT_MANT_DIG__: ::std::os::raw::c_uchar = 24;
pub const __FLT_MAX_10_EXP__: ::std::os::raw::c_uchar = 38;
pub const __FLT_MAX_EXP__: ::std::os::raw::c_uchar = 128;
pub const __FLT_MIN_10_EXP__: ::std::os::raw::c_char = -37;
pub const __FLT_MIN_EXP__: ::std::os::raw::c_char = -125;
pub const __DBL_HAS_DENORM__: ::std::os::raw::c_uchar = 1;
pub const __DBL_DIG__: ::std::os::raw::c_uchar = 15;
pub const __DBL_HAS_INFINITY__: ::std::os::raw::c_uchar = 1;
pub const __DBL_HAS_QUIET_NAN__: ::std::os::raw::c_uchar = 1;
pub const __DBL_MANT_DIG__: ::std::os::raw::c_uchar = 53;
pub const __DBL_MAX_10_EXP__: ::std::os::raw::c_ushort = 308;
pub const __DBL_MAX_EXP__: ::std::os::raw::c_ushort = 1024;
pub const __DBL_MIN_10_EXP__: ::std::os::raw::c_short = -307;
pub const __DBL_MIN_EXP__: ::std::os::raw::c_short = -1021;
pub const __LDBL_HAS_DENORM__: ::std::os::raw::c_uchar = 1;
pub const __LDBL_DIG__: ::std::os::raw::c_uchar = 18;
pub const __LDBL_HAS_INFINITY__: ::std::os::raw::c_uchar = 1;
pub const __LDBL_HAS_QUIET_NAN__: ::std::os::raw::c_uchar = 1;
pub const __LDBL_MANT_DIG__: ::std::os::raw::c_uchar = 64;
pub const __LDBL_MAX_10_EXP__: ::std::os::raw::c_ushort = 4932;
pub const __LDBL_MAX_EXP__: ::std::os::raw::c_ushort = 16384;
pub const __LDBL_MIN_10_EXP__: ::std::os::raw::c_short = -4931;
pub const __LDBL_MIN_EXP__: ::std::os::raw::c_short = -16381;
pub const __POINTER_WIDTH__: ::std::os::raw::c_uchar = 64;
pub const __WINT_UNSIGNED__: ::std::os::raw::c_uchar = 1;
pub const __UINT8_MAX__: ::std::os::raw::c_uchar = 255;
pub const __INT8_MAX__: ::std::os::raw::c_uchar = 127;
pub const __UINT16_MAX__: ::std::os::raw::c_ushort = 65535;
pub const __INT16_MAX__: ::std::os::raw::c_ushort = 32767;
pub const __UINT32_MAX__: ::std::os::raw::c_uint = 4294967295;
pub const __INT32_MAX__: ::std::os::raw::c_uint = 2147483647;
pub const __UINT64_MAX__: ::std::os::raw::c_char = -1;
pub const __INT64_MAX__: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const __INT_LEAST8_MAX__: ::std::os::raw::c_uchar = 127;
pub const __UINT_LEAST8_MAX__: ::std::os::raw::c_uchar = 255;
pub const __INT_LEAST16_MAX__: ::std::os::raw::c_ushort = 32767;
pub const __UINT_LEAST16_MAX__: ::std::os::raw::c_ushort = 65535;
pub const __INT_LEAST32_MAX__: ::std::os::raw::c_uint = 2147483647;
pub const __UINT_LEAST32_MAX__: ::std::os::raw::c_uint = 4294967295;
pub const __INT_LEAST64_MAX__: ::std::os::raw::c_ulonglong =
    9223372036854775807;
pub const __UINT_LEAST64_MAX__: ::std::os::raw::c_char = -1;
pub const __INT_FAST8_MAX__: ::std::os::raw::c_uchar = 127;
pub const __UINT_FAST8_MAX__: ::std::os::raw::c_uchar = 255;
pub const __INT_FAST16_MAX__: ::std::os::raw::c_ushort = 32767;
pub const __UINT_FAST16_MAX__: ::std::os::raw::c_ushort = 65535;
pub const __INT_FAST32_MAX__: ::std::os::raw::c_uint = 2147483647;
pub const __UINT_FAST32_MAX__: ::std::os::raw::c_uint = 4294967295;
pub const __INT_FAST64_MAX__: ::std::os::raw::c_ulonglong =
    9223372036854775807;
pub const __UINT_FAST64_MAX__: ::std::os::raw::c_char = -1;
pub const __FINITE_MATH_ONLY__: ::std::os::raw::c_uchar = 0;
pub const __GNUC_STDC_INLINE__: ::std::os::raw::c_uchar = 1;
pub const __GCC_ATOMIC_TEST_AND_SET_TRUEVAL: ::std::os::raw::c_uchar = 1;
pub const __GCC_ATOMIC_BOOL_LOCK_FREE: ::std::os::raw::c_uchar = 2;
pub const __GCC_ATOMIC_CHAR_LOCK_FREE: ::std::os::raw::c_uchar = 2;
pub const __GCC_ATOMIC_CHAR16_T_LOCK_FREE: ::std::os::raw::c_uchar = 2;
pub const __GCC_ATOMIC_CHAR32_T_LOCK_FREE: ::std::os::raw::c_uchar = 2;
pub const __GCC_ATOMIC_WCHAR_T_LOCK_FREE: ::std::os::raw::c_uchar = 2;
pub const __GCC_ATOMIC_SHORT_LOCK_FREE: ::std::os::raw::c_uchar = 2;
pub const __GCC_ATOMIC_INT_LOCK_FREE: ::std::os::raw::c_uchar = 2;
pub const __GCC_ATOMIC_LONG_LOCK_FREE: ::std::os::raw::c_uchar = 2;
pub const __GCC_ATOMIC_LLONG_LOCK_FREE: ::std::os::raw::c_uchar = 2;
pub const __GCC_ATOMIC_POINTER_LOCK_FREE: ::std::os::raw::c_uchar = 2;
pub const __NO_INLINE__: ::std::os::raw::c_uchar = 1;
pub const __FLT_EVAL_METHOD__: ::std::os::raw::c_uchar = 0;
pub const __FLT_RADIX__: ::std::os::raw::c_uchar = 2;
pub const __DECIMAL_DIG__: ::std::os::raw::c_uchar = 21;
pub const __amd64__: ::std::os::raw::c_uchar = 1;
pub const __amd64: ::std::os::raw::c_uchar = 1;
pub const __x86_64: ::std::os::raw::c_uchar = 1;
pub const __x86_64__: ::std::os::raw::c_uchar = 1;
pub const __k8: ::std::os::raw::c_uchar = 1;
pub const __k8__: ::std::os::raw::c_uchar = 1;
pub const __tune_k8__: ::std::os::raw::c_uchar = 1;
pub const __NO_MATH_INLINES: ::std::os::raw::c_uchar = 1;
pub const __SSE2__: ::std::os::raw::c_uchar = 1;
pub const __SSE2_MATH__: ::std::os::raw::c_uchar = 1;
pub const __SSE__: ::std::os::raw::c_uchar = 1;
pub const __SSE_MATH__: ::std::os::raw::c_uchar = 1;
pub const __MMX__: ::std::os::raw::c_uchar = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1: ::std::os::raw::c_uchar = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2: ::std::os::raw::c_uchar = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4: ::std::os::raw::c_uchar = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_8: ::std::os::raw::c_uchar = 1;
pub const unix: ::std::os::raw::c_uchar = 1;
pub const __unix: ::std::os::raw::c_uchar = 1;
pub const __unix__: ::std::os::raw::c_uchar = 1;
pub const linux: ::std::os::raw::c_uchar = 1;
pub const __linux: ::std::os::raw::c_uchar = 1;
pub const __linux__: ::std::os::raw::c_uchar = 1;
pub const __gnu_linux__: ::std::os::raw::c_uchar = 1;
pub const __ELF__: ::std::os::raw::c_uchar = 1;
pub const __STDC__: ::std::os::raw::c_uchar = 1;
pub const __STDC_HOSTED__: ::std::os::raw::c_uchar = 1;
pub const __STDC_VERSION__: ::std::os::raw::c_uint = 201112;
pub const __STDC_UTF_16__: ::std::os::raw::c_uchar = 1;
pub const __STDC_UTF_32__: ::std::os::raw::c_uchar = 1;
pub const _STDIO_H: ::std::os::raw::c_uchar = 1;
pub const _FEATURES_H: ::std::os::raw::c_uchar = 1;
pub const _DEFAULT_SOURCE: ::std::os::raw::c_uchar = 1;
pub const __USE_ISOC11: ::std::os::raw::c_uchar = 1;
pub const __USE_ISOC99: ::std::os::raw::c_uchar = 1;
pub const __USE_ISOC95: ::std::os::raw::c_uchar = 1;
pub const __USE_POSIX_IMPLICITLY: ::std::os::raw::c_uchar = 1;
pub const _POSIX_SOURCE: ::std::os::raw::c_uchar = 1;
pub const _POSIX_C_SOURCE: ::std::os::raw::c_uint = 200809;
pub const __USE_POSIX: ::std::os::raw::c_uchar = 1;
pub const __USE_POSIX2: ::std::os::raw::c_uchar = 1;
pub const __USE_POSIX199309: ::std::os::raw::c_uchar = 1;
pub const __USE_POSIX199506: ::std::os::raw::c_uchar = 1;
pub const __USE_XOPEN2K: ::std::os::raw::c_uchar = 1;
pub const __USE_XOPEN2K8: ::std::os::raw::c_uchar = 1;
pub const _ATFILE_SOURCE: ::std::os::raw::c_uchar = 1;
pub const __USE_MISC: ::std::os::raw::c_uchar = 1;
pub const __USE_ATFILE: ::std::os::raw::c_uchar = 1;
pub const __USE_FORTIFY_LEVEL: ::std::os::raw::c_uchar = 0;
pub const _STDC_PREDEF_H: ::std::os::raw::c_uchar = 1;
pub const __STDC_IEC_559__: ::std::os::raw::c_uchar = 1;
pub const __STDC_IEC_559_COMPLEX__: ::std::os::raw::c_uchar = 1;
pub const __STDC_ISO_10646__: ::std::os::raw::c_uint = 201103;
pub const __STDC_NO_THREADS__: ::std::os::raw::c_uchar = 1;
pub const __GNU_LIBRARY__: ::std::os::raw::c_uchar = 6;
pub const __GLIBC__: ::std::os::raw::c_uchar = 2;
pub const __GLIBC_MINOR__: ::std::os::raw::c_uchar = 21;
pub const _SYS_CDEFS_H: ::std::os::raw::c_uchar = 1;
pub const __WORDSIZE: ::std::os::raw::c_uchar = 64;
pub const __WORDSIZE_TIME64_COMPAT32: ::std::os::raw::c_uchar = 1;
pub const __SYSCALL_WORDSIZE: ::std::os::raw::c_uchar = 64;
pub const _BITS_TYPES_H: ::std::os::raw::c_uchar = 1;
pub const _BITS_TYPESIZES_H: ::std::os::raw::c_uchar = 1;
pub const __OFF_T_MATCHES_OFF64_T: ::std::os::raw::c_uchar = 1;
pub const __INO_T_MATCHES_INO64_T: ::std::os::raw::c_uchar = 1;
pub const __FD_SETSIZE: ::std::os::raw::c_ushort = 1024;
pub const __FILE_defined: ::std::os::raw::c_uchar = 1;
pub const ____FILE_defined: ::std::os::raw::c_uchar = 1;
pub const _G_config_h: ::std::os::raw::c_uchar = 1;
pub const ____mbstate_t_defined: ::std::os::raw::c_uchar = 1;
pub const _G_HAVE_MMAP: ::std::os::raw::c_uchar = 1;
pub const _G_HAVE_MREMAP: ::std::os::raw::c_uchar = 1;
pub const _G_IO_IO_FILE_VERSION: ::std::os::raw::c_uint = 131073;
pub const _G_BUFSIZ: ::std::os::raw::c_ushort = 8192;
pub const _IO_BUFSIZ: ::std::os::raw::c_ushort = 8192;
pub const _IO_UNIFIED_JUMPTABLES: ::std::os::raw::c_uchar = 1;
pub const EOF: ::std::os::raw::c_char = -1;
pub const _IOS_INPUT: ::std::os::raw::c_uchar = 1;
pub const _IOS_OUTPUT: ::std::os::raw::c_uchar = 2;
pub const _IOS_ATEND: ::std::os::raw::c_uchar = 4;
pub const _IOS_APPEND: ::std::os::raw::c_uchar = 8;
pub const _IOS_TRUNC: ::std::os::raw::c_uchar = 16;
pub const _IOS_NOCREATE: ::std::os::raw::c_uchar = 32;
pub const _IOS_NOREPLACE: ::std::os::raw::c_uchar = 64;
pub const _IOS_BIN: ::std::os::raw::c_uchar = 128;
pub const _IO_MAGIC: ::std::os::raw::c_uint = 4222418944;
pub const _OLD_STDIO_MAGIC: ::std::os::raw::c_uint = 4206624768;
pub const _IO_MAGIC_MASK: ::std::os::raw::c_uint = 4294901760;
pub const _IO_USER_BUF: ::std::os::raw::c_uchar = 1;
pub const _IO_UNBUFFERED: ::std::os::raw::c_uchar = 2;
pub const _IO_NO_READS: ::std::os::raw::c_uchar = 4;
pub const _IO_NO_WRITES: ::std::os::raw::c_uchar = 8;
pub const _IO_EOF_SEEN: ::std::os::raw::c_uchar = 16;
pub const _IO_ERR_SEEN: ::std::os::raw::c_uchar = 32;
pub const _IO_DELETE_DONT_CLOSE: ::std::os::raw::c_uchar = 64;
pub const _IO_LINKED: ::std::os::raw::c_uchar = 128;
pub const _IO_IN_BACKUP: ::std::os::raw::c_ushort = 256;
pub const _IO_LINE_BUF: ::std::os::raw::c_ushort = 512;
pub const _IO_TIED_PUT_GET: ::std::os::raw::c_ushort = 1024;
pub const _IO_CURRENTLY_PUTTING: ::std::os::raw::c_ushort = 2048;
pub const _IO_IS_APPENDING: ::std::os::raw::c_ushort = 4096;
pub const _IO_IS_FILEBUF: ::std::os::raw::c_ushort = 8192;
pub const _IO_BAD_SEEN: ::std::os::raw::c_ushort = 16384;
pub const _IO_USER_LOCK: ::std::os::raw::c_ushort = 32768;
pub const _IO_FLAGS2_MMAP: ::std::os::raw::c_uchar = 1;
pub const _IO_FLAGS2_NOTCANCEL: ::std::os::raw::c_uchar = 2;
pub const _IO_FLAGS2_USER_WBUF: ::std::os::raw::c_uchar = 8;
pub const _IO_SKIPWS: ::std::os::raw::c_uchar = 1;
pub const _IO_LEFT: ::std::os::raw::c_uchar = 2;
pub const _IO_RIGHT: ::std::os::raw::c_uchar = 4;
pub const _IO_INTERNAL: ::std::os::raw::c_uchar = 8;
pub const _IO_DEC: ::std::os::raw::c_uchar = 16;
pub const _IO_OCT: ::std::os::raw::c_uchar = 32;
pub const _IO_HEX: ::std::os::raw::c_uchar = 64;
pub const _IO_SHOWBASE: ::std::os::raw::c_uchar = 128;
pub const _IO_SHOWPOINT: ::std::os::raw::c_ushort = 256;
pub const _IO_UPPERCASE: ::std::os::raw::c_ushort = 512;
pub const _IO_SHOWPOS: ::std::os::raw::c_ushort = 1024;
pub const _IO_SCIENTIFIC: ::std::os::raw::c_ushort = 2048;
pub const _IO_FIXED: ::std::os::raw::c_ushort = 4096;
pub const _IO_UNITBUF: ::std::os::raw::c_ushort = 8192;
pub const _IO_STDIO: ::std::os::raw::c_ushort = 16384;
pub const _IO_DONT_CLOSE: ::std::os::raw::c_ushort = 32768;
pub const _IO_BOOLALPHA: ::std::os::raw::c_uint = 65536;
pub const _IOFBF: ::std::os::raw::c_uchar = 0;
pub const _IOLBF: ::std::os::raw::c_uchar = 1;
pub const _IONBF: ::std::os::raw::c_uchar = 2;
pub const BUFSIZ: ::std::os::raw::c_ushort = 8192;
pub const SEEK_SET: ::std::os::raw::c_uchar = 0;
pub const SEEK_CUR: ::std::os::raw::c_uchar = 1;
pub const SEEK_END: ::std::os::raw::c_uchar = 2;
pub const L_tmpnam: ::std::os::raw::c_uchar = 20;
pub const TMP_MAX: ::std::os::raw::c_uint = 238328;
pub const FILENAME_MAX: ::std::os::raw::c_ushort = 4096;
pub const L_ctermid: ::std::os::raw::c_uchar = 9;
pub const FOPEN_MAX: ::std::os::raw::c_uchar = 16;
pub const _INTTYPES_H: ::std::os::raw::c_uchar = 1;
pub const _STDINT_H: ::std::os::raw::c_uchar = 1;
pub const _BITS_WCHAR_H: ::std::os::raw::c_uchar = 1;
pub const __WCHAR_MAX: ::std::os::raw::c_uint = 2147483647;
pub const __WCHAR_MIN: ::std::os::raw::c_int = -2147483648;
pub const INT8_MIN: ::std::os::raw::c_char = -128;
pub const INT16_MIN: ::std::os::raw::c_short = -32768;
pub const INT32_MIN: ::std::os::raw::c_int = -2147483648;
pub const INT8_MAX: ::std::os::raw::c_uchar = 127;
pub const INT16_MAX: ::std::os::raw::c_ushort = 32767;
pub const INT32_MAX: ::std::os::raw::c_uint = 2147483647;
pub const UINT8_MAX: ::std::os::raw::c_uchar = 255;
pub const UINT16_MAX: ::std::os::raw::c_ushort = 65535;
pub const UINT32_MAX: ::std::os::raw::c_uint = 4294967295;
pub const INT_LEAST8_MIN: ::std::os::raw::c_char = -128;
pub const INT_LEAST16_MIN: ::std::os::raw::c_short = -32768;
pub const INT_LEAST32_MIN: ::std::os::raw::c_int = -2147483648;
pub const INT_LEAST8_MAX: ::std::os::raw::c_uchar = 127;
pub const INT_LEAST16_MAX: ::std::os::raw::c_ushort = 32767;
pub const INT_LEAST32_MAX: ::std::os::raw::c_uint = 2147483647;
pub const UINT_LEAST8_MAX: ::std::os::raw::c_uchar = 255;
pub const UINT_LEAST16_MAX: ::std::os::raw::c_ushort = 65535;
pub const UINT_LEAST32_MAX: ::std::os::raw::c_uint = 4294967295;
pub const INT_FAST8_MIN: ::std::os::raw::c_char = -128;
pub const INT_FAST16_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const INT_FAST32_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const INT_FAST8_MAX: ::std::os::raw::c_uchar = 127;
pub const INT_FAST16_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const INT_FAST32_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const UINT_FAST8_MAX: ::std::os::raw::c_uchar = 255;
pub const UINT_FAST16_MAX: ::std::os::raw::c_char = -1;
pub const UINT_FAST32_MAX: ::std::os::raw::c_char = -1;
pub const INTPTR_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const INTPTR_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const UINTPTR_MAX: ::std::os::raw::c_char = -1;
pub const PTRDIFF_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const PTRDIFF_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const SIG_ATOMIC_MIN: ::std::os::raw::c_int = -2147483648;
pub const SIG_ATOMIC_MAX: ::std::os::raw::c_uint = 2147483647;
pub const SIZE_MAX: ::std::os::raw::c_char = -1;
pub const WCHAR_MIN: ::std::os::raw::c_int = -2147483648;
pub const WCHAR_MAX: ::std::os::raw::c_uint = 2147483647;
pub const WINT_MIN: ::std::os::raw::c_uchar = 0;
pub const WINT_MAX: ::std::os::raw::c_uint = 4294967295;
pub const ____gwchar_t_defined: ::std::os::raw::c_uchar = 1;
pub const _SYS_TYPES_H: ::std::os::raw::c_uchar = 1;
pub const __clock_t_defined: ::std::os::raw::c_uchar = 1;
pub const __time_t_defined: ::std::os::raw::c_uchar = 1;
pub const __clockid_t_defined: ::std::os::raw::c_uchar = 1;
pub const __timer_t_defined: ::std::os::raw::c_uchar = 1;
pub const __BIT_TYPES_DEFINED__: ::std::os::raw::c_uchar = 1;
pub const _ENDIAN_H: ::std::os::raw::c_uchar = 1;
pub const __LITTLE_ENDIAN: ::std::os::raw::c_ushort = 1234;
pub const __BIG_ENDIAN: ::std::os::raw::c_ushort = 4321;
pub const __PDP_ENDIAN: ::std::os::raw::c_ushort = 3412;
pub const __BYTE_ORDER: ::std::os::raw::c_ushort = 1234;
pub const __FLOAT_WORD_ORDER: ::std::os::raw::c_ushort = 1234;
pub const LITTLE_ENDIAN: ::std::os::raw::c_ushort = 1234;
pub const BIG_ENDIAN: ::std::os::raw::c_ushort = 4321;
pub const PDP_ENDIAN: ::std::os::raw::c_ushort = 3412;
pub const BYTE_ORDER: ::std::os::raw::c_ushort = 1234;
pub const _BITS_BYTESWAP_H: ::std::os::raw::c_uchar = 1;
pub const _SYS_SELECT_H: ::std::os::raw::c_uchar = 1;
pub const _SIGSET_H_types: ::std::os::raw::c_uchar = 1;
pub const __timespec_defined: ::std::os::raw::c_uchar = 1;
pub const _STRUCT_TIMEVAL: ::std::os::raw::c_uchar = 1;
pub const FD_SETSIZE: ::std::os::raw::c_ushort = 1024;
pub const _SYS_SYSMACROS_H: ::std::os::raw::c_uchar = 1;
pub const _BITS_PTHREADTYPES_H: ::std::os::raw::c_uchar = 1;
pub const __SIZEOF_PTHREAD_ATTR_T: ::std::os::raw::c_uchar = 56;
pub const __SIZEOF_PTHREAD_MUTEX_T: ::std::os::raw::c_uchar = 40;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: ::std::os::raw::c_uchar = 4;
pub const __SIZEOF_PTHREAD_COND_T: ::std::os::raw::c_uchar = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: ::std::os::raw::c_uchar = 4;
pub const __SIZEOF_PTHREAD_RWLOCK_T: ::std::os::raw::c_uchar = 56;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: ::std::os::raw::c_uchar = 8;
pub const __SIZEOF_PTHREAD_BARRIER_T: ::std::os::raw::c_uchar = 32;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: ::std::os::raw::c_uchar = 4;
pub const __have_pthread_attr_t: ::std::os::raw::c_uchar = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: ::std::os::raw::c_uchar = 1;
pub const __PTHREAD_RWLOCK_INT_FLAGS_SHARED: ::std::os::raw::c_uchar = 1;
pub const RD_KAFKA_VERSION: ::std::os::raw::c_uint = 590591;
pub const RD_KAFKA_OFFSET_BEGINNING: ::std::os::raw::c_char = -2;
pub const RD_KAFKA_OFFSET_END: ::std::os::raw::c_char = -1;
pub const RD_KAFKA_OFFSET_STORED: ::std::os::raw::c_short = -1000;
pub const RD_KAFKA_OFFSET_INVALID: ::std::os::raw::c_short = -1001;
pub const RD_KAFKA_OFFSET_TAIL_BASE: ::std::os::raw::c_short = -2000;
pub const RD_KAFKA_MSG_F_FREE: ::std::os::raw::c_uchar = 1;
pub const RD_KAFKA_MSG_F_COPY: ::std::os::raw::c_uchar = 2;
pub const RD_KAFKA_MSG_F_BLOCK: ::std::os::raw::c_uchar = 4;
pub const RD_KAFKA_EVENT_NONE: ::std::os::raw::c_uchar = 0;
pub const RD_KAFKA_EVENT_DR: ::std::os::raw::c_uchar = 1;
pub const RD_KAFKA_EVENT_FETCH: ::std::os::raw::c_uchar = 2;
pub const RD_KAFKA_EVENT_LOG: ::std::os::raw::c_uchar = 4;
pub const RD_KAFKA_EVENT_ERROR: ::std::os::raw::c_uchar = 8;
pub const RD_KAFKA_EVENT_REBALANCE: ::std::os::raw::c_uchar = 16;
pub const RD_KAFKA_EVENT_OFFSET_COMMIT: ::std::os::raw::c_uchar = 32;
pub type size_t = usize;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_char;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
impl ::std::default::Default for __fsid_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __qaddr_t = *mut __quad_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type FILE = _IO_FILE;
pub type __FILE = _IO_FILE;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __mbstate_t {
    pub __count: ::std::os::raw::c_int,
    pub __value: Union_Unnamed1,
}
impl ::std::default::Default for __mbstate_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Union_Unnamed1 {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_Unnamed1 {
    pub unsafe fn __wch(&mut self) -> *mut ::std::os::raw::c_uint {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __wchb(&mut self) -> *mut [::std::os::raw::c_char; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Union_Unnamed1 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
impl ::std::default::Default for _G_fpos_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
impl ::std::default::Default for _G_fpos64_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __gnuc_va_list = __builtin_va_list;
pub enum _IO_jump_t { }
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _IO_marker {
    pub _next: *mut _IO_marker,
    pub _sbuf: *mut _IO_FILE,
    pub _pos: ::std::os::raw::c_int,
    _bindgen_padding_0_: [u8; 4usize],
}
impl ::std::default::Default for _IO_marker {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum __codecvt_result {
    __codecvt_ok = 0,
    __codecvt_partial = 1,
    __codecvt_error = 2,
    __codecvt_noconv = 3,
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_char,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub __pad1: *mut ::std::os::raw::c_void,
    pub __pad2: *mut ::std::os::raw::c_void,
    pub __pad3: *mut ::std::os::raw::c_void,
    pub __pad4: *mut ::std::os::raw::c_void,
    pub __pad5: size_t,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
impl ::std::default::Default for _IO_FILE {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub enum _IO_FILE_plus { }
pub type __io_read_fn =
    ::std::option::Option<unsafe extern "C" fn(__cookie:
                                                   *mut ::std::os::raw::c_void,
                                               __buf:
                                                   *mut ::std::os::raw::c_char,
                                               __nbytes: size_t)
                              -> __ssize_t>;
pub type __io_write_fn =
    ::std::option::Option<unsafe extern "C" fn(__cookie:
                                                   *mut ::std::os::raw::c_void,
                                               __buf:
                                                   *const ::std::os::raw::c_char,
                                               __n: size_t) -> __ssize_t>;
pub type __io_seek_fn =
    ::std::option::Option<unsafe extern "C" fn(__cookie:
                                                   *mut ::std::os::raw::c_void,
                                               __pos: *mut __off64_t,
                                               __w: ::std::os::raw::c_int)
                              -> ::std::os::raw::c_int>;
pub type __io_close_fn =
    ::std::option::Option<unsafe extern "C" fn(__cookie:
                                                   *mut ::std::os::raw::c_void)
                              -> ::std::os::raw::c_int>;
pub type va_list = __gnuc_va_list;
pub type off_t = __off_t;
pub type ssize_t = isize;
pub type fpos_t = _G_fpos_t;
pub type int8_t = i8;
pub type int16_t = i16;
pub type int32_t = i32;
pub type int64_t = i64;
pub type uint8_t = u8;
pub type uint16_t = u16;
pub type uint32_t = u32;
pub type uint64_t = u64;
pub type int_least8_t = ::std::os::raw::c_char;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_long;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulong;
pub type int_fast8_t = ::std::os::raw::c_char;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intptr_t = isize;
pub type uintptr_t = usize;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
pub type __gwchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct imaxdiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
impl ::std::default::Default for imaxdiv_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type time_t = __time_t;
pub type clockid_t = __clockid_t;
pub type timer_t = __timer_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint_ = ::std::os::raw::c_uint;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulong;
pub type register_t = ::std::os::raw::c_long;
pub type __sig_atomic_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
impl ::std::default::Default for __sigset_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
impl ::std::default::Default for timespec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
impl ::std::default::Default for timeval {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
impl ::std::default::Default for fd_set {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type fd_mask = __fd_mask;
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy)]
pub struct pthread_attr_t {
    pub _bindgen_data_: [u64; 7usize],
}
impl pthread_attr_t {
    pub unsafe fn __size(&mut self)
     -> *mut [::std::os::raw::c_char; 56usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for pthread_attr_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for pthread_attr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
impl ::std::default::Default for __pthread_internal_list {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Copy)]
pub struct pthread_mutex_t {
    pub _bindgen_data_: [u64; 5usize],
}
impl pthread_mutex_t {
    pub unsafe fn __data(&mut self) -> *mut __pthread_mutex_s {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __size(&mut self)
     -> *mut [::std::os::raw::c_char; 40usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for pthread_mutex_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for pthread_mutex_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
impl ::std::default::Default for __pthread_mutex_s {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct pthread_mutexattr_t {
    pub _bindgen_data_: [u32; 1usize],
}
impl pthread_mutexattr_t {
    pub unsafe fn __size(&mut self) -> *mut [::std::os::raw::c_char; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for pthread_mutexattr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct pthread_cond_t {
    pub _bindgen_data_: [u64; 6usize],
}
impl pthread_cond_t {
    pub unsafe fn __data(&mut self) -> *mut Struct_Unnamed2 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __size(&mut self)
     -> *mut [::std::os::raw::c_char; 48usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_longlong {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for pthread_cond_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for pthread_cond_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Struct_Unnamed2 {
    pub __lock: ::std::os::raw::c_int,
    pub __futex: ::std::os::raw::c_uint,
    pub __total_seq: ::std::os::raw::c_ulonglong,
    pub __wakeup_seq: ::std::os::raw::c_ulonglong,
    pub __woken_seq: ::std::os::raw::c_ulonglong,
    pub __mutex: *mut ::std::os::raw::c_void,
    pub __nwaiters: ::std::os::raw::c_uint,
    pub __broadcast_seq: ::std::os::raw::c_uint,
}
impl ::std::default::Default for Struct_Unnamed2 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct pthread_condattr_t {
    pub _bindgen_data_: [u32; 1usize],
}
impl pthread_condattr_t {
    pub unsafe fn __size(&mut self) -> *mut [::std::os::raw::c_char; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for pthread_condattr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct pthread_rwlock_t {
    pub _bindgen_data_: [u64; 7usize],
}
impl pthread_rwlock_t {
    pub unsafe fn __data(&mut self) -> *mut Struct_Unnamed3 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __size(&mut self)
     -> *mut [::std::os::raw::c_char; 56usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for pthread_rwlock_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for pthread_rwlock_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Struct_Unnamed3 {
    pub __lock: ::std::os::raw::c_int,
    pub __nr_readers: ::std::os::raw::c_uint,
    pub __readers_wakeup: ::std::os::raw::c_uint,
    pub __writer_wakeup: ::std::os::raw::c_uint,
    pub __nr_readers_queued: ::std::os::raw::c_uint,
    pub __nr_writers_queued: ::std::os::raw::c_uint,
    pub __writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_char,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
impl ::std::default::Default for Struct_Unnamed3 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct pthread_rwlockattr_t {
    pub _bindgen_data_: [u64; 1usize],
}
impl pthread_rwlockattr_t {
    pub unsafe fn __size(&mut self) -> *mut [::std::os::raw::c_char; 8usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for pthread_rwlockattr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct pthread_barrier_t {
    pub _bindgen_data_: [u64; 4usize],
}
impl pthread_barrier_t {
    pub unsafe fn __size(&mut self)
     -> *mut [::std::os::raw::c_char; 32usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for pthread_barrier_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct pthread_barrierattr_t {
    pub _bindgen_data_: [u32; 1usize],
}
impl pthread_barrierattr_t {
    pub unsafe fn __size(&mut self) -> *mut [::std::os::raw::c_char; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for pthread_barrierattr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum rd_kafka_type_t { RD_KAFKA_PRODUCER = 0, RD_KAFKA_CONSUMER = 1, }
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum rd_kafka_timestamp_type_t {
    RD_KAFKA_TIMESTAMP_NOT_AVAILABLE = 0,
    RD_KAFKA_TIMESTAMP_CREATE_TIME = 1,
    RD_KAFKA_TIMESTAMP_LOG_APPEND_TIME = 2,
}
pub enum rd_kafka_s { }
pub type rd_kafka_t = rd_kafka_s;
pub enum rd_kafka_topic_s { }
pub type rd_kafka_topic_t = rd_kafka_topic_s;
pub enum rd_kafka_conf_s { }
pub type rd_kafka_conf_t = rd_kafka_conf_s;
pub enum rd_kafka_topic_conf_s { }
pub type rd_kafka_topic_conf_t = rd_kafka_topic_conf_s;
pub enum rd_kafka_queue_s { }
pub type rd_kafka_queue_t = rd_kafka_queue_s;
#[derive(Copy, Clone)]
#[repr(i32)]
#[derive(Debug,PartialEq)]
pub enum rd_kafka_resp_err_t {
    RD_KAFKA_RESP_ERR__BEGIN = -200,
    RD_KAFKA_RESP_ERR__BAD_MSG = -199,
    RD_KAFKA_RESP_ERR__BAD_COMPRESSION = -198,
    RD_KAFKA_RESP_ERR__DESTROY = -197,
    RD_KAFKA_RESP_ERR__FAIL = -196,
    RD_KAFKA_RESP_ERR__TRANSPORT = -195,
    RD_KAFKA_RESP_ERR__CRIT_SYS_RESOURCE = -194,
    RD_KAFKA_RESP_ERR__RESOLVE = -193,
    RD_KAFKA_RESP_ERR__MSG_TIMED_OUT = -192,
    RD_KAFKA_RESP_ERR__PARTITION_EOF = -191,
    RD_KAFKA_RESP_ERR__UNKNOWN_PARTITION = -190,
    RD_KAFKA_RESP_ERR__FS = -189,
    RD_KAFKA_RESP_ERR__UNKNOWN_TOPIC = -188,
    RD_KAFKA_RESP_ERR__ALL_BROKERS_DOWN = -187,
    RD_KAFKA_RESP_ERR__INVALID_ARG = -186,
    RD_KAFKA_RESP_ERR__TIMED_OUT = -185,
    RD_KAFKA_RESP_ERR__QUEUE_FULL = -184,
    RD_KAFKA_RESP_ERR__ISR_INSUFF = -183,
    RD_KAFKA_RESP_ERR__NODE_UPDATE = -182,
    RD_KAFKA_RESP_ERR__SSL = -181,
    RD_KAFKA_RESP_ERR__WAIT_COORD = -180,
    RD_KAFKA_RESP_ERR__UNKNOWN_GROUP = -179,
    RD_KAFKA_RESP_ERR__IN_PROGRESS = -178,
    RD_KAFKA_RESP_ERR__PREV_IN_PROGRESS = -177,
    RD_KAFKA_RESP_ERR__EXISTING_SUBSCRIPTION = -176,
    RD_KAFKA_RESP_ERR__ASSIGN_PARTITIONS = -175,
    RD_KAFKA_RESP_ERR__REVOKE_PARTITIONS = -174,
    RD_KAFKA_RESP_ERR__CONFLICT = -173,
    RD_KAFKA_RESP_ERR__STATE = -172,
    RD_KAFKA_RESP_ERR__UNKNOWN_PROTOCOL = -171,
    RD_KAFKA_RESP_ERR__NOT_IMPLEMENTED = -170,
    RD_KAFKA_RESP_ERR__AUTHENTICATION = -169,
    RD_KAFKA_RESP_ERR__NO_OFFSET = -168,
    RD_KAFKA_RESP_ERR__OUTDATED = -167,
    RD_KAFKA_RESP_ERR__TIMED_OUT_QUEUE = -166,
    RD_KAFKA_RESP_ERR__END = -100,
    RD_KAFKA_RESP_ERR_UNKNOWN = -1,
    RD_KAFKA_RESP_ERR_NO_ERROR = 0,
    RD_KAFKA_RESP_ERR_OFFSET_OUT_OF_RANGE = 1,
    RD_KAFKA_RESP_ERR_INVALID_MSG = 2,
    RD_KAFKA_RESP_ERR_UNKNOWN_TOPIC_OR_PART = 3,
    RD_KAFKA_RESP_ERR_INVALID_MSG_SIZE = 4,
    RD_KAFKA_RESP_ERR_LEADER_NOT_AVAILABLE = 5,
    RD_KAFKA_RESP_ERR_NOT_LEADER_FOR_PARTITION = 6,
    RD_KAFKA_RESP_ERR_REQUEST_TIMED_OUT = 7,
    RD_KAFKA_RESP_ERR_BROKER_NOT_AVAILABLE = 8,
    RD_KAFKA_RESP_ERR_REPLICA_NOT_AVAILABLE = 9,
    RD_KAFKA_RESP_ERR_MSG_SIZE_TOO_LARGE = 10,
    RD_KAFKA_RESP_ERR_STALE_CTRL_EPOCH = 11,
    RD_KAFKA_RESP_ERR_OFFSET_METADATA_TOO_LARGE = 12,
    RD_KAFKA_RESP_ERR_NETWORK_EXCEPTION = 13,
    RD_KAFKA_RESP_ERR_GROUP_LOAD_IN_PROGRESS = 14,
    RD_KAFKA_RESP_ERR_GROUP_COORDINATOR_NOT_AVAILABLE = 15,
    RD_KAFKA_RESP_ERR_NOT_COORDINATOR_FOR_GROUP = 16,
    RD_KAFKA_RESP_ERR_TOPIC_EXCEPTION = 17,
    RD_KAFKA_RESP_ERR_RECORD_LIST_TOO_LARGE = 18,
    RD_KAFKA_RESP_ERR_NOT_ENOUGH_REPLICAS = 19,
    RD_KAFKA_RESP_ERR_NOT_ENOUGH_REPLICAS_AFTER_APPEND = 20,
    RD_KAFKA_RESP_ERR_INVALID_REQUIRED_ACKS = 21,
    RD_KAFKA_RESP_ERR_ILLEGAL_GENERATION = 22,
    RD_KAFKA_RESP_ERR_INCONSISTENT_GROUP_PROTOCOL = 23,
    RD_KAFKA_RESP_ERR_INVALID_GROUP_ID = 24,
    RD_KAFKA_RESP_ERR_UNKNOWN_MEMBER_ID = 25,
    RD_KAFKA_RESP_ERR_INVALID_SESSION_TIMEOUT = 26,
    RD_KAFKA_RESP_ERR_REBALANCE_IN_PROGRESS = 27,
    RD_KAFKA_RESP_ERR_INVALID_COMMIT_OFFSET_SIZE = 28,
    RD_KAFKA_RESP_ERR_TOPIC_AUTHORIZATION_FAILED = 29,
    RD_KAFKA_RESP_ERR_GROUP_AUTHORIZATION_FAILED = 30,
    RD_KAFKA_RESP_ERR_CLUSTER_AUTHORIZATION_FAILED = 31,
    RD_KAFKA_RESP_ERR_INVALID_TIMESTAMP = 32,
    RD_KAFKA_RESP_ERR_UNSUPPORTED_SASL_MECHANISM = 33,
    RD_KAFKA_RESP_ERR_ILLEGAL_SASL_STATE = 34,
    RD_KAFKA_RESP_ERR_UNSUPPORTED_VERSION = 35,
    RD_KAFKA_RESP_ERR_END_ALL = 36,
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct rd_kafka_err_desc {
    pub code: rd_kafka_resp_err_t,
    pub name: *const ::std::os::raw::c_char,
    pub desc: *const ::std::os::raw::c_char,
}
impl ::std::default::Default for rd_kafka_err_desc {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct rd_kafka_topic_partition_s {
    pub topic: *mut ::std::os::raw::c_char,
    pub partition: int32_t,
    pub offset: int64_t,
    pub metadata: *mut ::std::os::raw::c_void,
    pub metadata_size: size_t,
    pub opaque: *mut ::std::os::raw::c_void,
    pub err: rd_kafka_resp_err_t,
    pub _private: *mut ::std::os::raw::c_void,
}
impl ::std::default::Default for rd_kafka_topic_partition_s {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type rd_kafka_topic_partition_t = rd_kafka_topic_partition_s;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct rd_kafka_topic_partition_list_s {
    pub cnt: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub elems: *mut rd_kafka_topic_partition_t,
}
impl ::std::default::Default for rd_kafka_topic_partition_list_s {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type rd_kafka_topic_partition_list_t = rd_kafka_topic_partition_list_s;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct rd_kafka_message_s {
    pub err: rd_kafka_resp_err_t,
    pub rkt: *mut rd_kafka_topic_t,
    pub partition: int32_t,
    pub payload: *mut ::std::os::raw::c_void,
    pub len: size_t,
    pub key: *mut ::std::os::raw::c_void,
    pub key_len: size_t,
    pub offset: int64_t,
    pub _private: *mut ::std::os::raw::c_void,
}
impl ::std::default::Default for rd_kafka_message_s {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type rd_kafka_message_t = rd_kafka_message_s;
#[derive(Copy, Clone)]
#[repr(i32)]
#[derive(Debug)]
pub enum rd_kafka_conf_res_t {
    RD_KAFKA_CONF_UNKNOWN = -2,
    RD_KAFKA_CONF_INVALID = -1,
    RD_KAFKA_CONF_OK = 0,
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct rd_kafka_metadata_broker {
    pub id: int32_t,
    pub host: *mut ::std::os::raw::c_char,
    pub port: ::std::os::raw::c_int,
    _bindgen_padding_0_: [u8; 4usize],
}
impl ::std::default::Default for rd_kafka_metadata_broker {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type rd_kafka_metadata_broker_t = rd_kafka_metadata_broker;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct rd_kafka_metadata_partition {
    pub id: int32_t,
    pub err: rd_kafka_resp_err_t,
    pub leader: int32_t,
    pub replica_cnt: ::std::os::raw::c_int,
    pub replicas: *mut int32_t,
    pub isr_cnt: ::std::os::raw::c_int,
    pub isrs: *mut int32_t,
}
impl ::std::default::Default for rd_kafka_metadata_partition {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type rd_kafka_metadata_partition_t = rd_kafka_metadata_partition;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct rd_kafka_metadata_topic {
    pub topic: *mut ::std::os::raw::c_char,
    pub partition_cnt: ::std::os::raw::c_int,
    pub partitions: *mut rd_kafka_metadata_partition,
    pub err: rd_kafka_resp_err_t,
    _bindgen_padding_0_: [u8; 4usize],
}
impl ::std::default::Default for rd_kafka_metadata_topic {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type rd_kafka_metadata_topic_t = rd_kafka_metadata_topic;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct rd_kafka_metadata {
    pub broker_cnt: ::std::os::raw::c_int,
    pub brokers: *mut rd_kafka_metadata_broker,
    pub topic_cnt: ::std::os::raw::c_int,
    pub topics: *mut rd_kafka_metadata_topic,
    pub orig_broker_id: int32_t,
    pub orig_broker_name: *mut ::std::os::raw::c_char,
}
impl ::std::default::Default for rd_kafka_metadata {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type rd_kafka_metadata_t = rd_kafka_metadata;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct rd_kafka_group_member_info {
    pub member_id: *mut ::std::os::raw::c_char,
    pub client_id: *mut ::std::os::raw::c_char,
    pub client_host: *mut ::std::os::raw::c_char,
    pub member_metadata: *mut ::std::os::raw::c_void,
    pub member_metadata_size: ::std::os::raw::c_int,
    pub member_assignment: *mut ::std::os::raw::c_void,
    pub member_assignment_size: ::std::os::raw::c_int,
    _bindgen_padding_0_: [u8; 4usize],
}
impl ::std::default::Default for rd_kafka_group_member_info {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct rd_kafka_group_info {
    pub broker: rd_kafka_metadata_broker,
    pub group: *mut ::std::os::raw::c_char,
    pub err: rd_kafka_resp_err_t,
    pub state: *mut ::std::os::raw::c_char,
    pub protocol_type: *mut ::std::os::raw::c_char,
    pub protocol: *mut ::std::os::raw::c_char,
    pub members: *mut rd_kafka_group_member_info,
    pub member_cnt: ::std::os::raw::c_int,
    _bindgen_padding_0_: [u8; 4usize],
}
impl ::std::default::Default for rd_kafka_group_info {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct rd_kafka_group_list {
    pub groups: *mut rd_kafka_group_info,
    pub group_cnt: ::std::os::raw::c_int,
    _bindgen_padding_0_: [u8; 4usize],
}
impl ::std::default::Default for rd_kafka_group_list {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type rd_kafka_event_type_t = ::std::os::raw::c_int;
pub enum rd_kafka_op_s { }
pub type rd_kafka_event_t = rd_kafka_op_s;
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
impl ::std::default::Default for __va_list_tag {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
extern "C" {
    pub static mut _IO_2_1_stdin_: _IO_FILE_plus;
    pub static mut _IO_2_1_stdout_: _IO_FILE_plus;
    pub static mut _IO_2_1_stderr_: _IO_FILE_plus;
    pub static mut stdin: *mut _IO_FILE;
    pub static mut stdout: *mut _IO_FILE;
    pub static mut stderr: *mut _IO_FILE;
    pub static mut sys_nerr: ::std::os::raw::c_int;
    pub static mut sys_errlist: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn __underflow(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn __uflow(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn __overflow(arg1: *mut _IO_FILE, arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn _IO_getc(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn _IO_putc(__c: ::std::os::raw::c_int, __fp: *mut _IO_FILE)
     -> ::std::os::raw::c_int;
    pub fn _IO_feof(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn _IO_ferror(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn _IO_peekc_locked(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn _IO_flockfile(arg1: *mut _IO_FILE);
    pub fn _IO_funlockfile(arg1: *mut _IO_FILE);
    pub fn _IO_ftrylockfile(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn _IO_vfscanf(arg1: *mut _IO_FILE,
                       arg2: *const ::std::os::raw::c_char,
                       arg3: __gnuc_va_list, arg4: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn _IO_vfprintf(arg1: *mut _IO_FILE,
                        arg2: *const ::std::os::raw::c_char,
                        arg3: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn _IO_padn(arg1: *mut _IO_FILE, arg2: ::std::os::raw::c_int,
                    arg3: __ssize_t) -> __ssize_t;
    pub fn _IO_sgetn(arg1: *mut _IO_FILE, arg2: *mut ::std::os::raw::c_void,
                     arg3: size_t) -> size_t;
    pub fn _IO_seekoff(arg1: *mut _IO_FILE, arg2: __off64_t,
                       arg3: ::std::os::raw::c_int,
                       arg4: ::std::os::raw::c_int) -> __off64_t;
    pub fn _IO_seekpos(arg1: *mut _IO_FILE, arg2: __off64_t,
                       arg3: ::std::os::raw::c_int) -> __off64_t;
    pub fn _IO_free_backup_area(arg1: *mut _IO_FILE);
    pub fn remove(__filename: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn rename(__old: *const ::std::os::raw::c_char,
                  __new: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn renameat(__oldfd: ::std::os::raw::c_int,
                    __old: *const ::std::os::raw::c_char,
                    __newfd: ::std::os::raw::c_int,
                    __new: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn tmpfile() -> *mut FILE;
    pub fn tmpnam(__s: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn tmpnam_r(__s: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn tempnam(__dir: *const ::std::os::raw::c_char,
                   __pfx: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fopen(__filename: *const ::std::os::raw::c_char,
                 __modes: *const ::std::os::raw::c_char) -> *mut FILE;
    pub fn freopen(__filename: *const ::std::os::raw::c_char,
                   __modes: *const ::std::os::raw::c_char,
                   __stream: *mut FILE) -> *mut FILE;
    pub fn fdopen(__fd: ::std::os::raw::c_int,
                  __modes: *const ::std::os::raw::c_char) -> *mut FILE;
    pub fn fmemopen(__s: *mut ::std::os::raw::c_void, __len: size_t,
                    __modes: *const ::std::os::raw::c_char) -> *mut FILE;
    pub fn open_memstream(__bufloc: *mut *mut ::std::os::raw::c_char,
                          __sizeloc: *mut size_t) -> *mut FILE;
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
    pub fn setvbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char,
                   __modes: ::std::os::raw::c_int, __n: size_t)
     -> ::std::os::raw::c_int;
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char,
                     __size: size_t);
    pub fn setlinebuf(__stream: *mut FILE);
    pub fn fprintf(__stream: *mut FILE,
                   __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn printf(__format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn sprintf(__s: *mut ::std::os::raw::c_char,
                   __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn vfprintf(__s: *mut FILE, __format: *const ::std::os::raw::c_char,
                    __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn vprintf(__format: *const ::std::os::raw::c_char,
                   __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn vsprintf(__s: *mut ::std::os::raw::c_char,
                    __format: *const ::std::os::raw::c_char,
                    __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn snprintf(__s: *mut ::std::os::raw::c_char, __maxlen: size_t,
                    __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn vsnprintf(__s: *mut ::std::os::raw::c_char, __maxlen: size_t,
                     __format: *const ::std::os::raw::c_char,
                     __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn vdprintf(__fd: ::std::os::raw::c_int,
                    __fmt: *const ::std::os::raw::c_char,
                    __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn dprintf(__fd: ::std::os::raw::c_int,
                   __fmt: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn fscanf(__stream: *mut FILE,
                  __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn scanf(__format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn sscanf(__s: *const ::std::os::raw::c_char,
                  __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn vfscanf(__s: *mut FILE, __format: *const ::std::os::raw::c_char,
                   __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn vscanf(__format: *const ::std::os::raw::c_char,
                  __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn vsscanf(__s: *const ::std::os::raw::c_char,
                   __format: *const ::std::os::raw::c_char,
                   __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn getchar() -> ::std::os::raw::c_int;
    pub fn getc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fputc(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn fputc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn putc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn putchar_unlocked(__c: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn getw(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn putw(__w: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn fgets(__s: *mut ::std::os::raw::c_char, __n: ::std::os::raw::c_int,
                 __stream: *mut FILE) -> *mut ::std::os::raw::c_char;
    pub fn __getdelim(__lineptr: *mut *mut ::std::os::raw::c_char,
                      __n: *mut size_t, __delimiter: ::std::os::raw::c_int,
                      __stream: *mut FILE) -> __ssize_t;
    pub fn getdelim(__lineptr: *mut *mut ::std::os::raw::c_char,
                    __n: *mut size_t, __delimiter: ::std::os::raw::c_int,
                    __stream: *mut FILE) -> __ssize_t;
    pub fn getline(__lineptr: *mut *mut ::std::os::raw::c_char,
                   __n: *mut size_t, __stream: *mut FILE) -> __ssize_t;
    pub fn fputs(__s: *const ::std::os::raw::c_char, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    pub fn ungetc(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn fread(__ptr: *mut ::std::os::raw::c_void, __size: size_t,
                 __n: size_t, __stream: *mut FILE) -> size_t;
    pub fn fwrite(__ptr: *const ::std::os::raw::c_void, __size: size_t,
                  __n: size_t, __s: *mut FILE) -> size_t;
    pub fn fread_unlocked(__ptr: *mut ::std::os::raw::c_void, __size: size_t,
                          __n: size_t, __stream: *mut FILE) -> size_t;
    pub fn fwrite_unlocked(__ptr: *const ::std::os::raw::c_void,
                           __size: size_t, __n: size_t, __stream: *mut FILE)
     -> size_t;
    pub fn fseek(__stream: *mut FILE, __off: ::std::os::raw::c_long,
                 __whence: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
    pub fn rewind(__stream: *mut FILE);
    pub fn fseeko(__stream: *mut FILE, __off: __off_t,
                  __whence: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn ftello(__stream: *mut FILE) -> __off_t;
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t)
     -> ::std::os::raw::c_int;
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t)
     -> ::std::os::raw::c_int;
    pub fn clearerr(__stream: *mut FILE);
    pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn clearerr_unlocked(__stream: *mut FILE);
    pub fn feof_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn perror(__s: *const ::std::os::raw::c_char);
    pub fn fileno(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn popen(__command: *const ::std::os::raw::c_char,
                 __modes: *const ::std::os::raw::c_char) -> *mut FILE;
    pub fn pclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn ctermid(__s: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn flockfile(__stream: *mut FILE);
    pub fn ftrylockfile(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn funlockfile(__stream: *mut FILE);
    pub fn imaxabs(__n: intmax_t) -> intmax_t;
    pub fn imaxdiv(__numer: intmax_t, __denom: intmax_t) -> imaxdiv_t;
    pub fn strtoimax(__nptr: *const ::std::os::raw::c_char,
                     __endptr: *mut *mut ::std::os::raw::c_char,
                     __base: ::std::os::raw::c_int) -> intmax_t;
    pub fn strtoumax(__nptr: *const ::std::os::raw::c_char,
                     __endptr: *mut *mut ::std::os::raw::c_char,
                     __base: ::std::os::raw::c_int) -> uintmax_t;
    pub fn wcstoimax(__nptr: *const __gwchar_t,
                     __endptr: *mut *mut __gwchar_t,
                     __base: ::std::os::raw::c_int) -> intmax_t;
    pub fn wcstoumax(__nptr: *const __gwchar_t,
                     __endptr: *mut *mut __gwchar_t,
                     __base: ::std::os::raw::c_int) -> uintmax_t;
    pub fn select(__nfds: ::std::os::raw::c_int, __readfds: *mut fd_set,
                  __writefds: *mut fd_set, __exceptfds: *mut fd_set,
                  __timeout: *mut timeval) -> ::std::os::raw::c_int;
    pub fn pselect(__nfds: ::std::os::raw::c_int, __readfds: *mut fd_set,
                   __writefds: *mut fd_set, __exceptfds: *mut fd_set,
                   __timeout: *const timespec, __sigmask: *const __sigset_t)
     -> ::std::os::raw::c_int;
    pub fn gnu_dev_major(__dev: ::std::os::raw::c_ulonglong)
     -> ::std::os::raw::c_uint;
    pub fn gnu_dev_minor(__dev: ::std::os::raw::c_ulonglong)
     -> ::std::os::raw::c_uint;
    pub fn gnu_dev_makedev(__major: ::std::os::raw::c_uint,
                           __minor: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_ulonglong;
    pub fn rd_kafka_version() -> ::std::os::raw::c_int;
    pub fn rd_kafka_version_str() -> *const ::std::os::raw::c_char;
    pub fn rd_kafka_get_debug_contexts() -> *const ::std::os::raw::c_char;
    pub fn rd_kafka_get_err_descs(errdescs: *mut *const rd_kafka_err_desc,
                                  cntp: *mut size_t);
    pub fn rd_kafka_err2str(err: rd_kafka_resp_err_t)
     -> *const ::std::os::raw::c_char;
    pub fn rd_kafka_err2name(err: rd_kafka_resp_err_t)
     -> *const ::std::os::raw::c_char;
    pub fn rd_kafka_last_error() -> rd_kafka_resp_err_t;
    pub fn rd_kafka_errno2err(errnox: ::std::os::raw::c_int)
     -> rd_kafka_resp_err_t;
    pub fn rd_kafka_errno() -> ::std::os::raw::c_int;
    pub fn rd_kafka_topic_partition_destroy(rktpar:
                                                *mut rd_kafka_topic_partition_t);
    pub fn rd_kafka_topic_partition_list_new(size: ::std::os::raw::c_int)
     -> *mut rd_kafka_topic_partition_list_t;
    pub fn rd_kafka_topic_partition_list_destroy(rkparlist:
                                                     *mut rd_kafka_topic_partition_list_t);
    pub fn rd_kafka_topic_partition_list_add(rktparlist:
                                                 *mut rd_kafka_topic_partition_list_t,
                                             topic:
                                                 *const ::std::os::raw::c_char,
                                             partition: int32_t)
     -> *mut rd_kafka_topic_partition_t;
    pub fn rd_kafka_topic_partition_list_add_range(rktparlist:
                                                       *mut rd_kafka_topic_partition_list_t,
                                                   topic:
                                                       *const ::std::os::raw::c_char,
                                                   start: int32_t,
                                                   stop: int32_t);
    pub fn rd_kafka_topic_partition_list_del(rktparlist:
                                                 *mut rd_kafka_topic_partition_list_t,
                                             topic:
                                                 *const ::std::os::raw::c_char,
                                             partition: int32_t)
     -> ::std::os::raw::c_int;
    pub fn rd_kafka_topic_partition_list_del_by_idx(rktparlist:
                                                        *mut rd_kafka_topic_partition_list_t,
                                                    idx:
                                                        ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn rd_kafka_topic_partition_list_copy(src:
                                                  *const rd_kafka_topic_partition_list_t)
     -> *mut rd_kafka_topic_partition_list_t;
    pub fn rd_kafka_topic_partition_list_set_offset(rktparlist:
                                                        *mut rd_kafka_topic_partition_list_t,
                                                    topic:
                                                        *const ::std::os::raw::c_char,
                                                    partition: int32_t,
                                                    offset: int64_t)
     -> rd_kafka_resp_err_t;
    pub fn rd_kafka_topic_partition_list_find(rktparlist:
                                                  *mut rd_kafka_topic_partition_list_t,
                                              topic:
                                                  *const ::std::os::raw::c_char,
                                              partition: int32_t)
     -> *mut rd_kafka_topic_partition_t;
    pub fn rd_kafka_message_destroy(rkmessage: *mut rd_kafka_message_t);
    pub fn rd_kafka_message_timestamp(rkmessage: *const rd_kafka_message_t,
                                      tstype: *mut rd_kafka_timestamp_type_t)
     -> int64_t;
    pub fn rd_kafka_conf_new() -> *mut rd_kafka_conf_t;
    pub fn rd_kafka_conf_destroy(conf: *mut rd_kafka_conf_t);
    pub fn rd_kafka_conf_dup(conf: *const rd_kafka_conf_t)
     -> *mut rd_kafka_conf_t;
    pub fn rd_kafka_conf_set(conf: *mut rd_kafka_conf_t,
                             name: *const ::std::os::raw::c_char,
                             value: *const ::std::os::raw::c_char,
                             errstr: *mut ::std::os::raw::c_char,
                             errstr_size: size_t) -> rd_kafka_conf_res_t;
    pub fn rd_kafka_conf_set_events(conf: *mut rd_kafka_conf_t,
                                    events: ::std::os::raw::c_int);
    pub fn rd_kafka_conf_set_dr_cb(conf: *mut rd_kafka_conf_t,
                                   dr_cb:
                                       ::std::option::Option<unsafe extern "C" fn(rk:
                                                                                      *mut rd_kafka_t,
                                                                                  payload:
                                                                                      *mut ::std::os::raw::c_void,
                                                                                  len:
                                                                                      size_t,
                                                                                  err:
                                                                                      rd_kafka_resp_err_t,
                                                                                  opaque:
                                                                                      *mut ::std::os::raw::c_void,
                                                                                  msg_opaque:
                                                                                      *mut ::std::os::raw::c_void)>);
    pub fn rd_kafka_conf_set_dr_msg_cb(conf: *mut rd_kafka_conf_t,
                                       dr_msg_cb:
                                           ::std::option::Option<unsafe extern "C" fn(rk:
                                                                                          *mut rd_kafka_t,
                                                                                      rkmessage:
                                                                                          *const rd_kafka_message_t,
                                                                                      opaque:
                                                                                          *mut ::std::os::raw::c_void)>);
    pub fn rd_kafka_conf_set_consume_cb(conf: *mut rd_kafka_conf_t,
                                        consume_cb:
                                            ::std::option::Option<unsafe extern "C" fn(rkmessage:
                                                                                           *mut rd_kafka_message_t,
                                                                                       opaque:
                                                                                           *mut ::std::os::raw::c_void)>);
    pub fn rd_kafka_conf_set_rebalance_cb(conf: *mut rd_kafka_conf_t,
                                          rebalance_cb:
                                              ::std::option::Option<unsafe extern "C" fn(rk:
                                                                                             *mut rd_kafka_t,
                                                                                         err:
                                                                                             rd_kafka_resp_err_t,
                                                                                         partitions:
                                                                                             *mut rd_kafka_topic_partition_list_t,
                                                                                         opaque:
                                                                                             *mut ::std::os::raw::c_void)>);
    pub fn rd_kafka_conf_set_offset_commit_cb(conf: *mut rd_kafka_conf_t,
                                              offset_commit_cb:
                                                  ::std::option::Option<unsafe extern "C" fn(rk:
                                                                                                 *mut rd_kafka_t,
                                                                                             err:
                                                                                                 rd_kafka_resp_err_t,
                                                                                             offsets:
                                                                                                 *mut rd_kafka_topic_partition_list_t,
                                                                                             opaque:
                                                                                                 *mut ::std::os::raw::c_void)>);
    pub fn rd_kafka_conf_set_error_cb(conf: *mut rd_kafka_conf_t,
                                      error_cb:
                                          ::std::option::Option<unsafe extern "C" fn(rk:
                                                                                         *mut rd_kafka_t,
                                                                                     err:
                                                                                         ::std::os::raw::c_int,
                                                                                     reason:
                                                                                         *const ::std::os::raw::c_char,
                                                                                     opaque:
                                                                                         *mut ::std::os::raw::c_void)>);
    pub fn rd_kafka_conf_set_throttle_cb(conf: *mut rd_kafka_conf_t,
                                         throttle_cb:
                                             ::std::option::Option<unsafe extern "C" fn(rk:
                                                                                            *mut rd_kafka_t,
                                                                                        broker_name:
                                                                                            *const ::std::os::raw::c_char,
                                                                                        broker_id:
                                                                                            int32_t,
                                                                                        throttle_time_ms:
                                                                                            ::std::os::raw::c_int,
                                                                                        opaque:
                                                                                            *mut ::std::os::raw::c_void)>);
    pub fn rd_kafka_conf_set_log_cb(conf: *mut rd_kafka_conf_t,
                                    log_cb:
                                        ::std::option::Option<unsafe extern "C" fn(rk:
                                                                                       *const rd_kafka_t,
                                                                                   level:
                                                                                       ::std::os::raw::c_int,
                                                                                   fac:
                                                                                       *const ::std::os::raw::c_char,
                                                                                   buf:
                                                                                       *const ::std::os::raw::c_char)>);
    pub fn rd_kafka_conf_set_stats_cb(conf: *mut rd_kafka_conf_t,
                                      stats_cb:
                                          ::std::option::Option<unsafe extern "C" fn(rk:
                                                                                         *mut rd_kafka_t,
                                                                                     json:
                                                                                         *mut ::std::os::raw::c_char,
                                                                                     json_len:
                                                                                         size_t,
                                                                                     opaque:
                                                                                         *mut ::std::os::raw::c_void)
                                                                    ->
                                                                        ::std::os::raw::c_int>);
    pub fn rd_kafka_conf_set_socket_cb(conf: *mut rd_kafka_conf_t,
                                       socket_cb:
                                           ::std::option::Option<unsafe extern "C" fn(domain:
                                                                                          ::std::os::raw::c_int,
                                                                                      type_:
                                                                                          ::std::os::raw::c_int,
                                                                                      protocol:
                                                                                          ::std::os::raw::c_int,
                                                                                      opaque:
                                                                                          *mut ::std::os::raw::c_void)
                                                                     ->
                                                                         ::std::os::raw::c_int>);
    pub fn rd_kafka_conf_set_open_cb(conf: *mut rd_kafka_conf_t,
                                     open_cb:
                                         ::std::option::Option<unsafe extern "C" fn(pathname:
                                                                                        *const ::std::os::raw::c_char,
                                                                                    flags:
                                                                                        ::std::os::raw::c_int,
                                                                                    mode:
                                                                                        mode_t,
                                                                                    opaque:
                                                                                        *mut ::std::os::raw::c_void)
                                                                   ->
                                                                       ::std::os::raw::c_int>);
    pub fn rd_kafka_conf_set_opaque(conf: *mut rd_kafka_conf_t,
                                    opaque: *mut ::std::os::raw::c_void);
    pub fn rd_kafka_opaque(rk: *const rd_kafka_t)
     -> *mut ::std::os::raw::c_void;
    pub fn rd_kafka_conf_set_default_topic_conf(conf: *mut rd_kafka_conf_t,
                                                tconf:
                                                    *mut rd_kafka_topic_conf_t);
    pub fn rd_kafka_conf_get(conf: *const rd_kafka_conf_t,
                             name: *const ::std::os::raw::c_char,
                             dest: *mut ::std::os::raw::c_char,
                             dest_size: *mut size_t) -> rd_kafka_conf_res_t;
    pub fn rd_kafka_topic_conf_get(conf: *const rd_kafka_topic_conf_t,
                                   name: *const ::std::os::raw::c_char,
                                   dest: *mut ::std::os::raw::c_char,
                                   dest_size: *mut size_t)
     -> rd_kafka_conf_res_t;
    pub fn rd_kafka_conf_dump(conf: *mut rd_kafka_conf_t, cntp: *mut size_t)
     -> *mut *const ::std::os::raw::c_char;
    pub fn rd_kafka_topic_conf_dump(conf: *mut rd_kafka_topic_conf_t,
                                    cntp: *mut size_t)
     -> *mut *const ::std::os::raw::c_char;
    pub fn rd_kafka_conf_dump_free(arr: *mut *const ::std::os::raw::c_char,
                                   cnt: size_t);
    pub fn rd_kafka_conf_properties_show(fp: *mut FILE);
    pub fn rd_kafka_topic_conf_new() -> *mut rd_kafka_topic_conf_t;
    pub fn rd_kafka_topic_conf_dup(conf: *const rd_kafka_topic_conf_t)
     -> *mut rd_kafka_topic_conf_t;
    pub fn rd_kafka_topic_conf_destroy(topic_conf:
                                           *mut rd_kafka_topic_conf_t);
    pub fn rd_kafka_topic_conf_set(conf: *mut rd_kafka_topic_conf_t,
                                   name: *const ::std::os::raw::c_char,
                                   value: *const ::std::os::raw::c_char,
                                   errstr: *mut ::std::os::raw::c_char,
                                   errstr_size: size_t)
     -> rd_kafka_conf_res_t;
    pub fn rd_kafka_topic_conf_set_opaque(conf: *mut rd_kafka_topic_conf_t,
                                          opaque:
                                              *mut ::std::os::raw::c_void);
    pub fn rd_kafka_topic_conf_set_partitioner_cb(topic_conf:
                                                      *mut rd_kafka_topic_conf_t,
                                                  partitioner:
                                                      ::std::option::Option<unsafe extern "C" fn(rkt:
                                                                                                     *const rd_kafka_topic_t,
                                                                                                 keydata:
                                                                                                     *const ::std::os::raw::c_void,
                                                                                                 keylen:
                                                                                                     size_t,
                                                                                                 partition_cnt:
                                                                                                     int32_t,
                                                                                                 rkt_opaque:
                                                                                                     *mut ::std::os::raw::c_void,
                                                                                                 msg_opaque:
                                                                                                     *mut ::std::os::raw::c_void)
                                                                                ->
                                                                                    int32_t>);
    pub fn rd_kafka_topic_partition_available(rkt: *const rd_kafka_topic_t,
                                              partition: int32_t)
     -> ::std::os::raw::c_int;
    pub fn rd_kafka_msg_partitioner_random(rkt: *const rd_kafka_topic_t,
                                           key: *const ::std::os::raw::c_void,
                                           keylen: size_t,
                                           partition_cnt: int32_t,
                                           opaque:
                                               *mut ::std::os::raw::c_void,
                                           msg_opaque:
                                               *mut ::std::os::raw::c_void)
     -> int32_t;
    pub fn rd_kafka_msg_partitioner_consistent(rkt: *const rd_kafka_topic_t,
                                               key:
                                                   *const ::std::os::raw::c_void,
                                               keylen: size_t,
                                               partition_cnt: int32_t,
                                               opaque:
                                                   *mut ::std::os::raw::c_void,
                                               msg_opaque:
                                                   *mut ::std::os::raw::c_void)
     -> int32_t;
    pub fn rd_kafka_msg_partitioner_consistent_random(rkt:
                                                          *const rd_kafka_topic_t,
                                                      key:
                                                          *const ::std::os::raw::c_void,
                                                      keylen: size_t,
                                                      partition_cnt: int32_t,
                                                      opaque:
                                                          *mut ::std::os::raw::c_void,
                                                      msg_opaque:
                                                          *mut ::std::os::raw::c_void)
     -> int32_t;
    pub fn rd_kafka_new(type_: rd_kafka_type_t, conf: *mut rd_kafka_conf_t,
                        errstr: *mut ::std::os::raw::c_char,
                        errstr_size: size_t) -> *mut rd_kafka_t;
    pub fn rd_kafka_destroy(rk: *mut rd_kafka_t);
    pub fn rd_kafka_name(rk: *const rd_kafka_t)
     -> *const ::std::os::raw::c_char;
    pub fn rd_kafka_memberid(rk: *const rd_kafka_t)
     -> *mut ::std::os::raw::c_char;
    pub fn rd_kafka_topic_new(rk: *mut rd_kafka_t,
                              topic: *const ::std::os::raw::c_char,
                              conf: *mut rd_kafka_topic_conf_t)
     -> *mut rd_kafka_topic_t;
    pub fn rd_kafka_topic_destroy(rkt: *mut rd_kafka_topic_t);
    pub fn rd_kafka_topic_name(rkt: *const rd_kafka_topic_t)
     -> *const ::std::os::raw::c_char;
    pub fn rd_kafka_topic_opaque(rkt: *const rd_kafka_topic_t)
     -> *mut ::std::os::raw::c_void;
    pub fn rd_kafka_poll(rk: *mut rd_kafka_t,
                         timeout_ms: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn rd_kafka_yield(rk: *mut rd_kafka_t);
    pub fn rd_kafka_pause_partitions(rk: *mut rd_kafka_t,
                                     partitions:
                                         *mut rd_kafka_topic_partition_list_t)
     -> rd_kafka_resp_err_t;
    pub fn rd_kafka_resume_partitions(rk: *mut rd_kafka_t,
                                      partitions:
                                          *mut rd_kafka_topic_partition_list_t)
     -> rd_kafka_resp_err_t;
    pub fn rd_kafka_query_watermark_offsets(rk: *mut rd_kafka_t,
                                            topic:
                                                *const ::std::os::raw::c_char,
                                            partition: int32_t,
                                            low: *mut int64_t,
                                            high: *mut int64_t,
                                            timeout_ms: ::std::os::raw::c_int)
     -> rd_kafka_resp_err_t;
    pub fn rd_kafka_get_watermark_offsets(rk: *mut rd_kafka_t,
                                          topic:
                                              *const ::std::os::raw::c_char,
                                          partition: int32_t,
                                          low: *mut int64_t,
                                          high: *mut int64_t)
     -> rd_kafka_resp_err_t;
    pub fn rd_kafka_mem_free(rk: *mut rd_kafka_t,
                             ptr: *mut ::std::os::raw::c_void);
    pub fn rd_kafka_queue_new(rk: *mut rd_kafka_t) -> *mut rd_kafka_queue_t;
    pub fn rd_kafka_queue_destroy(rkqu: *mut rd_kafka_queue_t);
    pub fn rd_kafka_queue_get_main(rk: *mut rd_kafka_t)
     -> *mut rd_kafka_queue_t;
    pub fn rd_kafka_queue_get_consumer(rk: *mut rd_kafka_t)
     -> *mut rd_kafka_queue_t;
    pub fn rd_kafka_queue_forward(src: *mut rd_kafka_queue_t,
                                  dst: *mut rd_kafka_queue_t);
    pub fn rd_kafka_queue_length(rkqu: *mut rd_kafka_queue_t) -> size_t;
    pub fn rd_kafka_queue_io_event_enable(rkqu: *mut rd_kafka_queue_t,
                                          fd: ::std::os::raw::c_int,
                                          payload:
                                              *const ::std::os::raw::c_void,
                                          size: size_t);
    pub fn rd_kafka_consume_start(rkt: *mut rd_kafka_topic_t,
                                  partition: int32_t, offset: int64_t)
     -> ::std::os::raw::c_int;
    pub fn rd_kafka_consume_start_queue(rkt: *mut rd_kafka_topic_t,
                                        partition: int32_t, offset: int64_t,
                                        rkqu: *mut rd_kafka_queue_t)
     -> ::std::os::raw::c_int;
    pub fn rd_kafka_consume_stop(rkt: *mut rd_kafka_topic_t,
                                 partition: int32_t) -> ::std::os::raw::c_int;
    pub fn rd_kafka_seek(rkt: *mut rd_kafka_topic_t, partition: int32_t,
                         offset: int64_t, timeout_ms: ::std::os::raw::c_int)
     -> rd_kafka_resp_err_t;
    pub fn rd_kafka_consume(rkt: *mut rd_kafka_topic_t, partition: int32_t,
                            timeout_ms: ::std::os::raw::c_int)
     -> *mut rd_kafka_message_t;
    pub fn rd_kafka_consume_batch(rkt: *mut rd_kafka_topic_t,
                                  partition: int32_t,
                                  timeout_ms: ::std::os::raw::c_int,
                                  rkmessages: *mut *mut rd_kafka_message_t,
                                  rkmessages_size: size_t) -> ssize_t;
    pub fn rd_kafka_consume_callback(rkt: *mut rd_kafka_topic_t,
                                     partition: int32_t,
                                     timeout_ms: ::std::os::raw::c_int,
                                     consume_cb:
                                         ::std::option::Option<unsafe extern "C" fn(rkmessage:
                                                                                        *mut rd_kafka_message_t,
                                                                                    opaque:
                                                                                        *mut ::std::os::raw::c_void)>,
                                     opaque: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn rd_kafka_consume_queue(rkqu: *mut rd_kafka_queue_t,
                                  timeout_ms: ::std::os::raw::c_int)
     -> *mut rd_kafka_message_t;
    pub fn rd_kafka_consume_batch_queue(rkqu: *mut rd_kafka_queue_t,
                                        timeout_ms: ::std::os::raw::c_int,
                                        rkmessages:
                                            *mut *mut rd_kafka_message_t,
                                        rkmessages_size: size_t) -> ssize_t;
    pub fn rd_kafka_consume_callback_queue(rkqu: *mut rd_kafka_queue_t,
                                           timeout_ms: ::std::os::raw::c_int,
                                           consume_cb:
                                               ::std::option::Option<unsafe extern "C" fn(rkmessage:
                                                                                              *mut rd_kafka_message_t,
                                                                                          opaque:
                                                                                              *mut ::std::os::raw::c_void)>,
                                           opaque:
                                               *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn rd_kafka_offset_store(rkt: *mut rd_kafka_topic_t,
                                 partition: int32_t, offset: int64_t)
     -> rd_kafka_resp_err_t;
    pub fn rd_kafka_subscribe(rk: *mut rd_kafka_t,
                              topics: *const rd_kafka_topic_partition_list_t)
     -> rd_kafka_resp_err_t;
    pub fn rd_kafka_unsubscribe(rk: *mut rd_kafka_t) -> rd_kafka_resp_err_t;
    pub fn rd_kafka_subscription(rk: *mut rd_kafka_t,
                                 topics:
                                     *mut *mut rd_kafka_topic_partition_list_t)
     -> rd_kafka_resp_err_t;
    pub fn rd_kafka_consumer_poll(rk: *mut rd_kafka_t,
                                  timeout_ms: ::std::os::raw::c_int)
     -> *mut rd_kafka_message_t;
    pub fn rd_kafka_consumer_close(rk: *mut rd_kafka_t)
     -> rd_kafka_resp_err_t;
    pub fn rd_kafka_assign(rk: *mut rd_kafka_t,
                           partitions: *const rd_kafka_topic_partition_list_t)
     -> rd_kafka_resp_err_t;
    pub fn rd_kafka_assignment(rk: *mut rd_kafka_t,
                               partitions:
                                   *mut *mut rd_kafka_topic_partition_list_t)
     -> rd_kafka_resp_err_t;
    pub fn rd_kafka_commit(rk: *mut rd_kafka_t,
                           offsets: *const rd_kafka_topic_partition_list_t,
                           async: ::std::os::raw::c_int)
     -> rd_kafka_resp_err_t;
    pub fn rd_kafka_commit_message(rk: *mut rd_kafka_t,
                                   rkmessage: *const rd_kafka_message_t,
                                   async: ::std::os::raw::c_int)
     -> rd_kafka_resp_err_t;
    pub fn rd_kafka_commit_queue(rk: *mut rd_kafka_t,
                                 offsets:
                                     *const rd_kafka_topic_partition_list_t,
                                 rkqu: *mut rd_kafka_queue_t,
                                 cb:
                                     ::std::option::Option<unsafe extern "C" fn(rk:
                                                                                    *mut rd_kafka_t,
                                                                                err:
                                                                                    rd_kafka_resp_err_t,
                                                                                offsets:
                                                                                    *mut rd_kafka_topic_partition_list_t,
                                                                                opaque:
                                                                                    *mut ::std::os::raw::c_void)>,
                                 opaque: *mut ::std::os::raw::c_void)
     -> rd_kafka_resp_err_t;
    pub fn rd_kafka_committed(rk: *mut rd_kafka_t,
                              partitions:
                                  *mut rd_kafka_topic_partition_list_t,
                              timeout_ms: ::std::os::raw::c_int)
     -> rd_kafka_resp_err_t;
    pub fn rd_kafka_position(rk: *mut rd_kafka_t,
                             partitions: *mut rd_kafka_topic_partition_list_t)
     -> rd_kafka_resp_err_t;
    pub fn rd_kafka_produce(rkt: *mut rd_kafka_topic_t, partition: int32_t,
                            msgflags: ::std::os::raw::c_int,
                            payload: *mut ::std::os::raw::c_void, len: size_t,
                            key: *const ::std::os::raw::c_void,
                            keylen: size_t,
                            msg_opaque: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn rd_kafka_produce_batch(rkt: *mut rd_kafka_topic_t,
                                  partition: int32_t,
                                  msgflags: ::std::os::raw::c_int,
                                  rkmessages: *mut rd_kafka_message_t,
                                  message_cnt: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn rd_kafka_flush(rk: *mut rd_kafka_t,
                          timeout_ms: ::std::os::raw::c_int)
     -> rd_kafka_resp_err_t;
    pub fn rd_kafka_metadata(rk: *mut rd_kafka_t,
                             all_topics: ::std::os::raw::c_int,
                             only_rkt: *mut rd_kafka_topic_t,
                             metadatap: *mut *const rd_kafka_metadata,
                             timeout_ms: ::std::os::raw::c_int)
     -> rd_kafka_resp_err_t;
    pub fn rd_kafka_metadata_destroy(metadata: *const rd_kafka_metadata);
    pub fn rd_kafka_list_groups(rk: *mut rd_kafka_t,
                                group: *const ::std::os::raw::c_char,
                                grplistp: *mut *const rd_kafka_group_list,
                                timeout_ms: ::std::os::raw::c_int)
     -> rd_kafka_resp_err_t;
    pub fn rd_kafka_group_list_destroy(grplist: *const rd_kafka_group_list);
    pub fn rd_kafka_brokers_add(rk: *mut rd_kafka_t,
                                brokerlist: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn rd_kafka_set_logger(rk: *mut rd_kafka_t,
                               func:
                                   ::std::option::Option<unsafe extern "C" fn(rk:
                                                                                  *const rd_kafka_t,
                                                                              level:
                                                                                  ::std::os::raw::c_int,
                                                                              fac:
                                                                                  *const ::std::os::raw::c_char,
                                                                              buf:
                                                                                  *const ::std::os::raw::c_char)>);
    pub fn rd_kafka_set_log_level(rk: *mut rd_kafka_t,
                                  level: ::std::os::raw::c_int);
    pub fn rd_kafka_log_print(rk: *const rd_kafka_t,
                              level: ::std::os::raw::c_int,
                              fac: *const ::std::os::raw::c_char,
                              buf: *const ::std::os::raw::c_char);
    pub fn rd_kafka_log_syslog(rk: *const rd_kafka_t,
                               level: ::std::os::raw::c_int,
                               fac: *const ::std::os::raw::c_char,
                               buf: *const ::std::os::raw::c_char);
    pub fn rd_kafka_outq_len(rk: *mut rd_kafka_t) -> ::std::os::raw::c_int;
    pub fn rd_kafka_dump(fp: *mut FILE, rk: *mut rd_kafka_t);
    pub fn rd_kafka_thread_cnt() -> ::std::os::raw::c_int;
    pub fn rd_kafka_wait_destroyed(timeout_ms: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn rd_kafka_poll_set_consumer(rk: *mut rd_kafka_t)
     -> rd_kafka_resp_err_t;
    pub fn rd_kafka_event_type(rkev: *const rd_kafka_event_t)
     -> rd_kafka_event_type_t;
    pub fn rd_kafka_event_name(rkev: *const rd_kafka_event_t)
     -> *const ::std::os::raw::c_char;
    pub fn rd_kafka_event_destroy(rkev: *mut rd_kafka_event_t);
    pub fn rd_kafka_event_message_next(rkev: *mut rd_kafka_event_t)
     -> *const rd_kafka_message_t;
    pub fn rd_kafka_event_message_array(rkev: *mut rd_kafka_event_t,
                                        rkmessages:
                                            *mut *const rd_kafka_message_t,
                                        size: size_t) -> size_t;
    pub fn rd_kafka_event_message_count(rkev: *mut rd_kafka_event_t)
     -> size_t;
    pub fn rd_kafka_event_error(rkev: *mut rd_kafka_event_t)
     -> rd_kafka_resp_err_t;
    pub fn rd_kafka_event_error_string(rkev: *mut rd_kafka_event_t)
     -> *const ::std::os::raw::c_char;
    pub fn rd_kafka_event_opaque(rkev: *mut rd_kafka_event_t)
     -> *mut ::std::os::raw::c_void;
    pub fn rd_kafka_event_log(rkev: *mut rd_kafka_event_t,
                              fac: *mut *const ::std::os::raw::c_char,
                              str: *mut *const ::std::os::raw::c_char,
                              level: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn rd_kafka_event_topic_partition_list(rkev: *mut rd_kafka_event_t)
     -> *mut rd_kafka_topic_partition_list_t;
    pub fn rd_kafka_event_topic_partition(rkev: *mut rd_kafka_event_t)
     -> *mut rd_kafka_topic_partition_t;
    pub fn rd_kafka_queue_poll(rkqu: *mut rd_kafka_queue_t,
                               timeout_ms: ::std::os::raw::c_int)
     -> *mut rd_kafka_event_t;
}
